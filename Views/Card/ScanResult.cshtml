@model IEnumerable<CardTagManager.Models.ScanResultViewModel>

@{
    ViewData["Title"] = "Scan Results";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 flex flex-col">
    <!-- Header Banner with Blur Effect -->
    <div class="bg-gradient-to-r from-primary-600 to-primary-500 text-white shadow-xl relative overflow-hidden">
        <div class="absolute inset-0 bg-black opacity-10 z-0"></div>
        <div class="container mx-auto px-4 py-6 relative z-10">
            <div class="flex justify-between items-center">
                <div class="flex items-center space-x-3">
                    <div class="w-12 h-12 rounded-xl bg-white/20 flex items-center justify-center shadow-lg backdrop-blur-sm">
                        <i class="fas fa-qrcode text-white text-xl"></i>
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold">Scan Results</h1>
                        <p class="text-sm text-white/80">Track product tag scanning activity</p>
                    </div>
                </div>
                <div class="flex items-center space-x-3">
                    <span class="hidden md:inline-block px-3 py-1 bg-white/20 rounded-full text-sm">
                        Last refresh: @DateTime.Now.ToString("HH:mm:ss")
                    </span>
                    <button id="refresh-btn" class="p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors" title="Refresh Data">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                    <a asp-action="Index" class="p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors" title="Back to Products">
                        <i class="fas fa-home"></i>
                    </a>
                    <div class="relative">
                        <button id="export-menu-btn" class="p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors" title="Export Options">
                            <i class="fas fa-download"></i>
                        </button>
                        <div id="export-menu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl z-20 border border-gray-100 transform origin-top-right transition-all scale-95">
                            <div class="py-1">
                                <button id="export-csv" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                    <i class="fas fa-file-csv mr-2 text-green-500"></i> Export as CSV
                                </button>
                                <button id="export-pdf" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                    <i class="fas fa-file-pdf mr-2 text-red-500"></i> Export as PDF
                                </button>
                                <button id="export-excel" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                    <i class="fas fa-file-excel mr-2 text-green-600"></i> Export as Excel
                                </button>
                                <hr class="my-1 border-gray-100">
                                <button id="print-results" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                    <i class="fas fa-print mr-2 text-blue-500"></i> Print Results
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content with Shadow Effect -->
    <div class="container mx-auto px-4 py-6 flex-grow">
        <!-- Navigation Tabs -->
        <div class="mb-6 border-b border-gray-200">
            <div class="flex space-x-2">
                <button id="tab-scan-results" class="tab-button px-6 py-3 border-b-2 border-primary-500 text-primary-600 font-medium text-sm">
                    Scan Results
                </button>
                <button id="tab-issues" class="tab-button px-6 py-3 text-gray-500 hover:text-gray-700 font-medium text-sm">
                    Issue Reports
                </button>
                <button id="tab-analytics" class="tab-button px-6 py-3 text-gray-500 hover:text-gray-700 font-medium text-sm">
                    Analytics
                </button>
            </div>
        </div>

        <!-- Tab Content - Scan Results -->
        <div id="content-scan-results" class="tab-content">
            <!-- Live Stats Cards with Animated Counters -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-white rounded-xl shadow-md p-4 border-l-4 border-blue-500 transform transition-all hover:shadow-lg hover:scale-[1.01]">
                    <div class="flex items-center">
                        <div class="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 mr-4 shadow-inner">
                            <i class="fas fa-qrcode text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm font-medium uppercase tracking-wider">Total Scans</p>
                            <p class="text-2xl font-bold" id="total-scans-counter">
                                <span class="animate-counter" data-count="@Model.Count()">0</span>
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-xl shadow-md p-4 border-l-4 border-green-500 transform transition-all hover:shadow-lg hover:scale-[1.01]">
                    <div class="flex items-center">
                        <div class="w-12 h-12 rounded-full bg-green-100 flex items-center justify-center text-green-600 mr-4 shadow-inner">
                            <i class="fas fa-calendar-day text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm font-medium uppercase tracking-wider">Today's Scans</p>
                            <p class="text-2xl font-bold" id="today-scans-counter">
                                <span class="animate-counter" data-count="@Model.Count(s => s.ScanTime.Date == DateTime.Today)">0</span>
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-xl shadow-md p-4 border-l-4 border-purple-500 transform transition-all hover:shadow-lg hover:scale-[1.01]">
                    <div class="flex items-center">
                        <div class="w-12 h-12 rounded-full bg-purple-100 flex items-center justify-center text-purple-600 mr-4 shadow-inner">
                            <i class="fas fa-map-marker-alt text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm font-medium uppercase tracking-wider">Locations</p>
                            <p class="text-2xl font-bold" id="locations-counter">
                                <span class="animate-counter" data-count="@Model.Select(s => s.Location).Distinct().Count()">0</span>
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-xl shadow-md p-4 border-l-4 border-yellow-500 transform transition-all hover:shadow-lg hover:scale-[1.01]">
                    <div class="flex items-center">
                        <div class="w-12 h-12 rounded-full bg-yellow-100 flex items-center justify-center text-yellow-600 mr-4 shadow-inner">
                            <i class="fas fa-percentage text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm font-medium uppercase tracking-wider">Success Rate</p>
                            <p class="text-2xl font-bold" id="success-rate-counter">
                                <span class="animate-counter" data-count="@(Model.Any() ? Math.Round((double)Model.Count(s => s.ScanResult == "Success") / Model.Count() * 100) : 0)">0</span>%
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Advanced Search with Collapsible Panel -->
            <div class="bg-white rounded-xl shadow-md border border-gray-100 mb-6 overflow-hidden">
                <div class="p-4 border-b border-gray-100 flex justify-between items-center bg-gray-50">
                    <h2 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-filter text-primary-500 mr-2"></i> Filter Scan Results
                    </h2>
                    <div class="flex items-center space-x-2">
                        <button id="date-filter-btn" class="px-3 py-1.5 text-sm rounded-lg border border-gray-200 flex items-center hover:bg-gray-50 transition-colors">
                            <i class="fas fa-calendar-alt mr-2"></i> Date Range
                        </button>
                        <button id="advanced-filter-btn" class="px-3 py-1.5 text-sm rounded-lg border border-gray-200 flex items-center hover:bg-gray-50 transition-colors">
                            <i class="fas fa-sliders-h mr-2"></i> Advanced
                        </button>
                    </div>
                </div>
                
                <div class="p-4">
                    <div class="relative">
                        <input type="text" id="scan-search" placeholder="Search by product name, location, or scan result..." 
                               class="w-full pl-12 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all" />
                        <div class="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                            <i class="fas fa-search"></i>
                        </div>
                        <button id="clear-search" class="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 hidden">
                            <i class="fas fa-times-circle"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Advanced Filter Panel (hidden by default) -->
                <div id="advanced-filter-panel" class="hidden border-t border-gray-100 p-4 bg-gray-50">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
                            <div class="flex space-x-2">
                                <div class="relative flex-grow">
                                    <input type="date" id="date-from" class="w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg text-sm" placeholder="From">
                                    <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                        <i class="fas fa-calendar-alt"></i>
                                    </div>
                                </div>
                                <div class="relative flex-grow">
                                    <input type="date" id="date-to" class="w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg text-sm" placeholder="To">
                                    <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                        <i class="fas fa-calendar-alt"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Scan Results</label>
                            <div class="relative">
                                <select id="result-filter" class="w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg appearance-none text-sm">
                                    <option value="">All Results</option>
                                    <option value="Success">Success</option>
                                    <option value="Failed">Failed</option>
                                    <option value="Partial">Partial</option>
                                </select>
                                <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-check-circle"></i>
                                </div>
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none">
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                            <div class="relative">
                                <select id="location-filter" class="w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg appearance-none text-sm">
                                    <option value="">All Locations</option>
                                    @foreach (var location in Model.Select(s => s.Location).Distinct())
                                    {
                                        <option value="@location">@location</option>
                                    }
                                </select>
                                <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-map-marker-alt"></i>
                                </div>
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none">
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex justify-end mt-4 space-x-3">
                        <button id="reset-filters" class="px-4 py-2 text-sm border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors">
                            Reset Filters
                        </button>
                        <button id="apply-filters" class="px-4 py-2 text-sm bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
                            Apply Filters
                        </button>
                    </div>
                </div>
                
                <!-- Active Filters (shown when filters are applied) -->
                <div id="active-filters" class="hidden px-4 py-2 border-t border-gray-100 bg-blue-50">
                    <div class="flex flex-wrap items-center gap-2">
                        <span class="text-xs font-medium text-blue-700">Active Filters:</span>
                        <div id="filter-tags" class="flex flex-wrap gap-2">
                            <!-- Filter tags will be inserted here by JavaScript -->
                        </div>
                        <button id="clear-all-filters" class="ml-auto text-xs text-blue-600 hover:text-blue-800">
                            Clear All
                        </button>
                    </div>
                </div>
            </div>

            <!-- Time-based Quick Filters -->
            <div class="flex overflow-x-auto scrollbar-none pb-2 mb-4">
                <button data-time-filter="all" class="time-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-primary-600 text-white text-sm">
                    All Time
                </button>
                <button data-time-filter="today" class="time-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 text-sm">
                    Today
                </button>
                <button data-time-filter="yesterday" class="time-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 text-sm">
                    Yesterday
                </button>
                <button data-time-filter="week" class="time-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 text-sm">
                    This Week
                </button>
                <button data-time-filter="month" class="time-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 text-sm">
                    This Month
                </button>
            </div>

            <!-- Results List -->
            @if (!Model.Any())
            {
                <div class="bg-white rounded-xl shadow-md p-8 text-center fade-in">
                    <div class="mx-auto w-24 h-24 rounded-full bg-primary-50 text-primary-500 flex items-center justify-center mb-4">
                        <i class="fas fa-qrcode text-4xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-2">No scan results found</h3>
                    <p class="text-gray-500 mb-6 max-w-md mx-auto">Scan one of your product tags to see the results here. Use a QR code scanner app on your mobile device.</p>
                    <div class="flex gap-3 justify-center flex-wrap">
                        <a asp-action="Index" class="btn-primary inline-flex shadow-md hover:shadow-lg">
                            <i class="fas fa-layer-group mr-2"></i> View Products
                        </a>
                        <a asp-action="Create" class="btn-secondary inline-flex shadow-md hover:shadow-lg">
                            <i class="fas fa-plus-circle mr-2"></i> Add New Product
                        </a>
                    </div>
                </div>
            }
            else
            {
                <div class="bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden mb-6">
                    <!-- Table Toolbar -->
                    <div class="p-3 border-b border-gray-100 bg-gray-50 flex justify-between items-center">
                        <div class="text-sm text-gray-500">
                            <span id="result-count">Showing <span class="font-medium text-gray-700">@Model.Count()</span> results</span>
                        </div>
                        <div class="flex space-x-2">
                            <div class="relative">
                                <select id="results-per-page" class="text-sm border border-gray-200 rounded-lg py-1.5 pl-3 pr-8 appearance-none bg-white">
                                    <option value="10">10 per page</option>
                                    <option value="25">25 per page</option>
                                    <option value="50">50 per page</option>
                                    <option value="100">100 per page</option>
                                </select>
                                <div class="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none text-gray-400">
                                    <i class="fas fa-chevron-down text-xs"></i>
                                </div>
                            </div>
                            <div class="flex border border-gray-200 rounded-lg overflow-hidden">
                                <button id="view-table" class="px-2 py-1.5 bg-white text-primary-600 border-r border-gray-200">
                                    <i class="fas fa-table"></i>
                                </button>
                                <button id="view-cards" class="px-2 py-1.5 bg-gray-50 text-gray-500 hover:text-gray-700">
                                    <i class="fas fa-th-large"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Table View (default) -->
                    <div id="table-view" class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col" class="sortable px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" data-sort="product">
                                        <div class="flex items-center">
                                            Product <i class="fas fa-sort ml-1 text-gray-400"></i>
                                        </div>
                                    </th>
                                    <th scope="col" class="sortable px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" data-sort="time">
                                        <div class="flex items-center">
                                            Scan Time <i class="fas fa-sort ml-1 text-gray-400"></i>
                                        </div>
                                    </th>
                                    <th scope="col" class="sortable px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" data-sort="device">
                                        <div class="flex items-center">
                                            Device Info <i class="fas fa-sort ml-1 text-gray-400"></i>
                                        </div>
                                    </th>
                                    <th scope="col" class="sortable px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" data-sort="location">
                                        <div class="flex items-center">
                                            Location <i class="fas fa-sort ml-1 text-gray-400"></i>
                                        </div>
                                    </th>
                                    <th scope="col" class="sortable px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" data-sort="result">
                                        <div class="flex items-center">
                                            Result <i class="fas fa-sort ml-1 text-gray-400"></i>
                                        </div>
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="results-table-body" class="bg-white divide-y divide-gray-200">
                                @{int rowIndex = 0;}
                                @foreach (var item in Model)
                                {
                                    string rowClass = rowIndex % 2 == 0 ? "" : "bg-gray-50";
                                    rowIndex++;
                                    
                                    <tr class="scan-result-row hover:bg-blue-50 transition-colors @rowClass" 
                                        data-id="@item.CardId" 
                                        data-product="@item.CardName" 
                                        data-time="@item.ScanTime.ToString("yyyy-MM-ddTHH:mm:ss")" 
                                        data-device="@item.DeviceInfo" 
                                        data-location="@item.Location" 
                                        data-result="@item.ScanResult">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex items-center">
                                                <div class="flex-shrink-0 h-10 w-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 shadow-sm">
                                                    <i class="fas fa-tag"></i>
                                                </div>
                                                <div class="ml-4">
                                                    <div class="text-sm font-medium text-gray-900 hover:text-primary-600">@item.CardName</div>
                                                    <div class="text-xs text-gray-500">ID: @item.CardId</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm text-gray-900">@item.ScanTime.ToString("yyyy-MM-dd")</div>
                                            <div class="text-xs text-gray-500">@item.ScanTime.ToString("HH:mm:ss")</div>
                                            <div class="text-xs text-gray-400">@((DateTime.Now - item.ScanTime).TotalHours < 24 ? $"{Math.Round((DateTime.Now - item.ScanTime).TotalHours)} hours ago" : $"{(DateTime.Now - item.ScanTime).Days} days ago")</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm text-gray-500">@item.DeviceInfo</div>
                                            @if (item.DeviceInfo.Contains("iPhone"))
                                            {
                                                <div class="text-xs text-blue-500"><i class="fab fa-apple mr-1"></i> iOS Device</div>
                                            }
                                            else if (item.DeviceInfo.Contains("Android"))
                                            {
                                                <div class="text-xs text-green-500"><i class="fab fa-android mr-1"></i> Android Device</div>
                                            }
                                            else
                                            {
                                                <div class="text-xs text-gray-400"><i class="fas fa-mobile-alt mr-1"></i> Other Device</div>
                                            }
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                                <i class="fas fa-map-marker-alt mr-1 text-primary-500"></i>
                                                @item.Location
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            @if (item.ScanResult == "Success")
                                            {
                                                <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                    <i class="fas fa-check-circle mr-1"></i> Success
                                                </span>
                                            }
                                            else if (item.ScanResult == "Failed")
                                            {
                                                <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                    <i class="fas fa-times-circle mr-1"></i> Failed
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                                    <i class="fas fa-exclamation-circle mr-1"></i> @item.ScanResult
                                                </span>
                                            }
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <div class="flex justify-end space-x-2">
                                                <a asp-action="Details" asp-route-id="@item.CardId" class="text-primary-600 hover:text-primary-900 p-1" title="View Card Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <a asp-action="ScanShow" asp-route-id="@item.CardId" class="text-gray-500 hover:text-gray-700 p-1" title="View Scan Details">
                                                    <i class="fas fa-info-circle"></i>
                                                </a>
                                                <button class="text-red-500 hover:text-red-700 p-1 delete-scan" data-id="@item.Id" title="Delete Scan Record">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Card View (hidden by default) -->
                    <div id="card-view" class="hidden p-4">
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            @foreach (var item in Model)
                            {
                                <div class="scan-result-card bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-all overflow-hidden" 
                                     data-id="@item.CardId" 
                                     data-product="@item.CardName" 
                                     data-time="@item.ScanTime.ToString("yyyy-MM-ddTHH:mm:ss")" 
                                     data-device="@item.DeviceInfo" 
                                     data-location="@item.Location" 
                                     data-result="@item.ScanResult">
                                    <div class="p-4 border-b border-gray-100 flex justify-between items-center">
                                        <div class="flex items-center">
                                            <div class="w-10 h-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 mr-3">
                                                <i class="fas fa-tag"></i>
                                            </div>
                                            <div>
                                                <h4 class="font-medium text-gray-900">@item.CardName</h4>
                                                <p class="text-xs text-gray-500">ID: @item.CardId</p>
                                            </div>
                                        </div>
                                        @if (item.ScanResult == "Success")
                                        {
                                            <span class="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                <i class="fas fa-check-circle mr-1"></i> Success
                                            </span>
                                        }
                                        else if (item.ScanResult == "Failed")
                                        {
                                            <span class="px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                <i class="fas fa-times-circle mr-1"></i> Failed
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                                <i class="fas fa-exclamation-circle mr-1"></i> @item.ScanResult
                                            </span>
                                        }
                                    </div>
                                    <div class="p-4 space-y-3">
                                        <div class="flex items-center text-sm">
                                            <i class="fas fa-clock w-5 text-gray-400"></i>
                                            <span class="ml-2">
                                                @item.ScanTime.ToString("yyyy-MM-dd HH:mm:ss")
                                                <span class="text-xs text-gray-500 ml-1">
                                                    (@((DateTime.Now - item.ScanTime).TotalHours < 24 ? $"{Math.Round((DateTime.Now - item.ScanTime).TotalHours)}h ago" : $"{(DateTime.Now - item.ScanTime).Days}d ago"))
                                                </span>
                                            </span>
                                        </div>
                                        <div class="flex items-center text-sm">
                                            <i class="fas fa-mobile-alt w-5 text-gray-400"></i>
                                            <span class="ml-2">@item.DeviceInfo</span>
                                        </div>
                                        <div class="flex items-center text-sm">
                                            <i class="fas fa-map-marker-alt w-5 text-gray-400"></i>
                                            <span class="ml-2">@item.Location</span>
                                        </div>
                                    </div>
                                    <div class="px-4 py-3 bg-gray-50 border-t border-gray-100 flex justify-end space-x-2">
                                        <a asp-action="Details" asp-route-id="@item.CardId" class="px-3 py-1 text-xs bg-primary-50 text-primary-600 rounded hover:bg-primary-100 transition-colors">
                                            <i class="fas fa-eye mr-1"></i> View Card
                                        </a>
                                        <a asp-action="ScanShow" asp-route-id="@item.CardId" class="px-3 py-1 text-xs bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors">
                                            <i class="fas fa-info-circle mr-1"></i> Details
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    
                    <!-- Pagination -->
                    <div class="px-4 py-3 bg-gray-50 border-t border-gray-100 flex items-center justify-between">
                        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p class="text-sm text-gray-700">
                                    Showing <span class="font-medium">1</span> to <span class="font-medium">@(Model.Count() < 10 ? Model.Count() : 10)</span> of <span class="font-medium">@Model.Count()</span> results
                                </p>
                            </div>
                            <div>
                                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                    <a href="#" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                        <span class="sr-only">Previous</span>
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                    <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-primary-50 text-sm font-medium text-primary-600 hover:bg-primary-100">
                                        1
                                    </a>
                                    <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                                        2
                                    </a>
                                    <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                                        3
                                    </a>
                                    <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                                        ...
                                    </span>
                                    <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                                        10
                                    </a>
                                    <a href="#" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                        <span class="sr-only">Next</span>
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Tab Content - Issue Reports -->
        <div id="content-issues" class="tab-content hidden">
            <!-- Issue Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-white rounded-xl shadow-md p-4 border-l-4 border-orange-500 transform transition-all hover:shadow-lg hover:scale-[1.01]">
                    <div class="flex items-center">
                        <div class="w-12 h-12 rounded-full bg-orange-50 flex items-center justify-center text-orange-500 mr-4 shadow-inner">
                            <i class="fas fa-exclamation-circle text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm font-medium uppercase tracking-wider">Total Issues</p>
                            <p class="text-2xl font-bold" id="total-issues-counter">
                                <span class="animate-counter" data-count="0">0</span>
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-xl shadow-md p-4 border-l-4 border-red-500 transform transition-all hover:shadow-lg hover:scale-[1.01]">
                    <div class="flex items-center">
                        <div class="w-12 h-12 rounded-full bg-red-50 flex items-center justify-center text-red-500 mr-4 shadow-inner">
                            <i class="fas fa-fire text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm font-medium uppercase tracking-wider">Open Issues</p>
                            <p class="text-2xl font-bold" id="open-issues-counter">
                                <span class="animate-counter" data-count="0">0</span>
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-xl shadow-md p-4 border-l-4 border-blue-500 transform transition-all hover:shadow-lg hover:scale-[1.01]">
                    <div class="flex items-center">
                        <div class="w-12 h-12 rounded-full bg-blue-50 flex items-center justify-center text-blue-500 mr-4 shadow-inner">
                            <i class="fas fa-tools text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm font-medium uppercase tracking-wider">In Progress</p>
                            <p class="text-2xl font-bold" id="inprogress-issues-counter">
                                <span class="animate-counter" data-count="0">0</span>
                            </p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-xl shadow-md p-4 border-l-4 border-green-500 transform transition-all hover:shadow-lg hover:scale-[1.01]">
                    <div class="flex items-center">
                        <div class="w-12 h-12 rounded-full bg-green-50 flex items-center justify-center text-green-500 mr-4 shadow-inner">
                            <i class="fas fa-check-circle text-xl"></i>
                        </div>
                        <div>
                            <p class="text-gray-500 text-sm font-medium uppercase tracking-wider">Resolved</p>
                            <p class="text-2xl font-bold" id="resolved-issues-counter">
                                <span class="animate-counter" data-count="0">0</span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Issue Search and Filters -->
            <div class="bg-white rounded-xl shadow-md border border-gray-100 mb-6 overflow-hidden">
                <div class="p-4 border-b border-gray-100 flex justify-between items-center bg-gray-50">
                    <h2 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-filter text-primary-500 mr-2"></i> Filter Issues
                    </h2>
                    <div class="flex items-center space-x-2">
                        <button id="issue-filter-btn" class="px-3 py-1.5 text-sm rounded-lg border border-gray-200 flex items-center hover:bg-gray-50 transition-colors">
                            <i class="fas fa-sliders-h mr-2"></i> Filters
                        </button>
                    </div>
                </div>
                
                <div class="p-4">
                    <div class="relative">
                        <input type="text" id="issue-search" placeholder="Search issues by type, priority, reporter, etc..." 
                               class="w-full pl-12 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-all" />
                        <div class="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                            <i class="fas fa-search"></i>
                        </div>
                        <button id="clear-issue-search" class="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 hidden">
                            <i class="fas fa-times-circle"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Issue Filters (hidden by default) -->
                <div id="issue-filter-panel" class="hidden border-t border-gray-100 p-4 bg-gray-50">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                            <div class="relative">
                                <select id="status-filter" class="w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg appearance-none text-sm">
                                    <option value="">All Statuses</option>
                                    <option value="Open">Open</option>
                                    <option value="In Progress">In Progress</option>
                                    <option value="Resolved">Resolved</option>
                                    <option value="Closed">Closed</option>
                                </select>
                                <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-tag"></i>
                                </div>
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none">
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
                            <div class="relative">
                                <select id="priority-filter" class="w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg appearance-none text-sm">
                                    <option value="">All Priorities</option>
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                    <option value="Critical">Critical</option>
                                </select>
                                <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-flag"></i>
                                </div>
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none">
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Issue Type</label>
                            <div class="relative">
                                <select id="issue-type-filter" class="w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg appearance-none text-sm">
                                    <option value="">All Types</option>
                                    <option value="Malfunction">Device Malfunction</option>
                                    <option value="Maintenance">Maintenance Required</option>
                                    <option value="Damage">Physical Damage</option>
                                    <option value="Missing">Missing Parts</option>
                                    <option value="Performance">Performance Issues</option>
                                    <option value="Safety">Safety Concern</option>
                                    <option value="Other">Other</option>
                                </select>
                                <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-exclamation-triangle"></i>
                                </div>
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none">
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="relative">
                                <input type="date" id="issue-date-from" class="w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg text-sm" placeholder="From">
                                <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-calendar-alt"></i>
                                </div>
                            </div>
                            <div class="relative">
                                <input type="date" id="issue-date-to" class="w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg text-sm" placeholder="To">
                                <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-calendar-alt"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex justify-end mt-4 space-x-3">
                        <button id="reset-issue-filters" class="px-4 py-2 text-sm border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors">
                            Reset Filters
                        </button>
                        <button id="apply-issue-filters" class="px-4 py-2 text-sm bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
                            Apply Filters
                        </button>
                    </div>
                </div>
                
                <!-- Active Issue Filters (shown when filters are applied) -->
                <div id="active-issue-filters" class="hidden px-4 py-2 border-t border-gray-100 bg-blue-50">
                    <div class="flex flex-wrap items-center gap-2">
                        <span class="text-xs font-medium text-blue-700">Active Filters:</span>
                        <div id="issue-filter-tags" class="flex flex-wrap gap-2">
                            <!-- Filter tags will be inserted here by JavaScript -->
                        </div>
                        <button id="clear-all-issue-filters" class="ml-auto text-xs text-blue-600 hover:text-blue-800">
                            Clear All
                        </button>
                    </div>
                </div>
            </div>

            <!-- Status Tabs -->
            <div class="flex overflow-x-auto scrollbar-none pb-2 mb-4">
                <button data-status-filter="all" class="status-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-primary-600 text-white text-sm">
                    All Issues
                </button>
                <button data-status-filter="Open" class="status-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 text-sm">
                    <i class="fas fa-exclamation-circle mr-1 text-yellow-500"></i> Open
                </button>
                <button data-status-filter="In Progress" class="status-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 text-sm">
                    <i class="fas fa-tools mr-1 text-blue-500"></i> In Progress
                </button>
                <button data-status-filter="Resolved" class="status-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 text-sm">
                    <i class="fas fa-check-circle mr-1 text-green-500"></i> Resolved
                </button>
                <button data-status-filter="Closed" class="status-filter-btn flex-shrink-0 px-3 py-1.5 mr-2 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 text-sm">
                    <i class="fas fa-archive mr-1 text-gray-500"></i> Closed
                </button>
            </div>

            <!-- Issues List -->
            <div id="issues-container" class="bg-white rounded-xl shadow-md overflow-hidden mb-6">
                <div class="p-3 border-b border-gray-100 bg-gray-50 flex justify-between items-center">
                    <div class="text-sm text-gray-500">
                        <span id="issues-count">Loading issues...</span>
                    </div>
                    <div class="flex space-x-2">
                        <div class="relative">
                            <select id="issues-sort" class="text-sm border border-gray-200 rounded-lg py-1.5 pl-3 pr-8 appearance-none bg-white">
                                <option value="date-desc">Newest First</option>
                                <option value="date-asc">Oldest First</option>
                                <option value="priority-desc">Highest Priority</option>
                                <option value="priority-asc">Lowest Priority</option>
                            </select>
                            <div class="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none text-gray-400">
                                <i class="fas fa-chevron-down text-xs"></i>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Issues List Content -->
                <div id="issues-content" class="p-4">
                    <div class="text-center py-8">
                        <div class="w-16 h-16 mx-auto rounded-full bg-primary-50 flex items-center justify-center">
                            <i class="fas fa-spinner fa-spin text-primary-500 text-xl"></i>
                        </div>
                        <p class="mt-4 text-gray-500">Loading issues...</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tab Content - Analytics -->
        <div id="content-analytics" class="tab-content hidden">
            <!-- Analytics Overview -->
            <div class="bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden mb-6">
                <div class="p-4 border-b border-gray-100 flex justify-between items-center">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-chart-bar text-primary-500 mr-2"></i> Scan Analytics
                    </h3>
                    <div class="flex space-x-2">
                        <button class="period-btn px-3 py-1 text-xs bg-primary-100 text-primary-600 rounded-full" data-period="week">Week</button>
                        <button class="period-btn px-3 py-1 text-xs bg-gray-100 text-gray-600 rounded-full" data-period="month">Month</button>
                        <button class="period-btn px-3 py-1 text-xs bg-gray-100 text-gray-600 rounded-full" data-period="year">Year</button>
                    </div>
                </div>
                <div class="p-4">
                    <div class="aspect-[1.4142] bg-gray-50 rounded-lg border border-gray-100 flex items-center justify-center">
                        <!-- This would be a chart in the real implementation -->
                        <div class="text-center">
                            <p class="text-gray-500 mb-2">Scan Activity (Last 7 Days)</p>
                            <div class="w-full max-w-3xl mx-auto h-40 flex items-end justify-around px-4">
                                @{
                                    Random rand = new Random(DateTime.Now.Day);
                                    for (int i = 6; i >= 0; i--)
                                    {
                                        var day = DateTime.Now.AddDays(-i);
                                        var height = rand.Next(20, 100);
                                        var isToday = i == 0;
                                        
                                        <div class="flex flex-col items-center">
                                            <div class="w-12 bg-@(isToday ? "primary" : "blue")-@(isToday ? "500" : "300") rounded-t transition-all hover:bg-@(isToday ? "primary" : "blue")-@(isToday ? "600" : "400")" style="height: @(height)%"></div>
                                            <div class="text-xs mt-2 text-gray-600">@day.ToString("ddd")</div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Issues Analytics -->
            <div class="bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden mb-6">
                <div class="p-4 border-b border-gray-100 flex justify-between items-center">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-exclamation-triangle text-primary-500 mr-2"></i> Issue Analytics
                    </h3>
                </div>
                <div class="p-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Issues by Status Chart -->
                        <div class="bg-gray-50 rounded-lg border border-gray-100 p-4">
                            <h4 class="text-sm font-medium text-gray-700 mb-3">Issues by Status</h4>
                            <div class="aspect-[1.4142] flex items-center justify-center">
                                <div class="w-full max-w-xs">
                                    <!-- Placeholder for pie chart -->
                                    <div class="w-32 h-32 mx-auto relative">
                                        <div class="absolute inset-0 border-8 border-r-red-500 border-t-blue-500 border-b-green-500 border-l-yellow-500 rounded-full"></div>
                                        <div class="absolute inset-8 bg-white rounded-full"></div>
                                    </div>
                                    <div class="flex justify-center space-x-4 mt-4">
                                        <div class="flex items-center">
                                            <div class="w-3 h-3 bg-yellow-500 rounded-sm mr-1"></div>
                                            <span class="text-xs">Open</span>
                                        </div>
                                        <div class="flex items-center">
                                            <div class="w-3 h-3 bg-blue-500 rounded-sm mr-1"></div>
                                            <span class="text-xs">In Progress</span>
                                        </div>
                                        <div class="flex items-center">
                                            <div class="w-3 h-3 bg-green-500 rounded-sm mr-1"></div>
                                            <span class="text-xs">Resolved</span>
                                        </div>
                                        <div class="flex items-center">
                                            <div class="w-3 h-3 bg-red-500 rounded-sm mr-1"></div>
                                            <span class="text-xs">Closed</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Issues by Priority Chart -->
                        <div class="bg-gray-50 rounded-lg border border-gray-100 p-4">
                            <h4 class="text-sm font-medium text-gray-700 mb-3">Issues by Priority</h4>
                            <div class="w-full h-56 flex items-end justify-around px-4">
                                @foreach (var priority in new[] { "Low", "Medium", "High", "Critical" })
                                {
                                    var height = rand.Next(20, 100);
                                    var color = priority == "Low" ? "green" : 
                                              priority == "Medium" ? "blue" :
                                              priority == "High" ? "orange" : "red";
                                    
                                    <div class="flex flex-col items-center">
                                        <div class="w-16 bg-@color-500 rounded-t transition-all hover:bg-@color-600" style="height: @(height)%"></div>
                                        <div class="text-xs mt-2 text-gray-600">@priority</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Top Products with Issues -->
            <div class="bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden mb-6">
                <div class="p-4 border-b border-gray-100">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-clipboard-list text-primary-500 mr-2"></i> Top Products with Issues
                    </h3>
                </div>
                <div class="p-4">
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Product
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Total Issues
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Open Issues
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Most Common Issue
                                    </th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Last Reported
                                    </th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200" id="products-issue-table">
                                <!-- This will be populated via JavaScript -->
                                <tr>
                                    <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">
                                        <i class="fas fa-spinner fa-spin mr-2"></i> Loading data...
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-white border-t border-gray-200 py-4 mt-auto">
        <div class="container mx-auto px-4">
            <div class="flex flex-col md:flex-row justify-between items-center">
                <div class="text-center md:text-left mb-4 md:mb-0">
                    <span class="text-gray-500">Card Tag Manager</span>
                    <span class="mx-2 text-gray-300">|</span>
                    <span class="text-gray-500">Scan Results</span>
                </div>
                <div class="flex space-x-4">
                    <button id="help-btn" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-question-circle mr-1"></i> Help
                    </button>
                    <button id="settings-btn" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-cog mr-1"></i> Settings
                    </button>
                </div>
            </div>
        </div>
    </footer>

    <!-- Delete Confirmation Modal -->
    <div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            <div class="p-5 border-b border-gray-200">
                <h3 class="text-lg font-bold text-gray-800 flex items-center">
                    <i class="fas fa-exclamation-triangle text-red-500 mr-3"></i> Confirm Deletion
                </h3>
            </div>
            <div class="p-5">
                <p class="text-gray-600 mb-4">Are you sure you want to delete this item? This action cannot be undone.</p>
                <div class="bg-gray-50 p-3 rounded-lg mb-4">
                    <div id="delete-item-details" class="text-sm">
                        <!-- Details will be inserted here by JavaScript -->
                    </div>
                </div>
            </div>
            <div class="px-5 py-3 bg-gray-50 border-t border-gray-200 flex justify-end space-x-3">
                <button id="cancel-delete" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none">
                    Cancel
                </button>
                <button id="confirm-delete" class="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none">
                    Delete
                </button>
            </div>
        </div>
    </div>

    <!-- Update Issue Status Modal -->
    <div id="update-status-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            <div class="p-5 border-b border-gray-200">
                <h3 class="text-lg font-bold text-gray-800 flex items-center">
                    <i class="fas fa-edit text-primary-500 mr-3"></i> Update Issue Status
                </h3>
            </div>
            <div class="p-5">
                <div class="mb-4">
                    <h4 class="text-gray-800 font-medium mb-2">Issue Details</h4>
                    <div id="issue-details" class="bg-gray-50 p-3 rounded-lg text-sm">
                        <!-- Details will be inserted here by JavaScript -->
                    </div>
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-1">New Status</label>
                    <select id="new-status" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
                        <option value="Open">Open</option>
                        <option value="In Progress">In Progress</option>
                        <option value="Resolved">Resolved</option>
                        <option value="Closed">Closed</option>
                    </select>
                </div>
                
                <div id="resolution-container" class="mb-4 hidden">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Resolution Notes</label>
                    <textarea id="resolution-notes" rows="3" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500" 
                              placeholder="Describe how this issue was resolved..."></textarea>
                </div>
            </div>
            <div class="px-5 py-3 bg-gray-50 border-t border-gray-200 flex justify-end space-x-3">
                <button id="cancel-status-update" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none">
                    Cancel
                </button>
                <button id="confirm-status-update" class="px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md hover:bg-primary-700 focus:outline-none">
                    Update Status
                </button>
            </div>
        </div>
    </div>

    <!-- Help Modal -->
    <div id="help-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 overflow-hidden">
            <div class="p-5 border-b border-gray-200 flex justify-between items-center">
                <h3 class="text-lg font-bold text-gray-800 flex items-center">
                    <i class="fas fa-question-circle text-primary-500 mr-3"></i> Help Center
                </h3>
                <button id="close-help-modal" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-5 max-h-96 overflow-y-auto">
                <div class="space-y-4">
                    <div>
                        <h4 class="text-md font-medium text-gray-800 mb-2">About This Page</h4>
                        <p class="text-gray-600">This page allows you to view scan results and manage issues reported for your products. You can track when and where your products are scanned, and handle any issues that have been reported by users.</p>
                    </div>
                    
                    <div>
                        <h4 class="text-md font-medium text-gray-800 mb-2">Using Tabs</h4>
                        <p class="text-gray-600 mb-2">The page is organized into three main tabs:</p>
                        <ul class="list-disc list-inside text-gray-600 space-y-1">
                            <li><strong>Scan Results:</strong> View all scanned product information</li>
                            <li><strong>Issue Reports:</strong> Manage reported product issues</li>
                            <li><strong>Analytics:</strong> View scan and issue statistics</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h4 class="text-md font-medium text-gray-800 mb-2">Managing Issues</h4>
                        <p class="text-gray-600 mb-2">To manage issues, go to the Issue Reports tab:</p>
                        <ul class="list-disc list-inside text-gray-600 space-y-1">
                            <li>Filter issues by status, priority, type, or date</li>
                            <li>Update issue status by clicking on an issue card</li>
                            <li>Provide resolution notes when resolving or closing issues</li>
                        </ul>
                    </div>
                    
                    <div>
                        <h4 class="text-md font-medium text-gray-800 mb-2">Data Export Options</h4>
                        <p class="text-gray-600">You can export data from both Scan Results and Issue Reports in various formats (CSV, PDF, Excel) by clicking the export button in the top-right corner.</p>
                    </div>
                </div>
            </div>
            <div class="px-5 py-3 bg-gray-50 border-t border-gray-200 flex justify-end">
                <button id="close-help" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none">
                    Close
                </button>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast-notification" class="fixed bottom-4 right-4 bg-white rounded-lg shadow-lg border border-gray-100 p-4 max-w-sm transform translate-y-20 opacity-0 transition-all duration-300 z-50 hidden">
        <div class="flex items-center">
            <div id="toast-icon" class="flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-green-100">
                <i id="toast-icon-symbol" class="fas fa-check text-green-500"></i>
            </div>
            <div class="ml-3 flex-1">
                <p id="toast-message" class="text-sm font-medium text-gray-900">Information copied to clipboard</p>
                <p id="toast-description" class="text-sm text-gray-500">You can now paste it anywhere you need</p>
            </div>
            <button id="close-toast" class="ml-auto text-gray-400 hover:text-gray-500">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        try {
            // Initialize animated counters for scan results tab
            initAnimatedCounters();
            
            // Tab switching functionality
            initTabSwitching();
            
            // Scan results tab functionality
            initScanResultsTab();
            
            // Issue reports tab functionality
            initIssueReportsTab();
            
            // Analytics tab functionality
            initAnalyticsTab();
            
            // Shared functionality
            initSharedFunctionality();
            
            // Load real scan data from API
            loadScanResults();
        } catch (e) {
            console.error("Error in initialization:", e);
        }
    });

        function loadScanResults() {
        const tableBody = document.getElementById('results-table-body');
        const cardView = document.getElementById('card-view');
        
        if (!tableBody || !cardView) return;
        
        // Show loading state
        tableBody.innerHTML = `
            <tr>
                <td colspan="6" class="px-6 py-4 text-center">
                    <i class="fas fa-spinner fa-spin text-primary-500 mr-2"></i> Loading scan results...
                </td>
            </tr>
        `;
        
        cardView.innerHTML = `
            <div class="text-center py-6">
                <i class="fas fa-spinner fa-spin text-primary-500 mr-2"></i> Loading scan results...
            </div>
        `;
        
        // Fetch from API
        fetch('/api/Card/GetScanResults')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(scanResults => {
                // Update counters
                document.getElementById('total-scans-counter').querySelector('.animate-counter').setAttribute('data-count', scanResults.length);
                
                // Today's scans counter
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const todayScans = scanResults.filter(s => new Date(s.scanTime) >= today).length;
                document.getElementById('today-scans-counter').querySelector('.animate-counter').setAttribute('data-count', todayScans);
                
                // Locations counter
                const uniqueLocations = new Set(scanResults.map(s => s.location)).size;
                document.getElementById('locations-counter').querySelector('.animate-counter').setAttribute('data-count', uniqueLocations);
                
                // Success rate counter
                const successRate = scanResults.length > 0 ? 
                    Math.round((scanResults.filter(s => s.scanResult === "Success").length / scanResults.length) * 100) : 0;
                document.getElementById('success-rate-counter').querySelector('.animate-counter').setAttribute('data-count', successRate);
                
                // Refresh animated counters
                initAnimatedCounters();
                
                if (scanResults && scanResults.length > 0) {
                    // Populate table view
                    tableBody.innerHTML = '';
                    
                    // Build table rows
                    let rowIndex = 0;
                    scanResults.forEach(item => {
                        const rowClass = rowIndex % 2 == 0 ? "" : "bg-gray-50";
                        rowIndex++;
                        
                        const row = document.createElement('tr');
                        row.className = `scan-result-row hover:bg-blue-50 transition-colors ${rowClass}`;
                        row.setAttribute('data-id', item.cardId);
                        row.setAttribute('data-product', item.cardName);
                        row.setAttribute('data-time', new Date(item.scanTime).toISOString());
                        row.setAttribute('data-device', item.deviceInfo);
                        row.setAttribute('data-location', item.location);
                        row.setAttribute('data-result', item.scanResult);
                        
                        // Build row HTML
                        row.innerHTML = `
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-10 w-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 shadow-sm">
                                        <i class="fas fa-tag"></i>
                                    </div>
                                    <div class="ml-4">
                                        <div class="text-sm font-medium text-gray-900 hover:text-primary-600">${item.cardName}</div>
                                        <div class="text-xs text-gray-500">ID: ${item.cardId}</div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-900">${new Date(item.scanTime).toLocaleDateString()}</div>
                                <div class="text-xs text-gray-500">${new Date(item.scanTime).toLocaleTimeString()}</div>
                                <div class="text-xs text-gray-400">${formatTimeAgo(new Date(item.scanTime))}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-500">${item.deviceInfo}</div>
                                ${item.deviceInfo.includes("iPhone") ?
                                    `<div class="text-xs text-blue-500"><i class="fab fa-apple mr-1"></i> iOS Device</div>` :
                                    item.deviceInfo.includes("Android") ?
                                    `<div class="text-xs text-green-500"><i class="fab fa-android mr-1"></i> Android Device</div>` :
                                    `<div class="text-xs text-gray-400"><i class="fas fa-mobile-alt mr-1"></i> Other Device</div>`
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                    <i class="fas fa-map-marker-alt mr-1 text-primary-500"></i>
                                    ${item.location}
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                ${item.scanResult === "Success" ?
                                    `<span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        <i class="fas fa-check-circle mr-1"></i> Success
                                    </span>` :
                                    item.scanResult === "Failed" ?
                                    `<span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                        <i class="fas fa-times-circle mr-1"></i> Failed
                                    </span>` :
                                    `<span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                        <i class="fas fa-exclamation-circle mr-1"></i> ${item.scanResult}
                                    </span>`
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <div class="flex justify-end space-x-2">
                                    <a href="/Card/Details/${item.cardId}" class="text-primary-600 hover:text-primary-900 p-1" title="View Card Details">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="/Card/ScanShow/${item.cardId}" class="text-gray-500 hover:text-gray-700 p-1" title="View Scan Details">
                                        <i class="fas fa-info-circle"></i>
                                    </a>
                                    <button class="text-red-500 hover:text-red-700 p-1 delete-scan" data-id="${item.id}" title="Delete Scan Record">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </td>
                        `;
                        
                        tableBody.appendChild(row);
                    });
                    
                    // Populate card view
                    cardView.innerHTML = '';
                    const cardGrid = document.createElement('div');
                    cardGrid.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4';
                    
                    scanResults.forEach(item => {
                        const card = document.createElement('div');
                        card.className = 'scan-result-card bg-white rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-all overflow-hidden';
                        card.setAttribute('data-id', item.cardId);
                        card.setAttribute('data-product', item.cardName);
                        card.setAttribute('data-time', new Date(item.scanTime).toISOString());
                        card.setAttribute('data-device', item.deviceInfo);
                        card.setAttribute('data-location', item.location);
                        card.setAttribute('data-result', item.scanResult);
                        
                        // Build card HTML
                        card.innerHTML = `
                            <div class="p-4 border-b border-gray-100 flex justify-between items-center">
                                <div class="flex items-center">
                                    <div class="w-10 h-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 mr-3">
                                        <i class="fas fa-tag"></i>
                                    </div>
                                    <div>
                                        <h4 class="font-medium text-gray-900">${item.cardName}</h4>
                                        <p class="text-xs text-gray-500">ID: ${item.cardId}</p>
                                    </div>
                                </div>
                                ${item.scanResult === "Success" ?
                                    `<span class="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        <i class="fas fa-check-circle mr-1"></i> Success
                                    </span>` :
                                    item.scanResult === "Failed" ?
                                    `<span class="px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                        <i class="fas fa-times-circle mr-1"></i> Failed
                                    </span>` :
                                    `<span class="px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                        <i class="fas fa-exclamation-circle mr-1"></i> ${item.scanResult}
                                    </span>`
                                }
                            </div>
                            <div class="p-4 space-y-3">
                                <div class="flex items-center text-sm">
                                    <i class="fas fa-clock w-5 text-gray-400"></i>
                                    <span class="ml-2">
                                        ${new Date(item.scanTime).toLocaleString()}
                                        <span class="text-xs text-gray-500 ml-1">
                                            (${formatTimeAgo(new Date(item.scanTime))})
                                        </span>
                                    </span>
                                </div>
                                <div class="flex items-center text-sm">
                                    <i class="fas fa-mobile-alt w-5 text-gray-400"></i>
                                    <span class="ml-2">${item.deviceInfo}</span>
                                </div>
                                <div class="flex items-center text-sm">
                                    <i class="fas fa-map-marker-alt w-5 text-gray-400"></i>
                                    <span class="ml-2">${item.location}</span>
                                </div>
                            </div>
                            <div class="px-4 py-3 bg-gray-50 border-t border-gray-100 flex justify-end space-x-2">
                                <a href="/Card/Details/${item.cardId}" class="px-3 py-1 text-xs bg-primary-50 text-primary-600 rounded hover:bg-primary-100 transition-colors">
                                    <i class="fas fa-eye mr-1"></i> View Card
                                </a>
                                <a href="/Card/ScanShow/${item.cardId}" class="px-3 py-1 text-xs bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors">
                                    <i class="fas fa-info-circle mr-1"></i> Details
                                </a>
                            </div>
                        `;
                        
                        cardGrid.appendChild(card);
                    });
                    
                    cardView.appendChild(cardGrid);
                    
                    // Update result count
                    document.getElementById('result-count').innerHTML = `Showing <span class="font-medium text-gray-700">${scanResults.length}</span> results`;
                    
                    // Initialize delete functionality
                    initializeDeleteFunctionality();
                } else {
                    // No scan results
                    showNoScansMessage();
                }
            })
            .catch(error => {
                console.error('Error loading scan results:', error);
                
                // Show error message
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-6 py-4 text-center text-red-500">
                            <div class="py-6">
                                <div class="w-16 h-16 mx-auto rounded-full bg-red-100 flex items-center justify-center text-red-500 mb-3">
                                    <i class="fas fa-exclamation-triangle text-2xl"></i>
                                </div>
                                <p class="font-medium">Failed to load scan results</p>
                                <p class="text-sm mt-2">${error.message}</p>
                                <button id="retry-button" class="mt-4 px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700">Retry</button>
                            </div>
                        </td>
                    </tr>
                `;
                
                // Add retry button handler
                const retryButton = document.getElementById('retry-button');
                if (retryButton) {
                    retryButton.addEventListener('click', loadScanResults);
                }
            });
    }
    
    // Add or update the delete scan functionality:
    function initializeDeleteFunctionality() {
        const deleteButtons = document.querySelectorAll('.delete-scan');
        const deleteModal = document.getElementById('delete-modal');
        const cancelDeleteBtn = document.getElementById('cancel-delete');
        const confirmDeleteBtn = document.getElementById('confirm-delete');
        const deleteItemDetails = document.getElementById('delete-item-details');
        
        if (deleteButtons && deleteModal) {
            deleteButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const id = this.getAttribute('data-id');
                    const row = this.closest('tr.scan-result-row');
                    
                    // Populate delete modal with details
                    deleteItemDetails.innerHTML = `
                        <p><strong>Product:</strong> ${row.getAttribute('data-product')}</p>
                        <p><strong>Scan Time:</strong> ${new Date(row.getAttribute('data-time')).toLocaleString()}</p>
                        <p><strong>Location:</strong> ${row.getAttribute('data-location')}</p>
                        <p><strong>Result:</strong> ${row.getAttribute('data-result')}</p>
                    `;
                    
                    // Store the ID for deletion
                    confirmDeleteBtn.setAttribute('data-scan-id', id);
                    
                    // Show the modal
                    deleteModal.classList.remove('hidden');
                });
            });
            
            if (confirmDeleteBtn) {
                confirmDeleteBtn.addEventListener('click', function() {
                    const id = this.getAttribute('data-scan-id');
                    
                    // Get the CSRF token
                    const token = document.querySelector('meta[name="RequestVerificationToken"]').content;
                    
                    // Send delete request
                    fetch('/Card/DeleteScanResult', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: `id=${id}`
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Reload data after successful deletion
                            loadScanResults();
                            
                            // Show toast notification
                            showToast('Record deleted', 'Scan record has been permanently deleted', 'success');
                            
                            // Hide the modal
                            deleteModal.classList.add('hidden');
                        } else {
                            showToast('Error', data.error || 'Failed to delete record', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error', 'Failed to delete record. Please try again.', 'error');
                    });
                });
            }
        }
    }

    // Helper function to format time ago for better UI
    function formatTimeAgo(date) {
        const now = new Date();
        const diffMs = now - date;
        const diffSec = Math.floor(diffMs / 1000);
        const diffMin = Math.floor(diffSec / 60);
        const diffHour = Math.floor(diffMin / 60);
        const diffDay = Math.floor(diffHour / 24);

        if (diffSec < 60) {
            return `just now`;
        } else if (diffMin < 60) {
            return `${diffMin}m ago`;
        } else if (diffHour < 24) {
            return `${diffHour}h ago`;
        } else if (diffDay < 30) {
            return `${diffDay}d ago`;
        } else {
            return date.toLocaleDateString();
        }
    }

    // Display empty state
    function showNoScansMessage() {
        const tableBody = document.getElementById('results-table-body');
        const cardView = document.getElementById('card-view');
        
        if (tableBody) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="6" class="px-6 py-8 text-center">
                        <div class="mx-auto w-24 h-24 rounded-full bg-primary-50 text-primary-500 flex items-center justify-center mb-4">
                            <i class="fas fa-qrcode text-4xl"></i>
                        </div>
                        <h3 class="text-xl font-semibold text-gray-800 mb-2">No scan results found</h3>
                        <p class="text-gray-500 mb-6 max-w-md mx-auto">Scan one of your product tags to see the results here. Use a QR code scanner app on your mobile device.</p>
                    </td>
                </tr>
            `;
        }
        
        if (cardView) {
            cardView.innerHTML = `
                <div class="bg-white rounded-xl shadow-md p-8 text-center fade-in">
                    <div class="mx-auto w-24 h-24 rounded-full bg-primary-50 text-primary-500 flex items-center justify-center mb-4">
                        <i class="fas fa-qrcode text-4xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-2">No scan results found</h3>
                    <p class="text-gray-500 mb-6 max-w-md mx-auto">Scan one of your product tags to see the results here. Use a QR code scanner app on your mobile device.</p>
                    <div class="flex gap-3 justify-center flex-wrap">
                        <a href="/Card/Index" class="btn-primary inline-flex shadow-md hover:shadow-lg">
                            <i class="fas fa-layer-group mr-2"></i> View Products
                        </a>
                        <a href="/Card/Create" class="btn-secondary inline-flex shadow-md hover:shadow-lg">
                            <i class="fas fa-plus-circle mr-2"></i> Add New Product
                        </a>
                    </div>
                </div>
            `;
        }
    }
    
    // Initialize animated counters
    function initAnimatedCounters() {
        const counters = document.querySelectorAll('.animate-counter');
        counters.forEach(counter => {
            const target = parseInt(counter.getAttribute('data-count'));
            const duration = 1500; // ms
            const steps = 30;
            const stepValue = target / steps;
            let currentValue = 0;
            const interval = duration / steps;
            
            const timer = setInterval(function() {
                currentValue += stepValue;
                if (currentValue >= target) {
                    counter.textContent = target;
                    clearInterval(timer);
                } else {
                    counter.textContent = Math.floor(currentValue);
                }
            }, interval);
        });
    }
    
    // Tab switching functionality
    function initTabSwitching() {
        const tabButtons = document.querySelectorAll('.tab-button');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                tabButtons.forEach(btn => {
                    btn.classList.remove('border-b-2', 'border-primary-500', 'text-primary-600');
                    btn.classList.add('text-gray-500', 'hover:text-gray-700');
                });
                
                // Add active class to clicked button
                this.classList.add('border-b-2', 'border-primary-500', 'text-primary-600');
                this.classList.remove('text-gray-500', 'hover:text-gray-700');
                
                // Hide all tab contents
                tabContents.forEach(content => {
                    content.classList.add('hidden');
                });
                
                // Show corresponding tab content
                const tabId = this.id.replace('tab-', 'content-');
                document.getElementById(tabId).classList.remove('hidden');
                
                // Load data for the active tab if needed
                if (tabId === 'content-issues') {
                    loadIssueData();
                } else if (tabId === 'content-analytics') {
                    loadAnalyticsData();
                }
            });
        });
    }
    
    // Initialize scan results tab functionality
    function initScanResultsTab() {
        // Search functionality
        const searchInput = document.getElementById('scan-search');
        const clearSearch = document.getElementById('clear-search');
        
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase().trim();
                filterResults(searchTerm);
                
                if (searchTerm) {
                    clearSearch.classList.remove('hidden');
                } else {
                    clearSearch.classList.add('hidden');
                }
            });
        }
        
        if (clearSearch) {
            clearSearch.addEventListener('click', function() {
                searchInput.value = '';
                searchInput.focus();
                clearSearch.classList.add('hidden');
                filterResults('');
            });
        }
        
        // Advanced filter panel toggle
        const advancedFilterBtn = document.getElementById('advanced-filter-btn');
        const advancedFilterPanel = document.getElementById('advanced-filter-panel');
        
        if (advancedFilterBtn && advancedFilterPanel) {
            advancedFilterBtn.addEventListener('click', function() {
                advancedFilterPanel.classList.toggle('hidden');
            });
        }
        
        // Date filter button
        const dateFilterBtn = document.getElementById('date-filter-btn');
        if (dateFilterBtn) {
            dateFilterBtn.addEventListener('click', function() {
                advancedFilterPanel.classList.remove('hidden');
                document.getElementById('date-from').focus();
            });
        }
        
        // Reset filters button
        const resetFiltersBtn = document.getElementById('reset-filters');
        if (resetFiltersBtn) {
            resetFiltersBtn.addEventListener('click', function() {
                document.getElementById('date-from').value = '';
                document.getElementById('date-to').value = '';
                document.getElementById('result-filter').value = '';
                document.getElementById('location-filter').value = '';
                
                // Reset all filter tags
                document.getElementById('active-filters').classList.add('hidden');
                document.getElementById('filter-tags').innerHTML = '';
                
                // Reset all results visibility
                resetFilters();
            });
        }
        
        // Apply filters button
        const applyFiltersBtn = document.getElementById('apply-filters');
        if (applyFiltersBtn) {
            applyFiltersBtn.addEventListener('click', function() {
                const dateFrom = document.getElementById('date-from').value;
                const dateTo = document.getElementById('date-to').value;
                const resultFilter = document.getElementById('result-filter').value;
                const locationFilter = document.getElementById('location-filter').value;
                
                applyAdvancedFilters(dateFrom, dateTo, resultFilter, locationFilter);
            });
        }
        
        // Time filter buttons
        document.querySelectorAll('.time-filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                // Update button styles
                document.querySelectorAll('.time-filter-btn').forEach(b => {
                    b.classList.remove('bg-primary-600', 'text-white');
                    b.classList.add('bg-gray-200', 'text-gray-700');
                });
                
                this.classList.remove('bg-gray-200', 'text-gray-700');
                this.classList.add('bg-primary-600', 'text-white');
                
                // Apply time filter
                const filter = this.getAttribute('data-time-filter');
                applyTimeFilter(filter);
            });
        });
        
        // View toggle (Table/Cards)
        const viewTableBtn = document.getElementById('view-table');
        const viewCardsBtn = document.getElementById('view-cards');
        const tableView = document.getElementById('table-view');
        const cardView = document.getElementById('card-view');
        
        if (viewTableBtn && viewCardsBtn && tableView && cardView) {
            viewTableBtn.addEventListener('click', function() {
                // Update button styles
                viewTableBtn.classList.remove('bg-gray-50', 'text-gray-500');
                viewTableBtn.classList.add('bg-white', 'text-primary-600');
                viewCardsBtn.classList.remove('bg-white', 'text-primary-600');
                viewCardsBtn.classList.add('bg-gray-50', 'text-gray-500');
                
                // Show table view, hide card view
                tableView.classList.remove('hidden');
                cardView.classList.add('hidden');
                
                // Show toast notification
                showToast('Table view activated', 'Displaying results in table format', 'info');
            });
            
            viewCardsBtn.addEventListener('click', function() {
                // Update button styles
                viewCardsBtn.classList.remove('bg-gray-50', 'text-gray-500');
                viewCardsBtn.classList.add('bg-white', 'text-primary-600');
                viewTableBtn.classList.remove('bg-white', 'text-primary-600');
                viewTableBtn.classList.add('bg-gray-50', 'text-gray-500');
                
                // Show card view, hide table view
                cardView.classList.remove('hidden');
                tableView.classList.add('hidden');
                
                // Show toast notification
                showToast('Card view activated', 'Displaying results in card format', 'info');
            });
        }
        
        // Sort table columns
        const sortableHeaders = document.querySelectorAll('.sortable');
        if (sortableHeaders) {
            sortableHeaders.forEach(header => {
                header.addEventListener('click', function() {
                    const column = this.getAttribute('data-sort');
                    const direction = this.classList.contains('sort-asc') ? 'desc' : 'asc';
                    
                    // Update header classes
                    sortableHeaders.forEach(h => {
                        h.classList.remove('sort-asc', 'sort-desc');
                        h.querySelector('i').className = 'fas fa-sort ml-1 text-gray-400';
                    });
                    
                    this.classList.add(`sort-${direction}`);
                    this.querySelector('i').className = `fas fa-sort-${direction} ml-1 text-primary-600`;
                    
                    // Sort the table
                    sortTable(column, direction);
                });
            });
        }
        
        // Delete scan record functionality
        initializeDeleteFunctionality();
        
        // Export menu toggle
        initializeExportMenu();
    }
    
    // Initialize issue reports tab functionality
    function initIssueReportsTab() {
        // Issue search functionality
        const issueSearch = document.getElementById('issue-search');
        const clearIssueSearch = document.getElementById('clear-issue-search');
        
        if (issueSearch) {
            issueSearch.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase().trim();
                filterIssues(searchTerm);
                
                if (searchTerm) {
                    clearIssueSearch.classList.remove('hidden');
                } else {
                    clearIssueSearch.classList.add('hidden');
                }
            });
        }
        
        if (clearIssueSearch) {
            clearIssueSearch.addEventListener('click', function() {
                issueSearch.value = '';
                issueSearch.focus();
                clearIssueSearch.classList.add('hidden');
                filterIssues('');
            });
        }
        
        // Issue filter panel toggle
        const issueFilterBtn = document.getElementById('issue-filter-btn');
        const issueFilterPanel = document.getElementById('issue-filter-panel');
        
        if (issueFilterBtn && issueFilterPanel) {
            issueFilterBtn.addEventListener('click', function() {
                issueFilterPanel.classList.toggle('hidden');
            });
        }
        
        // Reset issue filters button
        const resetIssueFiltersBtn = document.getElementById('reset-issue-filters');
        if (resetIssueFiltersBtn) {
            resetIssueFiltersBtn.addEventListener('click', function() {
                document.getElementById('status-filter').value = '';
                document.getElementById('priority-filter').value = '';
                document.getElementById('issue-type-filter').value = '';
                document.getElementById('issue-date-from').value = '';
                document.getElementById('issue-date-to').value = '';
                
                // Reset all filter tags
                document.getElementById('active-issue-filters').classList.add('hidden');
                document.getElementById('issue-filter-tags').innerHTML = '';
                
                // Reset all issues visibility
                resetIssueFilters();
            });
        }
        
        // Apply issue filters button
        const applyIssueFiltersBtn = document.getElementById('apply-issue-filters');
        if (applyIssueFiltersBtn) {
            applyIssueFiltersBtn.addEventListener('click', function() {
                const statusFilter = document.getElementById('status-filter').value;
                const priorityFilter = document.getElementById('priority-filter').value;
                const typeFilter = document.getElementById('issue-type-filter').value;
                const dateFrom = document.getElementById('issue-date-from').value;
                const dateTo = document.getElementById('issue-date-to').value;
                
                applyIssueAdvancedFilters(statusFilter, priorityFilter, typeFilter, dateFrom, dateTo);
            });
        }
        
        // Status filter tabs
        document.querySelectorAll('.status-filter-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                // Update button styles
                document.querySelectorAll('.status-filter-btn').forEach(b => {
                    b.classList.remove('bg-primary-600', 'text-white');
                    b.classList.add('bg-gray-200', 'text-gray-700');
                });
                
                this.classList.remove('bg-gray-200', 'text-gray-700');
                this.classList.add('bg-primary-600', 'text-white');
                
                // Apply status filter
                const filter = this.getAttribute('data-status-filter');
                applyStatusFilter(filter);
            });
        });
        
        // Initialize update status modal
        initUpdateStatusModal();
        
        // Initial load of issue data
        loadIssueData();
    }
    
    // Initialize analytics tab functionality
    function initAnalyticsTab() {
        // Load sample data for analytics charts
        // In a real implementation, this would fetch data from an API
        function loadAnalyticsData() {
            const productsIssueTable = document.getElementById('products-issue-table');
            if (!productsIssueTable) return;
            
            // Sample data for the products with issues table
            const sampleData = [
                { productName: "RustShield Pro 5000", totalIssues: 5, openIssues: 2, commonIssue: "Performance Issues", lastReported: "2025-03-15" },
                { productName: "Industrial Spray Booth", totalIssues: 3, openIssues: 1, commonIssue: "Maintenance Required", lastReported: "2025-03-10" },
                { productName: "Precision Lab Scale", totalIssues: 2, openIssues: 0, commonIssue: "Calibration Issues", lastReported: "2025-03-01" },
                { productName: "Emergency Eyewash Station", totalIssues: 1, openIssues: 1, commonIssue: "Safety Concern", lastReported: "2025-03-17" }
            ];
            
            // Populate the table
            productsIssueTable.innerHTML = '';
            sampleData.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-6 py-4">
                        <div class="text-sm font-medium text-gray-900">${item.productName}</div>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-500">${item.totalIssues}</td>
                    <td class="px-6 py-4">
                        <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${item.openIssues > 0 ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'}">
                            ${item.openIssues}
                        </span>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-500">${item.commonIssue}</td>
                    <td class="px-6 py-4 text-sm text-gray-500">${formatDate(new Date(item.lastReported))}</td>
                `;
                productsIssueTable.appendChild(row);
            });
        }
        
        // Period buttons for analytics charts
        const periodBtns = document.querySelectorAll('.period-btn');
        if (periodBtns) {
            periodBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    // Update button styles
                    periodBtns.forEach(b => {
                        b.classList.remove('bg-primary-100', 'text-primary-600');
                        b.classList.add('bg-gray-100', 'text-gray-600');
                    });
                    
                    this.classList.remove('bg-gray-100', 'text-gray-600');
                    this.classList.add('bg-primary-100', 'text-primary-600');
                    
                    // In a real implementation, this would fetch data for the selected period
                    const period = this.getAttribute('data-period');
                    showToast('Analytics period changed', `Showing data for the last ${period}`, 'info');
                });
            });
        }
    }
    
    // Shared functionality for all tabs
    function initSharedFunctionality() {
        // Initialize modals
        initializeModals();
        
        // Initialize toast notifications
        initializeToastNotifications();
    }
    
    function applyTimeFilter(filter) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        
        const startOfWeek = new Date(today);
        startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());
        
        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        
        const tableRows = document.querySelectorAll('.scan-result-row');
        const cardItems = document.querySelectorAll('.scan-result-card');
        let visibleCount = 0;
        
        function shouldShowByTime(element) {
            const time = new Date(element.getAttribute('data-time'));
            
            if (filter === 'all') return true;
            if (filter === 'today' && time >= today) return true;
            if (filter === 'yesterday' && time >= yesterday && time < today) return true;
            if (filter === 'week' && time >= startOfWeek) return true;
            if (filter === 'month' && time >= startOfMonth) return true;
            
            return false;
        }
        
        // Apply filter to table rows
        tableRows.forEach(row => {
            if (shouldShowByTime(row)) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });
        
        // Apply filter to card items
        cardItems.forEach(card => {
            if (shouldShowByTime(card)) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });
        
        // Update result count
        const resultCount = document.getElementById('result-count');
        if (resultCount) {
            resultCount.innerHTML = `Showing <span class="font-medium text-gray-700">${visibleCount}</span> results`;
        }
        
        // Show toast notification
        let filterText = 'All time';
        if (filter === 'today') filterText = 'Today only';
        if (filter === 'yesterday') filterText = 'Yesterday only';
        if (filter === 'week') filterText = 'This week';
        if (filter === 'month') filterText = 'This month';
        
        showToast('Time filter applied', `Showing ${visibleCount} results from ${filterText}`, 'info');
    }
    
    function applyStatusFilter(filter) {
        const issueItems = document.querySelectorAll('.issue-item');
        let visibleCount = 0;
        
        issueItems.forEach(item => {
            const status = item.getAttribute('data-status');
            
            if (filter === 'all' || status === filter) {
                item.style.display = '';
                visibleCount++;
            } else {
                item.style.display = 'none';
            }
        });
        
        // Update issues count
        const issuesCount = document.getElementById('issues-count');
        if (issuesCount) {
            issuesCount.textContent = `Showing ${visibleCount} issues`;
        }
        
        // Show toast notification
        showToast('Status filter applied', `Showing ${visibleCount} ${filter === 'all' ? 'issues' : filter + ' issues'}`, 'info');
    }
    
    function filterResults(searchTerm) {
        const tableRows = document.querySelectorAll('.scan-result-row');
        const cardItems = document.querySelectorAll('.scan-result-card');
        let visibleCount = 0;
        
        tableRows.forEach(row => {
            const product = row.getAttribute('data-product').toLowerCase();
            const location = row.getAttribute('data-location').toLowerCase();
            const result = row.getAttribute('data-result').toLowerCase();
            const device = row.getAttribute('data-device').toLowerCase();
            
            if (product.includes(searchTerm) || location.includes(searchTerm) || 
                result.includes(searchTerm) || device.includes(searchTerm)) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });
        
        cardItems.forEach(card => {
            const product = card.getAttribute('data-product').toLowerCase();
            const location = card.getAttribute('data-location').toLowerCase();
            const result = card.getAttribute('data-result').toLowerCase();
            const device = card.getAttribute('data-device').toLowerCase();
            
            if (product.includes(searchTerm) || location.includes(searchTerm) || 
                result.includes(searchTerm) || device.includes(searchTerm)) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });
        
        // Update result count
        const resultCount = document.getElementById('result-count');
        if (resultCount) {
            resultCount.innerHTML = `Showing <span class="font-medium text-gray-700">${visibleCount}</span> results`;
        }
    }
    
    function filterIssues(searchTerm) {
        const issueItems = document.querySelectorAll('.issue-item');
        let visibleCount = 0;
        
        issueItems.forEach(item => {
            const text = item.textContent.toLowerCase();
            
            if (text.includes(searchTerm)) {
                item.style.display = '';
                visibleCount++;
            } else {
                item.style.display = 'none';
            }
        });
        
        // Update issues count
        const issuesCount = document.getElementById('issues-count');
        if (issuesCount) {
            issuesCount.textContent = `Showing ${visibleCount} issues`;
        }
    }
    
    function resetFilters() {
        const tableRows = document.querySelectorAll('.scan-result-row');
        const cardItems = document.querySelectorAll('.scan-result-card');
        
        tableRows.forEach(row => {
            row.style.display = '';
        });
        
        cardItems.forEach(card => {
            card.style.display = '';
        });
        
        // Update result count
        const resultCount = document.getElementById('result-count');
        if (resultCount) {
            resultCount.innerHTML = `Showing <span class="font-medium text-gray-700">${tableRows.length}</span> results`;
        }
        
        // Update time filter buttons
        const timeFilterBtns = document.querySelectorAll('.time-filter-btn');
        timeFilterBtns.forEach(btn => {
            btn.classList.remove('bg-primary-600', 'text-white');
            btn.classList.add('bg-gray-200', 'text-gray-700');
            
            if (btn.getAttribute('data-time-filter') === 'all') {
                btn.classList.remove('bg-gray-200', 'text-gray-700');
                btn.classList.add('bg-primary-600', 'text-white');
            }
        });
    }
    
    function resetIssueFilters() {
        const issueItems = document.querySelectorAll('.issue-item');
        
        issueItems.forEach(item => {
            item.style.display = '';
        });
        
        // Update issues count
        const issuesCount = document.getElementById('issues-count');
        if (issuesCount) {
            issuesCount.textContent = `Showing ${issueItems.length} issues`;
        }
        
        // Update status filter buttons
        const statusFilterBtns = document.querySelectorAll('.status-filter-btn');
        statusFilterBtns.forEach(btn => {
            btn.classList.remove('bg-primary-600', 'text-white');
            btn.classList.add('bg-gray-200', 'text-gray-700');
            
            if (btn.getAttribute('data-status-filter') === 'all') {
                btn.classList.remove('bg-gray-200', 'text-gray-700');
                btn.classList.add('bg-primary-600', 'text-white');
            }
        });
    }
    
    function applyAdvancedFilters(dateFrom, dateTo, resultFilter, locationFilter) {
        const tableRows = document.querySelectorAll('.scan-result-row');
        const cardItems = document.querySelectorAll('.scan-result-card');
        let visibleCount = 0;
        
        // Create filter tags container
        const filterTags = document.getElementById('filter-tags');
        filterTags.innerHTML = '';
        
        // Create filter tags
        const activeFilters = [];
        
        if (dateFrom) {
            const fromDate = new Date(dateFrom);
            activeFilters.push({ type: 'date-from', value: formatDate(fromDate), display: `From: ${formatDate(fromDate)}` });
        }
        
        if (dateTo) {
            const toDate = new Date(dateTo);
            activeFilters.push({ type: 'date-to', value: formatDate(toDate), display: `To: ${formatDate(toDate)}` });
        }
        
        if (resultFilter) {
            activeFilters.push({ type: 'result', value: resultFilter, display: `Result: ${resultFilter}` });
        }
        
        if (locationFilter) {
            activeFilters.push({ type: 'location', value: locationFilter, display: `Location: ${locationFilter}` });
        }
        
        // Create filter tag elements
        activeFilters.forEach(filter => {
            const tag = document.createElement('div');
            tag.className = 'px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full flex items-center';
            tag.innerHTML = `
                ${filter.display}
                <button class="ml-1 text-blue-600 hover:text-blue-800" data-filter-type="${filter.type}" data-filter-value="${filter.value}">
                    <i class="fas fa-times-circle"></i>
                </button>
            `;
            
            tag.querySelector('button').addEventListener('click', function() {
                const filterType = this.getAttribute('data-filter-type');
                
                // Remove the filter
                if (filterType === 'date-from') {
                    document.getElementById('date-from').value = '';
                } else if (filterType === 'date-to') {
                    document.getElementById('date-to').value = '';
                } else if (filterType === 'result') {
                    document.getElementById('result-filter').value = '';
                } else if (filterType === 'location') {
                    document.getElementById('location-filter').value = '';
                }
                
                // Re-apply filters
                applyAdvancedFilters(
                    document.getElementById('date-from').value,
                    document.getElementById('date-to').value,
                    document.getElementById('result-filter').value,
                    document.getElementById('location-filter').value
                );
            });
            
            filterTags.appendChild(tag);
        });
        
        // Show or hide active filters section
        if (activeFilters.length > 0) {
            document.getElementById('active-filters').classList.remove('hidden');
        } else {
            document.getElementById('active-filters').classList.add('hidden');
            resetFilters();
            return;
        }
        
        // Apply filters
        tableRows.forEach(row => {
            const rowTime = new Date(row.getAttribute('data-time'));
            const rowResult = row.getAttribute('data-result');
            const rowLocation = row.getAttribute('data-location');
            
            let showRow = true;
            
            if (dateFrom && new Date(dateFrom) > rowTime) {
                showRow = false;
            }
            
            if (dateTo && new Date(dateTo) < rowTime) {
                showRow = false;
            }
            
            if (resultFilter && resultFilter !== rowResult) {
                showRow = false;
            }
            
            if (locationFilter && locationFilter !== rowLocation) {
                showRow = false;
            }
            
            if (showRow) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });
        
        // Apply same filters to card items
        cardItems.forEach(card => {
            const cardTime = new Date(card.getAttribute('data-time'));
            const cardResult = card.getAttribute('data-result');
            const cardLocation = card.getAttribute('data-location');
            
            let showCard = true;
            
            if (dateFrom && new Date(dateFrom) > cardTime) {
                showCard = false;
            }
            
            if (dateTo && new Date(dateTo) < cardTime) {
                showCard = false;
            }
            
            if (resultFilter && resultFilter !== cardResult) {
                showCard = false;
            }
            
            if (locationFilter && locationFilter !== cardLocation) {
                showCard = false;
            }
            
            if (showCard) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });
        
        // Update result count
        const resultCount = document.getElementById('result-count');
        if (resultCount) {
            resultCount.innerHTML = `Showing <span class="font-medium text-gray-700">${visibleCount}</span> results`;
        }
        
        // Show toast notification
        showToast('Filters applied', `Showing ${visibleCount} filtered results`, 'info');
    }
    
    function applyIssueAdvancedFilters(statusFilter, priorityFilter, typeFilter, dateFrom, dateTo) {
        const issueItems = document.querySelectorAll('.issue-item');
        let visibleCount = 0;
        
        // Create filter tags container
        const filterTags = document.getElementById('issue-filter-tags');
        filterTags.innerHTML = '';
        
        // Create filter tags
        const activeFilters = [];
        
        if (statusFilter) {
            activeFilters.push({ type: 'status', value: statusFilter, display: `Status: ${statusFilter}` });
        }
        
        if (priorityFilter) {
            activeFilters.push({ type: 'priority', value: priorityFilter, display: `Priority: ${priorityFilter}` });
        }
        
        if (typeFilter) {
            activeFilters.push({ type: 'type', value: typeFilter, display: `Type: ${typeFilter}` });
        }
        
        if (dateFrom) {
            const fromDate = new Date(dateFrom);
            activeFilters.push({ type: 'date-from', value: formatDate(fromDate), display: `From: ${formatDate(fromDate)}` });
        }
        
        if (dateTo) {
            const toDate = new Date(dateTo);
            activeFilters.push({ type: 'date-to', value: formatDate(toDate), display: `To: ${formatDate(toDate)}` });
        }
        
        // Create filter tag elements
        activeFilters.forEach(filter => {
            const tag = document.createElement('div');
            tag.className = 'px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full flex items-center';
            tag.innerHTML = `
                ${filter.display}
                <button class="ml-1 text-blue-600 hover:text-blue-800" data-filter-type="${filter.type}" data-filter-value="${filter.value}">
                    <i class="fas fa-times-circle"></i>
                </button>
            `;
            
            tag.querySelector('button').addEventListener('click', function() {
                const filterType = this.getAttribute('data-filter-type');
                
                // Remove the filter
                if (filterType === 'status') {
                    document.getElementById('status-filter').value = '';
                } else if (filterType === 'priority') {
                    document.getElementById('priority-filter').value = '';
                } else if (filterType === 'type') {
                    document.getElementById('issue-type-filter').value = '';
                } else if (filterType === 'date-from') {
                    document.getElementById('issue-date-from').value = '';
                } else if (filterType === 'date-to') {
                    document.getElementById('issue-date-to').value = '';
                }
                
                // Re-apply filters
                applyIssueAdvancedFilters(
                    document.getElementById('status-filter').value,
                    document.getElementById('priority-filter').value,
                    document.getElementById('issue-type-filter').value,
                    document.getElementById('issue-date-from').value,
                    document.getElementById('issue-date-to').value
                );
            });
            
            filterTags.appendChild(tag);
        });
        
        // Show or hide active filters section
        if (activeFilters.length > 0) {
            document.getElementById('active-issue-filters').classList.remove('hidden');
        } else {
            document.getElementById('active-issue-filters').classList.add('hidden');
            resetIssueFilters();
            return;
        }
        
        // Apply filters
        issueItems.forEach(item => {
            const itemDate = new Date(item.getAttribute('data-date'));
            const itemStatus = item.getAttribute('data-status');
            const itemPriority = item.getAttribute('data-priority');
            const itemType = item.getAttribute('data-type');
            
            let showItem = true;
            
            if (statusFilter && statusFilter !== itemStatus) {
                showItem = false;
            }
            
            if (priorityFilter && priorityFilter !== itemPriority) {
                showItem = false;
            }
            
            if (typeFilter && typeFilter !== itemType) {
                showItem = false;
            }
            
            if (dateFrom && new Date(dateFrom) > itemDate) {
                showItem = false;
            }
            
            if (dateTo && new Date(dateTo) < itemDate) {
                showItem = false;
            }
            
            if (showItem) {
                item.style.display = '';
                visibleCount++;
            } else {
                item.style.display = 'none';
            }
        });
        
        // Update issues count
        const issuesCount = document.getElementById('issues-count');
        if (issuesCount) {
            issuesCount.textContent = `Showing ${visibleCount} issues`;
        }
        
        // Show toast notification
        showToast('Filters applied', `Showing ${visibleCount} filtered issues`, 'info');
    }
    
    function sortTable(column, direction) {
        const tableBody = document.getElementById('results-table-body');
        const rows = Array.from(tableBody.querySelectorAll('tr.scan-result-row'));
        
        // Sort rows
        rows.sort((a, b) => {
            let valueA = a.getAttribute(`data-${column}`);
            let valueB = b.getAttribute(`data-${column}`);
            
            // Handle different data types
            if (column === 'time') {
                valueA = new Date(valueA);
                valueB = new Date(valueB);
            }
            
            if (direction === 'asc') {
                return valueA > valueB ? 1 : -1;
            } else {
                return valueA < valueB ? 1 : -1;
            }
        });
        
        // Reorder rows in the table
        rows.forEach(row => {
            tableBody.appendChild(row);
        });
        
        // Show toast notification
        showToast('Table sorted', `Sorted by ${column} in ${direction === 'asc' ? 'ascending' : 'descending'} order`, 'info');
    }
    
    function initializeDeleteFunctionality() {
        const deleteButtons = document.querySelectorAll('.delete-scan');
        const deleteModal = document.getElementById('delete-modal');
        const cancelDeleteBtn = document.getElementById('cancel-delete');
        const confirmDeleteBtn = document.getElementById('confirm-delete');
        const deleteItemDetails = document.getElementById('delete-item-details');
        
        if (deleteButtons && deleteModal) {
            deleteButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const id = this.getAttribute('data-id');
                    const row = this.closest('tr.scan-result-row');
                    
                    // Populate delete modal with details
                    deleteItemDetails.innerHTML = `
                        <p><strong>Product:</strong> ${row.getAttribute('data-product')}</p>
                        <p><strong>Scan Time:</strong> ${new Date(row.getAttribute('data-time')).toLocaleString()}</p>
                        <p><strong>Location:</strong> ${row.getAttribute('data-location')}</p>
                        <p><strong>Result:</strong> ${row.getAttribute('data-result')}</p>
                    `;
                    
                    // Store the row reference for deletion
                    confirmDeleteBtn.setAttribute('data-row-id', row.getAttribute('data-id'));
                    
                    // Show the modal
                    deleteModal.classList.remove('hidden');
                });
            });
            
            cancelDeleteBtn.addEventListener('click', function() {
                deleteModal.classList.add('hidden');
            });
            
            confirmDeleteBtn.addEventListener('click', function() {
                const id = this.getAttribute('data-row-id');
                
                // Get the CSRF token
                const token = document.querySelector('meta[name="RequestVerificationToken"]').content;
                
                // Send delete request
                fetch('/Card/DeleteScanResult', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token
                    },
                    body: `id=${id}`
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Find and remove the row and card
                        const row = document.querySelector(`.scan-result-row[data-id="${id}"]`);
                        const card = document.querySelector(`.scan-result-card[data-id="${id}"]`);
                        
                        if (row) row.remove();
                        if (card) card.remove();
                        
                        // Update counters
                        updateCounters();
                        
                        // Show toast notification
                        showToast('Record deleted', 'Scan record has been permanently deleted', 'success');
                    } else {
                        showToast('Error', data.error || 'Failed to delete record', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error', 'Failed to delete record. Please try again.', 'error');
                })
                .finally(() => {
                    // Hide the modal
                    deleteModal.classList.add('hidden');
                });
            });
            
            // Close modal when clicking outside
            deleteModal.addEventListener('click', function(e) {
                if (e.target === deleteModal) {
                    deleteModal.classList.add('hidden');
                }
            });
        }
    }
    
    function updateCounters() {
        const totalCounter = document.getElementById('total-scans-counter');
        const todayCounter = document.getElementById('today-scans-counter');
        const locationsCounter = document.getElementById('locations-counter');
        const successRateCounter = document.getElementById('success-rate-counter');
        
        if (totalCounter) {
            const visibleRows = document.querySelectorAll('.scan-result-row:not([style*="display: none"])');
            const total = visibleRows.length;
            
            totalCounter.querySelector('.animate-counter').textContent = total;
            
            // Count today's scans
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const todayScans = Array.from(visibleRows).filter(row => {
                const scanTime = new Date(row.getAttribute('data-time'));
                return scanTime >= today;
            }).length;
            
            if (todayCounter) {
                todayCounter.querySelector('.animate-counter').textContent = todayScans;
            }
            
            // Count unique locations
            const locations = new Set(Array.from(visibleRows).map(row => row.getAttribute('data-location')));
            
            if (locationsCounter) {
                locationsCounter.querySelector('.animate-counter').textContent = locations.size;
            }
            
            // Calculate success rate
            const successfulScans = Array.from(visibleRows).filter(row => row.getAttribute('data-result') === 'Success').length;
            const successRate = total > 0 ? Math.round((successfulScans / total) * 100) : 0;
            
            if (successRateCounter) {
                successRateCounter.querySelector('.animate-counter').textContent = successRate;
            }
        }
    }
    
    function initializeExportMenu() {
        const exportMenuBtn = document.getElementById('export-menu-btn');
        const exportMenu = document.getElementById('export-menu');
        
        if (exportMenuBtn && exportMenu) {
            exportMenuBtn.addEventListener('click', function() {
                exportMenu.classList.toggle('hidden');
                exportMenu.classList.toggle('scale-95');
                exportMenu.classList.toggle('scale-100');
            });
            
            // Close menu when clicking outside
            document.addEventListener('click', function(e) {
                if (!exportMenuBtn.contains(e.target) && !exportMenu.contains(e.target)) {
                    exportMenu.classList.add('hidden');
                    exportMenu.classList.add('scale-95');
                    exportMenu.classList.remove('scale-100');
                }
            });
            
            // Export buttons
            document.getElementById('export-csv').addEventListener('click', function() {
                exportData('csv');
                exportMenu.classList.add('hidden');
            });
            
            document.getElementById('export-pdf').addEventListener('click', function() {
                exportData('pdf');
                exportMenu.classList.add('hidden');
            });
            
            document.getElementById('export-excel').addEventListener('click', function() {
                exportData('excel');
                exportMenu.classList.add('hidden');
            });
            
            document.getElementById('print-results').addEventListener('click', function() {
                showToast('Preparing print view', 'Opening print dialog...', 'info');
                exportMenu.classList.add('hidden');
                setTimeout(() => { window.print(); }, 1000);
            });
        }
        
        // Also add refresh button functionality
        const refreshBtn = document.getElementById('refresh-btn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', function() {
                this.querySelector('i').classList.add('animate-spin');
                
                // Simulate refresh delay
                setTimeout(() => {
                    this.querySelector('i').classList.remove('animate-spin');
                    showToast('Data refreshed', 'Scan results updated', 'success');
                    
                    // In a real app, you would reload the data here
                    // location.reload();
                }, 1000);
            });
        }
    }
    
    function exportData(format) {
        // Get visible rows
        const rows = document.querySelectorAll('.scan-result-row:not([style*="display: none"])');
        
        if (rows.length === 0) {
            showToast('Export failed', 'No data to export', 'error');
            return;
        }
        
        // Prepare data for export
        const data = Array.from(rows).map(row => ({
            product: row.getAttribute('data-product'),
            time: new Date(row.getAttribute('data-time')).toLocaleString(),
            device: row.getAttribute('data-device'),
            location: row.getAttribute('data-location'),
            result: row.getAttribute('data-result')
        }));
        
        // In a real application, you would send this data to a server endpoint
        // For this example, we'll just simulate a successful export
        
        showToast('Export started', `Exporting ${rows.length} records to ${format.toUpperCase()}`, 'success');
        
        // Simulate export completion after a delay
        setTimeout(() => {
            showToast('Export completed', `${format.toUpperCase()} file has been generated`, 'success');
        }, 2000);
    }
    
    function initializeModals() {
        const helpBtn = document.getElementById('help-btn');
        const helpModal = document.getElementById('help-modal');
        const closeHelpModal = document.getElementById('close-help-modal');
        const closeHelp = document.getElementById('close-help');
        
        if (helpBtn && helpModal) {
            helpBtn.addEventListener('click', function() {
                helpModal.classList.remove('hidden');
            });
            
            if (closeHelpModal) {
                closeHelpModal.addEventListener('click', function() {
                    helpModal.classList.add('hidden');
                });
            }
            
            if (closeHelp) {
                closeHelp.addEventListener('click', function() {
                    helpModal.classList.add('hidden');
                });
            }
            
            // Close modal when clicking outside
            helpModal.addEventListener('click', function(e) {
                if (e.target === helpModal) {
                    helpModal.classList.add('hidden');
                }
            });
        }
        
        // Settings button
        const settingsBtn = document.getElementById('settings-btn');
        if (settingsBtn) {
            settingsBtn.addEventListener('click', function() {
                showToast('Settings', 'Settings panel would open here', 'info');
            });
        }
    }
    
    function initUpdateStatusModal() {
        const updateStatusModal = document.getElementById('update-status-modal');
        const cancelStatusUpdateBtn = document.getElementById('cancel-status-update');
        const confirmStatusUpdateBtn = document.getElementById('confirm-status-update');
        const newStatusSelect = document.getElementById('new-status');
        const resolutionContainer = document.getElementById('resolution-container');
        
        if (updateStatusModal) {
            // Close modal handlers
            if (cancelStatusUpdateBtn) {
                cancelStatusUpdateBtn.addEventListener('click', function() {
                    updateStatusModal.classList.add('hidden');
                });
            }
            
            // Show/hide resolution notes based on status
            if (newStatusSelect && resolutionContainer) {
                newStatusSelect.addEventListener('change', function() {
                    if (this.value === 'Resolved' || this.value === 'Closed') {
                        resolutionContainer.classList.remove('hidden');
                    } else {
                        resolutionContainer.classList.add('hidden');
                    }
                });
            }
            
            // Handle status update submission
            if (confirmStatusUpdateBtn) {
                confirmStatusUpdateBtn.addEventListener('click', function() {
                    const issueId = this.getAttribute('data-issue-id');
                    const newStatus = newStatusSelect.value;
                    const resolutionNotes = document.getElementById('resolution-notes').value;
                    
                    if (!issueId) {
                        showToast('Error', 'No issue selected for update', 'error');
                        return;
                    }
                    
                    // Get the CSRF token
                    const token = document.querySelector('meta[name="RequestVerificationToken"]').content;
                    
                    // Create request data
                    const data = {
                        id: parseInt(issueId),
                        status: newStatus,
                        resolution: resolutionNotes
                    };
                    
                    // Send update request
                    fetch('/Card/UpdateIssueStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(data)
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(errorData => {
                                throw new Error(errorData.error || 'Server error');
                            });
                        }
                        return response.json();
                    })
                    .then(result => {
                        if (result.success) {
                            // Close the modal
                            updateStatusModal.classList.add('hidden');
                            
                            // Show success toast
                            showToast('Status updated', `Issue status changed to ${newStatus}`, 'success');
                            
                            // Reload the issues data
                            loadIssueData();
                        } else {
                            showToast('Error', result.error || 'Failed to update status', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error updating status:', error);
                        showToast('Error', error.message || 'Failed to update status', 'error');
                    });
                });
            }
            
            // Close modal when clicking outside
            updateStatusModal.addEventListener('click', function(e) {
                if (e.target === updateStatusModal) {
                    updateStatusModal.classList.add('hidden');
                }
            });
        }
        
        // Delegate click event for issue status update buttons
        document.addEventListener('click', function(e) {
            const updateStatusBtn = e.target.closest('.update-status-btn');
            if (!updateStatusBtn) return;
            
            const issueId = updateStatusBtn.getAttribute('data-id');
            const issueItem = updateStatusBtn.closest('.issue-item');
            
            if (issueItem && issueId) {
                // Populate issue details
                const issueDetails = document.getElementById('issue-details');
                const issueType = issueItem.getAttribute('data-type');
                const issuePriority = issueItem.getAttribute('data-priority');
                const issueStatus = issueItem.getAttribute('data-status');
                
                issueDetails.innerHTML = `
                    <p><strong>Issue Type:</strong> ${issueType}</p>
                    <p><strong>Priority:</strong> ${issuePriority}</p>
                    <p><strong>Current Status:</strong> ${issueStatus}</p>
                `;
                
                // Set current status
                if (newStatusSelect) {
                    newStatusSelect.value = issueStatus;
                    
                    // Trigger change event to show/hide resolution notes
                    const event = new Event('change');
                    newStatusSelect.dispatchEvent(event);
                }
                
                // Set issue ID for submission
                confirmStatusUpdateBtn.setAttribute('data-issue-id', issueId);
                
                // Show the modal
                updateStatusModal.classList.remove('hidden');
            }
        });
    }
    
    function initializeToastNotifications() {
        const toast = document.getElementById('toast-notification');
        const closeToast = document.getElementById('close-toast');
        
        if (closeToast && toast) {
            closeToast.addEventListener('click', function() {
                toast.classList.add('translate-y-20', 'opacity-0');
                setTimeout(() => {
                    toast.classList.add('hidden');
                }, 300);
            });
        }
    }
    
    function showToast(message, description = '', type = 'success') {
        const toast = document.getElementById('toast-notification');
        const toastMessage = document.getElementById('toast-message');
        const toastDescription = document.getElementById('toast-description');
        const toastIcon = document.getElementById('toast-icon');
        const toastIconSymbol = document.getElementById('toast-icon-symbol');
        
        toastMessage.textContent = message;
        toastDescription.textContent = description;
        
        // Set icon and colors based on type
        if (type === 'success') {
            toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-green-100';
            toastIconSymbol.className = 'fas fa-check text-green-500';
        } else if (type === 'error') {
            toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-red-100';
            toastIconSymbol.className = 'fas fa-times text-red-500';
        } else if (type === 'warning') {
            toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-yellow-100';
            toastIconSymbol.className = 'fas fa-exclamation text-yellow-500';
        } else if (type === 'info') {
            toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-blue-100';
            toastIconSymbol.className = 'fas fa-info text-blue-500';
        }
        
        // Show toast
        toast.classList.remove('hidden');
        // Use a small delay to ensure the transition works
        setTimeout(() => {
            toast.classList.remove('translate-y-20', 'opacity-0');
        }, 10);
        
        // Auto hide after 5 seconds
        setTimeout(() => {
            toast.classList.add('translate-y-20', 'opacity-0');
            setTimeout(() => {
                toast.classList.add('hidden');
            }, 300);
        }, 5000);
    }
    
    // Load issue data
    function loadIssueData() {
        const issuesContainer = document.getElementById('issues-content');
        if (!issuesContainer) return;
        
        // Show loading state
        issuesContainer.innerHTML = `
            <div class="text-center py-8">
                <div class="w-16 h-16 mx-auto rounded-full bg-primary-50 flex items-center justify-center">
                    <i class="fas fa-spinner fa-spin text-primary-500 text-xl"></i>
                </div>
                <p class="mt-4 text-gray-500">Loading issues...</p>
            </div>
        `;
        
        // Update issue counters
        fetch('/Card/GetAllIssues')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(issues => {
                // Update issue counters
                const totalIssues = issues.length;
                const openIssues = issues.filter(i => i.status === 'Open').length;
                const inProgressIssues = issues.filter(i => i.status === 'In Progress').length;
                const resolvedIssues = issues.filter(i => i.status === 'Resolved').length;
                
                document.getElementById('total-issues-counter').querySelector('.animate-counter').textContent = totalIssues;
                document.getElementById('open-issues-counter').querySelector('.animate-counter').textContent = openIssues;
                document.getElementById('inprogress-issues-counter').querySelector('.animate-counter').textContent = inProgressIssues;
                document.getElementById('resolved-issues-counter').querySelector('.animate-counter').textContent = resolvedIssues;
                
                // Update issues count
                const issuesCount = document.getElementById('issues-count');
                if (issuesCount) {
                    issuesCount.textContent = `Showing ${totalIssues} issues`;
                }
                
                if (issues && issues.length > 0) {
                    // Clear loading spinner
                    issuesContainer.innerHTML = '';
                    
                    // Sort issues by date (newest first)
                    issues.sort((a, b) => new Date(b.reportDate) - new Date(a.reportDate));
                    
                    // Create issues list
                    const issuesList = document.createElement('div');
                    issuesList.className = 'space-y-4';
                    
                    issues.forEach(issue => {
                        // Determine status color
                        let statusColor = '';
                        let statusIcon = '';
                        
                        if (issue.status === 'Open') {
                            statusColor = 'bg-yellow-100 text-yellow-800';
                            statusIcon = 'fa-exclamation-circle text-yellow-500';
                        } else if (issue.status === 'In Progress') {
                            statusColor = 'bg-blue-100 text-blue-800';
                            statusIcon = 'fa-tools text-blue-500';
                        } else if (issue.status === 'Resolved') {
                            statusColor = 'bg-green-100 text-green-800';
                            statusIcon = 'fa-check-circle text-green-500';
                        } else if (issue.status === 'Closed') {
                            statusColor = 'bg-gray-100 text-gray-800';
                            statusIcon = 'fa-archive text-gray-500';
                        }
                        
                        // Determine priority style
                        let priorityStyle = '';
                        if (issue.priority === 'Low') {
                            priorityStyle = 'bg-green-50 text-green-700';
                        } else if (issue.priority === 'Medium') {
                            priorityStyle = 'bg-blue-50 text-blue-700';
                        } else if (issue.priority === 'High') {
                            priorityStyle = 'bg-orange-50 text-orange-700';
                        } else if (issue.priority === 'Critical') {
                            priorityStyle = 'bg-red-50 text-red-700';
                        }
                        
                        const reportDate = new Date(issue.reportDate);
                        const resolvedDate = issue.resolvedAt ? new Date(issue.resolvedAt) : null;
                        
                        const issueItem = document.createElement('div');
                        issueItem.className = 'issue-item p-4 bg-white border border-gray-200 rounded-lg shadow-sm';
                        issueItem.setAttribute('data-id', issue.id);
                        issueItem.setAttribute('data-status', issue.status);
                        issueItem.setAttribute('data-priority', issue.priority);
                        issueItem.setAttribute('data-type', issue.issueType);
                        issueItem.setAttribute('data-date', issue.reportDate);
                        
                        issueItem.innerHTML = `
                            <div class="flex flex-col md:flex-row md:items-start gap-4">
                                <div class="flex-shrink-0">
                                    <div class="w-10 h-10 rounded-full ${statusColor.replace('text-', 'bg-').replace('800', '100')} flex items-center justify-center">
                                        <i class="fas ${statusIcon}"></i>
                                    </div>
                                </div>
                                <div class="flex-grow">
                                    <div class="flex flex-wrap gap-2 mb-2">
                                        <span class="px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColor}">${issue.status}</span>
                                        <span class="px-2.5 py-0.5 rounded-full text-xs font-medium ${priorityStyle}">${issue.priority}</span>
                                        <span class="px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">${issue.issueType}</span>
                                    </div>
                                    <div class="mb-2">
                                        <p class="text-sm font-medium">Product: ${issue.cardName || `Product #${issue.cardId}`}</p>
                                    </div>
                                    <p class="text-sm text-gray-600 mb-3">${issue.description}</p>
                                    <div class="flex flex-wrap justify-between items-end">
                                        <div class="text-xs text-gray-500">
                                            <p>Reported on ${formatDate(reportDate)} by ${issue.reporterName}</p>
                                            ${resolvedDate ? `<p>Resolved on ${formatDate(resolvedDate)}</p>` : ''}
                                        </div>
                                        <div class="mt-2 md:mt-0">
                                            <button type="button" class="update-status-btn px-3 py-1 text-xs bg-blue-50 text-blue-600 rounded hover:bg-blue-100 transition-colors" data-id="${issue.id}">
                                                ${issue.status === 'Open' || issue.status === 'In Progress' ? 'Update Status' : 'View Details'}
                                            </button>
                                        </div>
                                    </div>
                                    ${issue.resolution ? `
                                    <div class="mt-3 pt-3 border-t border-gray-100">
                                        <p class="text-xs font-medium text-gray-700">Resolution:</p>
                                        <p class="text-xs text-gray-600">${issue.resolution}</p>
                                    </div>
                                    ` : ''}
                                </div>
                            </div>
                        `;
                        
                        issuesList.appendChild(issueItem);
                    });
                    
                    issuesContainer.appendChild(issuesList);
                } else {
                    // No issues found
                    issuesContainer.innerHTML = `
                        <div class="text-center py-8">
                            <div class="w-16 h-16 mx-auto rounded-full bg-gray-100 flex items-center justify-center text-gray-400">
                                <i class="fas fa-clipboard-check text-2xl"></i>
                            </div>
                            <p class="text-lg font-medium text-gray-700 mt-4">No Issue Reports</p>
                            <p class="text-gray-500 mt-2 max-w-md mx-auto">There are currently no reported issues for any products.</p>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error loading issues:', error);
                
                issuesContainer.innerHTML = `
                    <div class="text-center py-8">
                        <div class="w-16 h-16 mx-auto rounded-full bg-red-100 flex items-center justify-center text-red-500">
                            <i class="fas fa-exclamation-triangle text-2xl"></i>
                        </div>
                        <p class="text-lg font-medium text-gray-700 mt-4">Error Loading Issues</p>
                        <p class="text-red-500 mt-2">${error.message}</p>
                        <button id="retry-load-issues" class="mt-4 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700">
                            Retry
                        </button>
                    </div>
                `;
                
                // Add retry button handler
                const retryBtn = document.getElementById('retry-load-issues');
                if (retryBtn) {
                    retryBtn.addEventListener('click', loadIssueData);
                }
            });
    }
    
    function formatDate(date) {
        return date.toLocaleDateString(undefined, { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
        });
    }
</script>
}