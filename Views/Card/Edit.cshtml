@model CardTagManager.Models.Card

@{
    ViewData["Title"] = "Edit Product";
}

<div class="mb-6">
    <a asp-action="Index" class="inline-flex items-center text-primary-600 hover:text-primary-700 transition-colors group">
        <i class="fas fa-arrow-left mr-2 group-hover:-translate-x-1 transition-transform"></i> Back to Products
    </a>
</div>

<!-- Form Progress Indicator -->
<div class="form-progress mb-6">
    <div class="flex items-center justify-between max-w-2xl mx-auto">
        <div class="step active" data-step="1">
            <div class="step-circle bg-primary-600 text-white h-8 w-8 rounded-full flex items-center justify-center">1</div>
            <div class="step-label text-sm font-medium mt-1">Basic Info</div>
        </div>
        <div class="step-connector h-1 flex-grow bg-gray-200 mx-2 relative">
            <div class="absolute inset-0 bg-primary-600 step-progress" style="width: 0%"></div>
        </div>
        <div class="step" data-step="2">
            <div class="step-circle bg-gray-200 text-gray-600 h-8 w-8 rounded-full flex items-center justify-center">2</div>
            <div class="step-label text-sm font-medium mt-1">Details</div>
        </div>
        <div class="step-connector h-1 flex-grow bg-gray-200 mx-2 relative">
            <div class="absolute inset-0 bg-primary-600 step-progress" style="width: 0%"></div>
        </div>
        <div class="step" data-step="3">
            <div class="step-circle bg-gray-200 text-gray-600 h-8 w-8 rounded-full flex items-center justify-center">3</div>
            <div class="step-label text-sm font-medium mt-1">Appearance</div>
        </div>
    </div>
</div>

<div class="grid grid-cols-1 lg:grid-cols-5 gap-8 fade-in">
    <!-- Form Section (3 columns) -->
    <div class="lg:col-span-3">
        <div class="card">
            <div class="card-header">
                <h2 class="text-xl font-bold text-gray-800 flex items-center">
                    <i class="fas fa-edit text-primary-500 mr-2"></i> Edit Product
                </h2>
                <p class="text-sm text-gray-500 mt-1">Update the details for your product tag</p>
            </div>
            
            <form asp-action="Edit" asp-controller="Card" method="post" id="product-form" enctype="multipart/form-data">
                <input type="hidden" asp-for="Id" />
                <input type="hidden" asp-for="CreatedAt" />
                <input type="hidden" asp-for="ImagePath" />
                <input type="hidden" asp-for="Username" />
                <input type="hidden" asp-for="Department" />
                <input type="hidden" asp-for="Email" />
                <input type="hidden" asp-for="UserFullName" />
                <input type="hidden" asp-for="PlantName" />
                <input type="hidden" name="QrFgColor" id="qrFgColorHidden" value="@(Model.QrFgColor ?? "#000000")" />
                <input type="hidden" name="QrBgColor" id="qrBgColorHidden" value="@(Model.QrBgColor ?? "#FFFFFF")" />
                <input type="hidden" name="CustomFieldsData" id="customFieldsDataHidden" value="@(Model.CustomFieldsData ?? "{}")" />
                
                <div class="card-body">
                    <!-- Step 1: Basic Information -->
                    <div class="form-section" data-step="1">
                        <h3 class="text-md font-semibold text-gray-700 mb-4 pb-2 border-b">Basic Information</h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="space-y-4">
                                <div class="form-group">
                                    <label asp-for="ProductName" class="form-label flex items-center">
                                        Product Name
                                        <span class="text-red-500 ml-1">*</span>
                                        <span class="ml-auto text-xs text-gray-400" id="name-counter">0/100</span>
                                    </label>
                                    <div class="relative">
                                        <input asp-for="ProductName" class="form-input pl-9" required 
                                               placeholder="RustShield Pro 5000" maxlength="100"
                                               oninput="countChars(this, 'name-counter', 100)">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-tag text-gray-400"></i>
                                        </div>
                                        <div class="validation-icon absolute inset-y-0 right-3 flex items-center hidden" id="name-valid">
                                            <i class="fas fa-check-circle text-green-500"></i>
                                        </div>
                                    </div>
                                    <span asp-validation-for="ProductName" class="form-error"></span>
                                </div>
                                
                                <div class="form-group">
                                    <label asp-for="Category" class="form-label">
                                        Category
                                        <span class="text-red-500 ml-1">*</span>
                                    </label>
                                    <div class="relative">
                                        <select asp-for="Category" class="form-input pl-9" onchange="updateFieldVisibility(this.value)">
                                            <option value="Rust Coating Chemical">Rust Coating Chemical</option>
                                            <option value="Application Equipment">Application Equipment</option>
                                            <option value="Lab Equipment">Lab Equipment</option>
                                            <option value="Office Equipment">Office Equipment</option>
                                            <option value="Safety Equipment">Safety Equipment</option>
                                            <option value="Quality Control">Quality Control</option>
                                            <option value="Design Asset">Design Asset</option>
                                            <option value="Other">Other</option>
                                        </select>
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-folder text-gray-400"></i>
                                        </div>
                                    </div>
                                    <span asp-validation-for="Category" class="form-error"></span>
                                </div>
                                
                                <div class="form-group">
                                    <label asp-for="Manufacturer" class="form-label">
                                        Manufacturer
                                        <span class="text-red-500 ml-1">*</span>
                                    </label>
                                    <div class="relative">
                                        <input asp-for="Manufacturer" class="form-input pl-9" required placeholder="ChemTech Industries">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-industry text-gray-400"></i>
                                        </div>
                                    </div>
                                    <span asp-validation-for="Manufacturer" class="form-error"></span>
                                </div>
                            </div>
                            
                            <div class="space-y-4">
                                <div class="form-group">
                                    <label asp-for="ModelNumber" class="form-label">
                                        Model Number
                                        <span class="text-red-500 ml-1">*</span>
                                    </label>
                                    <div class="relative">
                                        <input asp-for="ModelNumber" class="form-input pl-9" required placeholder="RS-5000-X">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-barcode text-gray-400"></i>
                                        </div>
                                    </div>
                                    <span asp-validation-for="ModelNumber" class="form-error"></span>
                                </div>
                                
                                <div class="form-group">
                                    <label asp-for="SerialNumber" class="form-label">
                                        Serial Number
                                        <span class="text-red-500 ml-1">*</span>
                                    </label>
                                    <div class="relative">
                                        <input asp-for="SerialNumber" class="form-input pl-9" required placeholder="CT20250001">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-fingerprint text-gray-400"></i>
                                        </div>
                                    </div>
                                    <span asp-validation-for="SerialNumber" class="form-error"></span>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">Product Image</label>
                                    @if (!string.IsNullOrEmpty(Model.ImagePath))
                                    {
                                        <div class="mb-3 bg-white p-2 rounded border border-gray-200 shadow-sm">
                                            <img src="@Model.ImagePath" alt="Current Image" class="max-w-full h-auto rounded" style="max-height: 150px;">
                                            <p class="text-xs text-gray-500 mt-1">Current image</p>
                                        </div>
                                    }
                                    <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:bg-gray-50 transition-colors cursor-pointer" id="dropzone">
                                        <input type="file" class="hidden" id="product-image" name="ImageFile" accept="image/*">
                                        <div class="flex flex-col items-center justify-center">
                                            <i class="fas fa-cloud-upload-alt text-2xl text-gray-400 mb-2"></i>
                                            <p class="text-sm text-gray-500 mb-1">Drag and drop @(Model.ImagePath == null ? "an" : "a new") image here or click to browse</p>
                                            <p class="text-xs text-gray-400">PNG, JPG up to 5MB</p>
                                        </div>
                                    </div>
                                    <div id="image-preview" class="hidden mt-2">
                                        <div class="flex items-center justify-between bg-gray-50 rounded-lg p-2">
                                            <div class="flex items-center">
                                                <img src="" alt="Preview" class="w-10 h-10 object-cover rounded mr-2">
                                                <span class="text-sm text-gray-700 filename">filename.jpg</span>
                                            </div>
                                            <button type="button" class="text-red-500 hover:text-red-700" id="remove-image">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Custom Fields Container -->
                        <div id="custom-fields-container" class="mt-6 pt-4 border-t border-gray-200">
                            <!-- Custom fields will be inserted here -->
                            @if (!string.IsNullOrEmpty(Model.CustomFieldsData) && Model.CustomFieldsData != "{}")
                            {
                                <h4 class="text-md font-semibold text-primary-600 mb-3 flex items-center">
                                    <i class="fas fa-clipboard-list mr-2"></i>
                                    Custom Product Fields
                                </h4>
                                <!-- Custom fields would be rendered here based on CustomFieldsData -->
                            }
                        </div>
                        
                        <div class="flex justify-end mt-6">
                            <button type="button" class="btn-primary next-step" data-next="2">
                                Continue to Details <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Step 2: Product Details -->
                    <div class="form-section hidden" data-step="2">
                        <h3 class="text-md font-semibold text-gray-700 mb-4 pb-2 border-b">Product Details</h3>
                        
                        <div class="space-y-4">
                            <div class="form-group">
                                <label asp-for="Location" class="form-label">Location</label>
                                <div class="relative">
                                    <input asp-for="Location" class="form-input pl-9" placeholder="Chemical Storage Room A">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-map-marker-alt text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="Location" class="form-error"></span>
                            </div>
                            
                            <!-- Chemical Storage Conditions (Only for chemical products) -->
                            <div class="form-group field-group chemical-field" style="display: none;">
                                <label for="StorageConditions" class="form-label flex items-center">
                                    Storage Conditions
                                    <span class="ml-2 px-2 py-0.5 bg-blue-100 text-blue-700 text-xs rounded-full border border-blue-200">Chemical Only</span>
                                </label>
                                <div class="relative">
                                    <textarea id="StorageConditions" name="custom-StorageConditions" class="form-input h-24 pl-9" 
                                              placeholder="Store at 10-15°C, away from direct sunlight, in a well-ventilated area"></textarea>
                                    <div class="absolute top-3 left-0 pl-3 flex items-start pointer-events-none">
                                        <i class="fas fa-temperature-low text-gray-400"></i>
                                    </div>
                                </div>
                            </div>

                            <!-- Design Dimensions (Only for design templates) -->
                            <div class="form-group field-group design-field" style="display: none;">
                                <label for="Dimensions" class="form-label flex items-center">
                                    Dimensions
                                    <span class="ml-2 px-2 py-0.5 bg-red-100 text-red-700 text-xs rounded-full border border-red-200">Design Only</span>
                                </label>
                                <div class="relative">
                                    <input type="text" id="Dimensions" name="custom-Dimensions" class="form-input pl-9" 
                                          placeholder="1920x1080px, 300DPI">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-ruler-combined text-gray-400"></i>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="MaintenanceInfo" class="form-label">Maintenance Information</label>
                                <div class="relative">
                                    <textarea asp-for="MaintenanceInfo" class="form-input h-20 pl-9" 
                                              placeholder="Store at 10-15°C, away from direct sunlight"></textarea>
                                    <div class="absolute top-3 left-0 pl-3 flex items-start pointer-events-none">
                                        <i class="fas fa-wrench text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="MaintenanceInfo" class="form-error"></span>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                            <div class="form-group">
                                <label asp-for="ManufactureDate" class="form-label">
                                    Manufacture Date
                                    <span class="text-red-500 ml-1">*</span>
                                </label>
                                <div class="relative">
                                    <input asp-for="ManufactureDate" type="date" class="form-input pl-9" required>
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-calendar-day text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="ManufactureDate" class="form-error"></span>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="PurchaseDate" class="form-label">
                                    Purchase Date
                                    <span class="text-red-500 ml-1">*</span>
                                </label>
                                <div class="relative">
                                    <input asp-for="PurchaseDate" type="date" class="form-input pl-9" required>
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-shopping-cart text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="PurchaseDate" class="form-error"></span>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="WarrantyExpiration" class="form-label warranty-label">
                                    Warranty Until
                                    <span class="text-red-500 ml-1">*</span>
                                </label>
                                <div class="relative">
                                    <input asp-for="WarrantyExpiration" type="date" class="form-input pl-9 warranty-input" required>
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-shield-alt text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="WarrantyExpiration" class="form-error"></span>
                            </div>
                        </div>

                        <!-- License field (Only for design templates) -->
                        <div class="form-group field-group design-field mt-5" style="display: none;">
                            <label for="LicenseInfo" class="form-label flex items-center">
                                License Information
                                <span class="ml-2 px-2 py-0.5 bg-red-100 text-red-700 text-xs rounded-full border border-red-200">Design Only</span>
                            </label>
                            <div class="relative">
                                <select id="LicenseInfo" name="custom-LicenseInfo" class="form-input pl-9">
                                    <option value="Internal Use Only">Internal Use Only</option>
                                    <option value="Company Licensed">Company Licensed</option>
                                    <option value="Perpetual License">Perpetual License</option>
                                    <option value="Royalty Free">Royalty Free</option>
                                    <option value="Rights Managed">Rights Managed</option>
                                </select>
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <i class="fas fa-copyright text-gray-400"></i>
                                </div>
                            </div>
                        </div>
                        
                        <div class="flex justify-between mt-6">
                            <button type="button" class="btn-secondary prev-step" data-prev="1">
                                <i class="fas fa-arrow-left mr-2"></i> Back to Basic Info
                            </button>
                            <button type="button" class="btn-primary next-step" data-next="3">
                                Continue to Appearance <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Step 3: Appearance -->
                    <div class="form-section hidden" data-step="3">
                        <h3 class="text-md font-semibold text-gray-700 mb-4 pb-2 border-b">Card Appearance</h3>
                        
                        <div class="mb-6">
                            <label class="form-label">Card Layout</label>
                            <input type="hidden" asp-for="Layout" id="selected-layout" value="@Model.Layout">
                            <div class="grid grid-cols-3 gap-3">
                                <div class="layout-option border rounded-lg p-2 cursor-pointer hover:border-primary-500 transition-colors @(Model.Layout == "standard" ? "active border-primary-500" : "")" data-layout="standard">
                                    <div class="bg-gray-100 rounded mb-1 flex items-center justify-center p-3">
                                        <div class="w-full aspect-w-16 aspect-h-10 bg-white rounded shadow-sm p-1">
                                            <div class="flex">
                                                <div class="flex-grow">
                                                    <div class="w-1/2 h-2 bg-gray-300 rounded mb-1"></div>
                                                    <div class="w-3/4 h-1 bg-gray-300 rounded mb-2"></div>
                                                    <div class="space-y-1">
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                    </div>
                                                </div>
                                                <div class="w-1/4 flex items-center justify-center">
                                                    <div class="w-10 h-10 bg-gray-300 rounded"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <p class="text-xs text-center">Standard</p>
                                </div>
                                <div class="layout-option border rounded-lg p-2 cursor-pointer hover:border-primary-500 transition-colors @(Model.Layout == "modern" ? "active border-primary-500" : "")" data-layout="modern">
                                    <div class="bg-gray-100 rounded mb-1 flex items-center justify-center p-3">
                                        <div class="w-full aspect-w-16 aspect-h-10 bg-white rounded shadow-sm p-1">
                                            <div class="flex flex-col">
                                                <div class="h-1/3 w-full bg-gray-300 rounded-t"></div>
                                                <div class="p-1 flex">
                                                    <div class="flex-grow">
                                                        <div class="w-1/2 h-1 bg-gray-300 rounded mb-1"></div>
                                                        <div class="space-y-1">
                                                            <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                            <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                        </div>
                                                    </div>
                                                    <div class="w-1/4 flex items-center justify-center">
                                                        <div class="w-8 h-8 bg-gray-300 rounded-full"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <p class="text-xs text-center">Modern</p>
                                </div>
                                <div class="layout-option border rounded-lg p-2 cursor-pointer hover:border-primary-500 transition-colors @(Model.Layout == "compact" ? "active border-primary-500" : "")" data-layout="compact">
                                    <div class="bg-gray-100 rounded mb-1 flex items-center justify-center p-3">
                                        <div class="w-full aspect-w-16 aspect-h-10 bg-white rounded shadow-sm p-1">
                                            <div class="flex">
                                                <div class="flex-grow p-1">
                                                    <div class="w-3/4 h-2 bg-gray-300 rounded mb-1"></div>
                                                    <div class="space-y-1 mt-1">
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                    </div>
                                                </div>
                                                <div class="w-1/3 bg-gray-200 rounded-r flex items-center justify-center">
                                                    <div class="w-8 h-8 bg-gray-300 rounded"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <p class="text-xs text-center">Compact</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <div class="form-group">
                                <label asp-for="BackgroundColor" class="form-label">Background Color</label>
                                <div class="color-picker-wrapper">
                                    <div class="flex">
                                        <input asp-for="BackgroundColor" type="color" class="color-input hidden" id="bg-color-picker">
                                        <div class="color-preview w-10 h-10 border border-gray-300 rounded-lg shadow-inner cursor-pointer" id="bg-color-preview" style="background-color: @Model.BackgroundColor"></div>
                                        <input asp-for="BackgroundColor" type="text" class="form-input ml-2 flex-grow" placeholder="#ffffff">
                                    </div>
                                    <div class="color-presets mt-2 flex flex-wrap gap-2">
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#ffffff" style="background-color: #ffffff;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#f8fafc" style="background-color: #f8fafc;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#f0f9ff" style="background-color: #f0f9ff;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#1e293b" style="background-color: #1e293b;"></span>
                                    </div>
                                </div>
                                <span asp-validation-for="BackgroundColor" class="form-error"></span>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="TextColor" class="form-label">Text Color</label>
                                <div class="color-picker-wrapper">
                                    <div class="flex">
                                        <input asp-for="TextColor" type="color" class="color-input hidden" id="text-color-picker">
                                        <div class="color-preview w-10 h-10 border border-gray-300 rounded-lg shadow-inner cursor-pointer" id="text-color-preview" style="background-color: @Model.TextColor"></div>
                                        <input asp-for="TextColor" type="text" class="form-input ml-2 flex-grow" placeholder="#000000">
                                    </div>
                                    <div class="color-presets mt-2 flex flex-wrap gap-2">
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#000000" style="background-color: #000000;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#1e293b" style="background-color: #1e293b;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#ffffff" style="background-color: #ffffff;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#64748b" style="background-color: #64748b;"></span>
                                    </div>
                                </div>
                                <span asp-validation-for="TextColor" class="form-error"></span>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="AccentColor" class="form-label">Accent Color</label>
                                <div class="color-picker-wrapper">
                                    <div class="flex">
                                        <input asp-for="AccentColor" type="color" class="color-input hidden" id="accent-color-picker">
                                        <div class="color-preview w-10 h-10 border border-gray-300 rounded-lg shadow-inner cursor-pointer" id="accent-color-preview" style="background-color: @Model.AccentColor"></div>
                                        <input asp-for="AccentColor" type="text" class="form-input ml-2 flex-grow" placeholder="#0284c7">
                                    </div>
                                    <div class="color-presets mt-2 flex flex-wrap gap-2">
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#0284c7" style="background-color: #0284c7;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#f97316" style="background-color: #f97316;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#16a34a" style="background-color: #16a34a;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#9333ea" style="background-color: #9333ea;"></span>
                                    </div>
                                </div>
                                <span asp-validation-for="AccentColor" class="form-error"></span>
                            </div>
                        </div>
                        
                        <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                            <h4 class="text-sm font-medium mb-3">QR Code Options</h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="text-xs text-gray-600 block mb-1">Foreground Color</label>
                                    <div class="flex">
                                        <input type="color" class="w-10 h-10 border border-gray-300 rounded-lg cursor-pointer" value="@(Model.QrFgColor ?? "#000000")" id="qr-fg-color">
                                        <input type="text" class="form-input ml-2 flex-grow text-sm" value="@(Model.QrFgColor ?? "#000000")" id="qr-fg-color-text">
                                    </div>
                                </div>
                                <div>
                                    <label class="text-xs text-gray-600 block mb-1">Background Color</label>
                                    <div class="flex">
                                        <input type="color" class="w-10 h-10 border border-gray-300 rounded-lg cursor-pointer" value="@(Model.QrBgColor ?? "#FFFFFF")" id="qr-bg-color">
                                        <input type="text" class="form-input ml-2 flex-grow text-sm" value="@(Model.QrBgColor ?? "#FFFFFF")" id="qr-bg-color-text">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="flex justify-between mt-6">
                            <button type="button" class="btn-secondary prev-step" data-prev="2">
                                <i class="fas fa-arrow-left mr-2"></i> Back to Details
                            </button>
                            <button type="submit" class="btn-primary">
                                <i class="fas fa-save mr-2"></i> Update Product
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="card-footer">
                    <div class="flex justify-between items-center">
                        <div class="text-sm text-gray-500">
                            <span class="text-red-500">*</span> Required fields
                        </div>
                        <div class="text-sm text-gray-500">
                            <span class="step-indicator">Step 1 of 3</span>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        
        <!-- Version History Panel -->
        <div class="card mt-6">
            <div class="card-header">
                <h3 class="font-bold text-gray-800 flex items-center">
                    <i class="fas fa-history text-primary-500 mr-2"></i> Edit History
                </h3>
            </div>
            <div class="card-body p-4">
                @if (ViewBag.History != null && ViewBag.History.Count > 0)
                {
                    <div class="space-y-4">
                        @foreach (var change in ViewBag.History)
                        {
                            <div class="flex items-start">
                                <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-500 flex-shrink-0">
                                    <i class="fas fa-pencil-alt"></i>
                                </div>
                                <div class="ml-4">
                                    <div class="text-sm font-medium text-gray-800">Changed on @change.ChangedAt.ToString("MMM dd, yyyy HH:mm")</div>
                                    <div class="text-xs text-gray-500 mt-1">Field: @change.FieldName</div>
                                    <div class="text-xs text-gray-500">From: @change.OldValue</div>
                                    <div class="text-xs text-gray-500">To: @change.NewValue</div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="flex items-start">
                        <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-500 flex-shrink-0">
                            <i class="fas fa-pencil-alt"></i>
                        </div>
                        <div class="ml-4">
                            <div class="text-sm font-medium text-gray-800">Last updated on @Model.UpdatedAt.ToString("MMM dd, yyyy HH:mm")</div>
                            <div class="text-xs text-gray-500 mt-1">No detailed history available</div>
                        </div>
                    </div>
                    <div class="flex items-start mt-4">
                        <div class="w-10 h-10 rounded-full bg-purple-100 flex items-center justify-center text-purple-500 flex-shrink-0">
                            <i class="fas fa-plus"></i>
                        </div>
                        <div class="ml-4">
                            <div class="text-sm font-medium text-gray-800">Created on @Model.CreatedAt.ToString("MMM dd, yyyy")</div>
                            <div class="text-xs text-gray-500 mt-1">Initial product information added</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- Preview Section (2 columns) -->
    <div class="lg:col-span-2">
        <div class="sticky top-6 space-y-4">
            <div class="flex justify-between items-center mb-2">
                <h3 class="text-lg font-bold text-gray-800 flex items-center">
                    <i class="fas fa-eye text-primary-500 mr-2"></i> Tag Preview
                </h3>
                <div class="preview-controls flex gap-2">
                    <button type="button" class="text-sm text-gray-600 hover:text-gray-800 flex items-center p-1 hover:bg-gray-100 rounded transition-colors" id="rotate-preview">
                        <i class="fas fa-sync-alt mr-1"></i> Rotate
                    </button>
                    <button type="button" class="text-sm text-gray-600 hover:text-gray-800 flex items-center p-1 hover:bg-gray-100 rounded transition-colors" id="zoom-preview">
                        <i class="fas fa-search-plus mr-1"></i> Zoom
                    </button>
                </div>
            </div>
            
            <div class="card shadow-lg transition-all duration-300" id="card-preview-container">
                <div class="card-flip-container">
                    <!-- Front of card -->
                    <div class="business-card card-side card-front" id="tag-preview" style="background-color: @Model.BackgroundColor; color: @Model.TextColor">
                        <div class="p-5 h-full flex flex-col">
                            <div class="mb-3">
                                <span id="preview-category" class="px-3 py-1 text-xs font-semibold rounded-full inline-block" style="background-color: @Model.AccentColor; color: #ffffff">
                                    @Model.Category
                                </span>
                                <h3 id="preview-name" class="text-xl font-bold mt-2" style="color: @Model.AccentColor">@Model.ProductName</h3>
                            </div>
                            
                            <!-- Enhanced custom fields section - now with 2 columns -->
                            <div class="border-t border-b border-gray-200 py-2 mb-3 overflow-y-auto max-h-32">
                                <h4 id="preview-fields-title" class="text-sm font-semibold mb-2" style="color: @Model.AccentColor">Product Fields:</h4>
                                <div id="preview-custom-fields" class="grid grid-cols-2 gap-x-2 gap-y-1 text-xs"></div>
                            </div>
                            
                            <div class="grid grid-cols-2 gap-x-3 gap-y-2 mt-auto text-sm">
                                <p class="flex items-center text-xs">
                                    <i class="fas fa-map-marker-alt mr-2" style="color: @Model.AccentColor"></i>
                                    <span class="font-medium">Location:</span>&nbsp;<span id="preview-location" class="truncate">@(string.IsNullOrEmpty(Model.Location) ? "Not specified" : Model.Location)</span>
                                </p>
                                <p class="flex items-center text-xs">
                                    <i class="fas fa-calendar-day mr-2" style="color: @Model.AccentColor"></i>
                                    <span class="font-medium">Made:</span>&nbsp;<span id="preview-mfgdate">@Model.ManufactureDate.ToString("MM/dd/yyyy")</span>
                                </p>
                                <p class="flex items-center warranty-preview text-xs">
                                    <i class="fas fa-shield-alt mr-2" style="color: @Model.AccentColor"></i>
                                    <span class="font-medium">Warranty:</span>&nbsp;<span id="preview-warranty">@Model.WarrantyExpiration.ToString("MM/dd/yyyy")</span>
                                </p>
                                <p class="flex items-center text-xs">
                                    <i class="fas fa-wrench mr-2" style="color: @Model.AccentColor"></i>
                                    <span class="font-medium">Maintenance:</span>&nbsp;<span id="preview-maintenance" class="truncate">@(string.IsNullOrEmpty(Model.MaintenanceInfo) ? "No info" : Model.MaintenanceInfo)</span>
                                </p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Back of card (QR Code) -->
                    <div class="business-card card-side card-back" style="background-color: @Model.BackgroundColor;">
                        <div class="p-6 h-full flex flex-col items-center justify-center">
                            <div class="qr-preview p-4 bg-white border border-gray-200 rounded-lg shadow-sm">
                                <div class="w-40 h-40 bg-white flex items-center justify-center rounded-lg shadow-inner" id="card-qr-code-display">
                                    <img src="@ViewBag.QrCodeImage" alt="QR Code" class="w-full h-full object-contain">
                                </div>
                                <p class="text-center text-sm mt-3 text-gray-700 font-medium" id="qr-product-name">@Model.ProductName</p>
                                <p class="text-center text-xs mt-1 text-gray-500">Scan for product details</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="grid grid-cols-1 gap-4">
                <div class="card p-4">
                    <h4 class="text-sm font-medium mb-3">QR Code Preview</h4>
                    <div class="flex justify-center">
                        <div class="qr-preview p-3 bg-white border border-gray-200 rounded-lg shadow-sm">
                            <div class="w-32 h-32 bg-white flex items-center justify-center">
                                <img src="@ViewBag.QrCodeImage" alt="QR Code" class="w-full h-full object-contain">
                            </div>
                            <p class="text-center text-xs mt-2 text-gray-500">Scan for product details</p>
                        </div>
                    </div>
                    <div class="flex justify-center mt-4">
                        <a id="download-qr" href="@Url.Action("DownloadQrCode", new { id = Model.Id })" class="text-sm text-primary-600 hover:text-primary-800 flex items-center">
                            <i class="fas fa-download mr-1"></i> Download QR Code
                        </a>
                    </div>
                </div>
                
                <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-info-circle text-blue-400"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-blue-800">Tips for effective product tags</h3>
                            <ul class="mt-2 text-sm text-blue-700 list-disc list-inside">
                                <li>Use clear, descriptive product names</li>
                                <li>Keep maintenance information concise and specific</li>
                                <li>Choose contrasting colors for better readability</li>
                                <li>Ensure accurate model and serial numbers</li>
                            </ul>
                        </div>
                    </div>
                </div>
                
                <!-- Version Comparison -->
                <div class="card overflow-hidden">
                    <div class="card-header">
                        <h3 class="font-bold text-gray-800 flex items-center">
                            <i class="fas fa-exchange-alt text-primary-500 mr-2"></i> Changes Preview
                        </h3>
                    </div>
                    <div class="border-b border-gray-100">
                        <div class="flex">
                            <div class="w-1/2 p-3 border-r border-gray-100">
                                <h4 class="text-sm font-medium text-gray-600">Original</h4>
                            </div>
                            <div class="w-1/2 p-3">
                                <h4 class="text-sm font-medium text-green-600">Updated</h4>
                            </div>
                        </div>
                    </div>
                    <div class="max-h-64 overflow-y-auto">
                        <div id="changes-container" class="text-sm">
                            <!-- Changes will be dynamically populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="fixed bottom-4 right-4 hidden transform transition-transform duration-300 z-50">
    <div class="bg-white rounded-lg shadow-lg border border-gray-100 p-4 max-w-md">
        <div class="flex items-center">
            <div id="toast-icon" class="flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-green-100">
                <i class="fas fa-check text-green-500"></i>
            </div>
            <div class="ml-3">
                <p id="toast-message" class="text-sm font-medium text-gray-900">Action successful!</p>
                <p id="toast-description" class="text-sm text-gray-500">Operation completed successfully.</p>
            </div>
            <button id="close-toast" class="ml-auto text-gray-400 hover:text-gray-500">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize all form components
            initializeSteps();
            initializeColorPickers();
            initializeCardLayouts();
            initializeImageUpload();
            updateTagPreview();
            initializeVersionComparison();
            initializeFieldVisibility();
            initializeQrCodeHandling();
            
            // Set color preview backgrounds to match model values
            document.getElementById('bg-color-preview').style.backgroundColor = '@Model.BackgroundColor';
            document.getElementById('text-color-preview').style.backgroundColor = '@Model.TextColor';
            document.getElementById('accent-color-preview').style.backgroundColor = '@Model.AccentColor';
            
            // Pre-fill character counter for product name
            if (document.getElementById('ProductName') && document.getElementById('name-counter')) {
                countChars(document.getElementById('ProductName'), 'name-counter', 100);
            }
            
            // Initialize QR code handling
            function initializeQrCodeHandling() {
                // Update QR code when product fields change
                document.getElementById('ProductName')?.addEventListener('input', generateQRCode);
                document.getElementById('Category')?.addEventListener('input', generateQRCode);
                
                // Set up event listeners for QR code color inputs
                const qrFgColor = document.getElementById('qr-fg-color');
                const qrFgColorText = document.getElementById('qr-fg-color-text');
                const qrBgColor = document.getElementById('qr-bg-color');
                const qrBgColorText = document.getElementById('qr-bg-color-text');
                
                if (qrFgColor && qrFgColorText) {
                    qrFgColor.addEventListener('input', function() {
                        qrFgColorText.value = this.value;
                        updateQrColors();
                        generateQRCode();
                    });
                    
                    qrFgColorText.addEventListener('input', function() {
                        qrFgColor.value = this.value;
                        updateQrColors();
                        generateQRCode();
                    });
                }
                
                if (qrBgColor && qrBgColorText) {
                    qrBgColor.addEventListener('input', function() {
                        qrBgColorText.value = this.value;
                        updateQrColors();
                        generateQRCode();
                    });
                    
                    qrBgColorText.addEventListener('input', function() {
                        qrBgColor.value = this.value;
                        updateQrColors();
                        generateQRCode();
                    });
                }
                
                // Generate initial QR code
                setTimeout(generateQRCode, 300);
            }
            
            // Function to process custom fields before form submission
            function processCustomFields() {
                const customFields = {};
                const customInputs = document.querySelectorAll('[name^="custom-"]');
                
                customInputs.forEach(input => {
                    if (input.value) {
                        const fieldName = input.name.replace('custom-', '');
                        customFields[fieldName] = input.value;
                    }
                });
                
                // Update CustomFieldsData hidden input
                if (Object.keys(customFields).length > 0) {
                    document.getElementById('customFieldsDataHidden').value = JSON.stringify(customFields);
                }
            }
            
            // Initialize field visibility based on category
            function initializeFieldVisibility() {
                const category = document.getElementById('Category')?.value;
                if (category) {
                    updateFieldVisibility(category);
                }
            }
            
            // Update field visibility based on category
            function updateFieldVisibility(category) {
                const categoryValue = category.toLowerCase();
                
                // Hide all category-specific field groups
                const fieldGroups = document.querySelectorAll('.field-group');
                fieldGroups.forEach(field => {
                    field.style.display = 'none';
                });
                
                // Show category-specific fields
                fieldGroups.forEach(field => {
                    const fieldClass = field.classList[1];
                    if (fieldClass && fieldClass.includes(categoryValue)) {
                        field.style.display = 'block';
                    }
                });
                
                // Handle special category cases
                switch(categoryValue) {
                    case 'chemical':
                    case 'rust coating chemical':
                        document.querySelectorAll('.chemical-field').forEach(el => el.style.display = 'block');
                        break;
                    case 'design':
                    case 'design asset':
                        document.querySelectorAll('.design-field').forEach(el => el.style.display = 'block');
                        
                        // Update warranty label for design assets
                        const warrantyLabel = document.querySelector('.warranty-label');
                        const warrantyPreview = document.querySelector('.warranty-preview .font-medium');
                        
                        if (warrantyLabel) {
                            warrantyLabel.innerHTML = 'License Expiration <span class="text-red-500 ml-1">*</span>';
                        }
                        if (warrantyPreview) {
                            warrantyPreview.textContent = 'License Until:';
                        }
                        break;
                    default:
                        // Reset warranty label for other categories
                        const defaultWarrantyLabel = document.querySelector('.warranty-label');
                        const defaultWarrantyPreview = document.querySelector('.warranty-preview .font-medium');
                        
                        if (defaultWarrantyLabel) {
                            defaultWarrantyLabel.innerHTML = 'Warranty Until <span class="text-red-500 ml-1">*</span>';
                        }
                        if (defaultWarrantyPreview) {
                            defaultWarrantyPreview.textContent = 'Warranty Until:';
                        }
                        break;
                }
                
                // Update preview to reflect changes
                updateTagPreview();
            }
            
            // Function to update QR colors in hidden fields
            function updateQrColors() {
                const qrFgColorValue = document.getElementById('qr-fg-color')?.value || '#000000';
                const qrBgColorValue = document.getElementById('qr-bg-color')?.value || '#FFFFFF';
                
                const qrFgColorHidden = document.getElementById('qrFgColorHidden');
                const qrBgColorHidden = document.getElementById('qrBgColorHidden');
                
                if (qrFgColorHidden) qrFgColorHidden.value = qrFgColorValue;
                if (qrBgColorHidden) qrBgColorHidden.value = qrBgColorValue;
            }
            
            // Step navigation
            function initializeSteps() {
                const steps = document.querySelectorAll('.step');
                const formSections = document.querySelectorAll('.form-section');
                const nextButtons = document.querySelectorAll('.next-step');
                const prevButtons = document.querySelectorAll('.prev-step');
                const stepIndicator = document.querySelector('.step-indicator');
                const progressBars = document.querySelectorAll('.step-progress');
                
                // Update step indicator text
                function updateStepIndicator(currentStep) {
                    if (stepIndicator) {
                        stepIndicator.textContent = `Step ${currentStep} of 3`;
                    }
                }
                
                // Update progress bars
                function updateProgressBars(currentStep) {
                    if (progressBars.length >= 2) {
                        if (currentStep >= 2) {
                            progressBars[0].style.width = '100%';
                        } else {
                            progressBars[0].style.width = '0%';
                        }
                        
                        if (currentStep >= 3) {
                            progressBars[1].style.width = '100%';
                        } else {
                            progressBars[1].style.width = '0%';
                        }
                    }
                }
                
                // Navigate to step
                function goToStep(stepNumber) {
                    // Hide all sections
                    formSections.forEach(section => section.classList.add('hidden'));
                    
                    // Show selected section
                    const targetSection = document.querySelector(`.form-section[data-step="${stepNumber}"]`);
                    if (targetSection) {
                        targetSection.classList.remove('hidden');
                    }
                    
                    // Update step indicators
                    steps.forEach(step => {
                        const stepNum = parseInt(step.getAttribute('data-step'));
                        step.classList.remove('active');
                        
                        const stepCircle = step.querySelector('.step-circle');
                        if (stepCircle) {
                            stepCircle.classList.remove('bg-primary-600', 'text-white');
                            stepCircle.classList.add('bg-gray-200', 'text-gray-600');
                        }
                        
                        if (stepNum <= stepNumber) {
                            step.classList.add('active');
                            if (stepCircle) {
                                stepCircle.classList.remove('bg-gray-200', 'text-gray-600');
                                stepCircle.classList.add('bg-primary-600', 'text-white');
                            }
                        }
                    });
                    
                    updateStepIndicator(stepNumber);
                    updateProgressBars(stepNumber);
                    
                    // Scroll to top of form
                    const formTop = document.getElementById('product-form').getBoundingClientRect().top + window.pageYOffset - 100;
                    window.scrollTo({top: formTop, behavior: 'smooth'});
                }
                
                // Make goToStep globally available
                window.goToStep = goToStep;
                
                // Next step buttons
                nextButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        const nextStep = parseInt(this.getAttribute('data-next'));
                        if (validateStep(nextStep - 1)) {
                            goToStep(nextStep);
                        }
                    });
                });
                
                // Previous step buttons
                prevButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        const prevStep = parseInt(this.getAttribute('data-prev'));
                        goToStep(prevStep);
                    });
                });
                
                // Step circle clicks
                steps.forEach(step => {
                    step.addEventListener('click', function() {
                        const targetStep = parseInt(this.getAttribute('data-step'));
                        const currentStepNum = getCurrentStep();
                        
                        // Only allow clicking on previous steps or the next step
                        if (targetStep <= currentStepNum || targetStep === currentStepNum + 1) {
                            if (targetStep > currentStepNum && !validateStep(currentStepNum)) {
                                return; // Don't proceed if current step isn't valid
                            }
                            goToStep(targetStep);
                        }
                    });
                });
                
                // Get current step
                function getCurrentStep() {
                    const visibleSection = document.querySelector('.form-section:not(.hidden)');
                    return visibleSection ? parseInt(visibleSection.getAttribute('data-step')) : 1;
                }
                
                // Validate step before proceeding
                function validateStep(stepNumber) {
                    let isValid = true;
                    
                    if (stepNumber === 1) {
                        // Validate required fields in step 1
                        const requiredFields = document.querySelectorAll('.form-section[data-step="1"] [required]');
                        requiredFields.forEach(field => {
                            if (!field.value.trim()) {
                                isValid = false;
                                field.classList.add('border-red-500');
                                
                                // Show validation error
                                const errorSpan = field.parentNode.nextElementSibling;
                                if (errorSpan && errorSpan.classList.contains('form-error')) {
                                    errorSpan.textContent = 'This field is required';
                                }
                            }
                        });
                        
                        if (!isValid) {
                            // Focus first invalid field
                            const firstInvalid = document.querySelector('.form-section[data-step="1"] .border-red-500');
                            if (firstInvalid) {
                                firstInvalid.focus();
                            }
                            
                            // Show notification
                            showNotification('Please fill in all required fields in step 1', 'error');
                        }
                    }
                    
                    if (stepNumber === 2) {
                        // Validate required fields in step 2
                        const requiredFields = document.querySelectorAll('.form-section[data-step="2"] [required]');
                        requiredFields.forEach(field => {
                            if (!field.value.trim()) {
                                isValid = false;
                                field.classList.add('border-red-500');
                                
                                // Show validation error
                                const errorSpan = field.parentNode.nextElementSibling;
                                if (errorSpan && errorSpan.classList.contains('form-error')) {
                                    errorSpan.textContent = 'This field is required';
                                }
                            }
                        });
                        
                        if (!isValid) {
                            // Focus first invalid field
                            const firstInvalid = document.querySelector('.form-section[data-step="2"] .border-red-500');
                            if (firstInvalid) {
                                firstInvalid.focus();
                            }
                            
                            // Show notification
                            showNotification('Please fill in all required fields in step 2', 'error');
                        }
                    }
                    
                    return isValid;
                }
            }
            
            // Initialize color pickers
            function initializeColorPickers() {
                // Background color
                const bgColorPicker = document.getElementById('bg-color-picker');
                const bgColorText = document.getElementById('BackgroundColor');
                const bgColorPreview = document.getElementById('bg-color-preview');
                
                // For the color picker that's hidden, we need to handle the preview div click
                bgColorPreview.addEventListener('click', function() {
                    bgColorPicker.click();
                });
                
                bgColorPicker.addEventListener('input', function() {
                    bgColorText.value = this.value;
                    bgColorPreview.style.backgroundColor = this.value;
                    updateTagPreview();
                });
                
                bgColorText.addEventListener('input', function() {
                    try {
                        bgColorPicker.value = this.value;
                        bgColorPreview.style.backgroundColor = this.value;
                        updateTagPreview();
                    } catch (e) {
                        // Invalid color value, ignore
                    }
                });
                
                // Text color
                const textColorPicker = document.getElementById('text-color-picker');
                const textColorText = document.getElementById('TextColor');
                const textColorPreview = document.getElementById('text-color-preview');
                
                textColorPreview.addEventListener('click', function() {
                    textColorPicker.click();
                });
                
                textColorPicker.addEventListener('input', function() {
                    textColorText.value = this.value;
                    textColorPreview.style.backgroundColor = this.value;
                    updateTagPreview();
                });
                
                textColorText.addEventListener('input', function() {
                    try {
                        textColorPicker.value = this.value;
                        textColorPreview.style.backgroundColor = this.value;
                        updateTagPreview();
                    } catch (e) {
                        // Invalid color value, ignore
                    }
                });
                
                // Accent color
                const accentColorPicker = document.getElementById('accent-color-picker');
                const accentColorText = document.getElementById('AccentColor');
                const accentColorPreview = document.getElementById('accent-color-preview');
                
                accentColorPreview.addEventListener('click', function() {
                    accentColorPicker.click();
                });
                
                accentColorPicker.addEventListener('input', function() {
                    accentColorText.value = this.value;
                    accentColorPreview.style.backgroundColor = this.value;
                    updateTagPreview();
                });
                
                accentColorText.addEventListener('input', function() {
                    try {
                        accentColorPicker.value = this.value;
                        accentColorPreview.style.backgroundColor = this.value;
                        updateTagPreview();
                    } catch (e) {
                        // Invalid color value, ignore
                    }
                });
                
                // Color presets
                document.querySelectorAll('.color-preset').forEach(preset => {
                    preset.addEventListener('click', function() {
                        const color = this.getAttribute('data-color');
                        const parent = this.closest('.color-picker-wrapper');
                        
                        if (parent) {
                            const colorInput = parent.querySelector('input[type="color"]');
                            const textInput = parent.querySelector('input[type="text"]');
                            const colorPreview = parent.querySelector('.color-preview');
                            
                            if (colorInput && textInput) {
                                colorInput.value = color;
                                textInput.value = color;
                                
                                if (colorPreview) {
                                    colorPreview.style.backgroundColor = color;
                                }
                                
                                // Trigger change event
                                textInput.dispatchEvent(new Event('input'));
                            }
                        }
                    });
                });
            }
            
            // Initialize card layouts
            function initializeCardLayouts() {
                const layoutOptions = document.querySelectorAll('.layout-option');
                
                layoutOptions.forEach(option => {
                    option.addEventListener('click', function() {
                        // Remove active class from all options
                        layoutOptions.forEach(opt => opt.classList.remove('border-primary-500', 'active'));
                        
                        // Add active class to selected option
                        this.classList.add('border-primary-500', 'active');
                        
                        // Get layout type
                        const layoutType = this.getAttribute('data-layout');
                        
                        // Update hidden input value to save the selection
                        document.getElementById('selected-layout').value = layoutType;
                        
                        // Update preview
                        updateCardLayout(layoutType);
                    });
                });
                
                // Preview controls
                const rotatePreviewBtn = document.getElementById('rotate-preview');
                const zoomPreviewBtn = document.getElementById('zoom-preview');
                const cardFlipContainer = document.querySelector('.card-flip-container');
                const cardPreviewContainer = document.getElementById('card-preview-container');
                
                if (rotatePreviewBtn && cardFlipContainer) {
                    rotatePreviewBtn.addEventListener('click', function() {
                        cardFlipContainer.classList.toggle('flipped');
                    });
                    
                    // Also add click functionality to the card itself for easier flipping
                    if (cardPreviewContainer) {
                        cardPreviewContainer.addEventListener('click', function(e) {
                            // Don't flip if clicking rotate button (to prevent double toggling)
                            if (!e.target.closest('#rotate-preview')) {
                                cardFlipContainer.classList.toggle('flipped');
                            }
                        });
                    }
                }
                
                if (zoomPreviewBtn && cardPreviewContainer) {
                    zoomPreviewBtn.addEventListener('click', function() {
                        cardPreviewContainer.classList.toggle('scale-110');
                    });
                }
            }
            
            // Apply layout to preview
            function updateCardLayout(layoutType) {
                const preview = document.getElementById('tag-preview');
                if (!preview) return;
                
                // Reset classes
                preview.className = 'business-card card-side card-front';
                
                // Apply layout specific classes
                if (layoutType === 'modern') {
                    // Modern layout with header bar
                    const content = preview.querySelector('div');
                    if (content) {
                        content.className = 'h-full flex flex-col';
                        content.innerHTML = `
                            <div class="h-8 w-full rounded-t-lg" style="background-color: ${document.getElementById('AccentColor').value}"></div>
                            <div class="p-4 flex flex-col flex-grow">
                                <h3 id="preview-name" class="text-xl font-bold" style="color: ${document.getElementById('AccentColor').value}">${document.getElementById('ProductName').value || 'Product Name'}</h3>
                                <div class="flex items-center space-x-2 mt-1 text-sm">
                                    <span class="font-semibold">Model:</span>
                                    <span id="preview-model">${document.getElementById('ModelNumber').value || 'MODEL-XXX'}</span>
                                </div>
                                <div class="space-y-2 mt-auto text-sm">
                                    <p class="flex items-center">
                                        <i class="fas fa-map-marker-alt mr-3" style="color: ${document.getElementById('AccentColor').value}"></i>
                                        <span class="font-medium">Location:</span>&nbsp;<span id="preview-location">${document.getElementById('Location').value || 'Storage Location'}</span>
                                    </p>
                                    <p class="flex items-center">
                                        <i class="fas fa-calendar-check mr-3" style="color: ${document.getElementById('AccentColor').value}"></i>
                                        <span class="font-medium">Warranty:</span>&nbsp;<span id="preview-warranty">${formatDate(document.getElementById('WarrantyExpiration').value) || 'Jan 1, 2026'}</span>
                                    </p>
                                </div>
                            </div>
                        `;
                    }
                } else if (layoutType === 'compact') {
                    // Compact layout with side QR
                    const content = preview.querySelector('div');
                    if (content) {
                        content.className = 'h-full flex';
                        content.innerHTML = `
                            <div class="flex-grow p-4">
                                <span id="preview-category" class="px-2 py-1 text-xs font-semibold rounded-full" style="background-color: ${document.getElementById('AccentColor').value}; color: ${document.getElementById('BackgroundColor').value}">
                                    ${document.getElementById('Category').value || 'Product Category'}
                                </span>
                                <h3 id="preview-name" class="text-lg font-bold mt-2" style="color: ${document.getElementById('AccentColor').value}">${document.getElementById('ProductName').value || 'Product Name'}</h3>
                                <div class="space-y-1 mt-3 text-xs">
                                    <p class="flex items-center">
                                        <i class="fas fa-tag mr-2" style="color: ${document.getElementById('AccentColor').value}"></i>
                                        ${document.getElementById('ModelNumber').value || 'MODEL-XXX'}
                                    </p>
                                    <p class="flex items-center">
                                        <i class="fas fa-fingerprint mr-2" style="color: ${document.getElementById('AccentColor').value}"></i>
                                        ${document.getElementById('SerialNumber').value || 'SN12345'}
                                    </p>
                                    <p class="flex items-center">
                                        <i class="fas fa-map-marker-alt mr-2" style="color: ${document.getElementById('AccentColor').value}"></i>
                                        ${document.getElementById('Location').value || 'Storage Location'}
                                    </p>
                                </div>
                            </div>
                            <div class="w-1/3 bg-gray-50 rounded-r-lg flex items-center justify-center">
                                <div class="text-center">
                                    <div class="w-16 h-16 mx-auto bg-white p-1 rounded shadow-sm flex items-center justify-center">
                                        <i class="fas fa-qrcode text-2xl text-gray-400"></i>
                                    </div>
                                    <p class="text-xs mt-1">Scan</p>
                                </div>
                            </div>
                        `;
                    }
                } else {
                    // Standard layout
                    updateTagPreview();
                }
            }
            
            // Initialize image upload
            function initializeImageUpload() {
                const dropzone = document.getElementById('dropzone');
                const fileInput = document.getElementById('product-image');
                const imagePreview = document.getElementById('image-preview');
                const previewImage = imagePreview.querySelector('img');
                const previewFilename = imagePreview.querySelector('.filename');
                const removeImageBtn = document.getElementById('remove-image');
                
                // Open file dialog when clicking on dropzone
                dropzone.addEventListener('click', function() {
                    fileInput.click();
                });
                
                // Handle file selection
                fileInput.addEventListener('change', function() {
                    if (this.files && this.files[0]) {
                        const file = this.files[0];
                        
                        // Check file type and size
                        if (!file.type.match('image.*')) {
                            showNotification('Please select an image file', 'error');
                            return;
                        }
                        
                        if (file.size > 5 * 1024 * 1024) { // 5MB limit
                            showNotification('Image must be less than 5MB', 'error');
                            return;
                        }
                        
                        // Show preview
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            previewImage.src = e.target.result;
                            previewFilename.textContent = file.name;
                            imagePreview.classList.remove('hidden');
                            dropzone.classList.add('border-primary-400', 'border-opacity-20', 'bg-primary-50', 'bg-opacity-30');
                        };
                        reader.readAsDataURL(file);
                    }
                });
                
                // Handle drag and drop
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    dropzone.addEventListener(eventName, function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                    });
                });
                
                // Highlight dropzone on drag over
                ['dragenter', 'dragover'].forEach(eventName => {
                    dropzone.addEventListener(eventName, function() {
                        this.classList.add('border-primary-400', 'border-opacity-50', 'bg-primary-50');
                    });
                });
                
                // Remove highlight on drag leave
                ['dragleave', 'drop'].forEach(eventName => {
                    dropzone.addEventListener(eventName, function() {
                        this.classList.remove('border-primary-400', 'border-opacity-50', 'bg-primary-50');
                    });
                });
                
                // Handle file drop
                dropzone.addEventListener('drop', function(e) {
                    const files = e.dataTransfer.files;
                    
                    if (files && files[0]) {
                        const file = files[0];
                        
                        // Check file type and size
                        if (!file.type.match('image.*')) {
                            showNotification('Please select an image file', 'error');
                            return;
                        }
                        
                        if (file.size > 5 * 1024 * 1024) { // 5MB limit
                            showNotification('Image must be less than 5MB', 'error');
                            return;
                        }
                        
                        // Update file input
                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(file);
                        fileInput.files = dataTransfer.files;
                        
                        // Show preview
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            previewImage.src = e.target.result;
                            previewFilename.textContent = file.name;
                            imagePreview.classList.remove('hidden');
                            dropzone.classList.add('border-primary-400', 'border-opacity-20', 'bg-primary-50', 'bg-opacity-30');
                        };
                        reader.readAsDataURL(file);
                    }
                });
                
                // Remove image
                removeImageBtn.addEventListener('click', function() {
                    fileInput.value = '';
                    previewImage.src = '';
                    previewFilename.textContent = '';
                    imagePreview.classList.add('hidden');
                    dropzone.classList.remove('border-primary-400', 'border-opacity-20', 'bg-primary-50', 'bg-opacity-30');
                });
            }
            
            // Update tag preview based on form values
            function updateTagPreview() {
                const preview = document.getElementById('tag-preview');
                const previewName = document.getElementById('preview-name');
                const previewCategory = document.getElementById('preview-category');
                const previewLocation = document.getElementById('preview-location');
                const previewMfgDate = document.getElementById('preview-mfgdate');
                const previewWarranty = document.getElementById('preview-warranty');
                const previewMaintenance = document.getElementById('preview-maintenance');
                const previewCustomFields = document.getElementById('preview-custom-fields');
                const previewFieldsTitle = document.getElementById('preview-fields-title');
                
                if (!preview || !previewName || !previewCategory) {
                    console.error("Preview elements not found");
                    return;
                }
                
                // Update colors
                const bgColor = document.getElementById('BackgroundColor')?.value || '@Model.BackgroundColor';
                const textColor = document.getElementById('TextColor')?.value || '@Model.TextColor';
                const accentColor = document.getElementById('AccentColor')?.value || '@Model.AccentColor';
                
                preview.style.backgroundColor = bgColor;
                preview.style.color = textColor;
                previewName.style.color = accentColor;
                previewCategory.style.backgroundColor = accentColor;
                previewCategory.style.color = '#ffffff'; // Set text color to white for better readability
                
                // Update Product Fields title color
                if (previewFieldsTitle) {
                    previewFieldsTitle.style.color = accentColor;
                }
                
                document.querySelectorAll('#tag-preview i').forEach(icon => {
                    icon.style.color = accentColor;
                });
                
                // Update back of card background
                const cardBack = document.querySelector('.card-back');
                if (cardBack) {
                    cardBack.style.backgroundColor = bgColor;
                }
                
                // Update content
                const productName = document.getElementById('ProductName');
                if (productName) {
                    previewName.textContent = productName.value || "Product Name";
                    
                    // Update QR product name
                    const qrProductName = document.getElementById('qr-product-name');
                    if (qrProductName) {
                        qrProductName.textContent = productName.value || "Product Name";
                    }
                }
                
                const category = document.getElementById('Category');
                if (category) {
                    previewCategory.textContent = category.value || "Category";
                }
                
                const location = document.getElementById('Location');
                if (location) {
                    previewLocation.textContent = location.value || "Not specified";
                }
                
                const mfgDate = document.getElementById('ManufactureDate');
                if (mfgDate && mfgDate.value) {
                    previewMfgDate.textContent = new Date(mfgDate.value).toLocaleDateString();
                }
                
                const warranty = document.getElementById('WarrantyExpiration');
                if (warranty && warranty.value) {
                    previewWarranty.textContent = new Date(warranty.value).toLocaleDateString();
                }
                
                const maintenance = document.getElementById('MaintenanceInfo');
                if (maintenance) {
                    previewMaintenance.textContent = maintenance.value ? 
                        (maintenance.value.length > 15 ? maintenance.value.substring(0, 15) + '...' : maintenance.value) : 
                        "No info";
                }
                
                // Update custom fields
                if (previewCustomFields) {
                    previewCustomFields.innerHTML = '';
                    
                    // Process any template/custom fields
                    const customInputs = document.querySelectorAll('[id^="custom-"], [name^="custom-"]');
                    const processedIds = new Set();
                    
                    customInputs.forEach(input => {
                        if (input.value && !processedIds.has(input.id)) {
                            processedIds.add(input.id);
                            
                            let fieldName = input.id.replace('custom-', '')
                                          .split('-')
                                          .map(part => part.charAt(0).toUpperCase() + part.slice(1))
                                          .join(' ');
                            
                            const formGroup = input.closest('.form-group');
                            let fieldIcon = 'tag';
                            if (formGroup) {
                                const label = formGroup.querySelector('label');
                                if (label) {
                                    fieldName = label.textContent.split('*')[0].trim();
                                }
                                
                                const iconElement = formGroup.querySelector('.fas');
                                if (iconElement) {
                                    const iconClass = iconElement.className.replace('fas fa-', '');
                                    fieldIcon = iconClass.split(' ')[0];
                                }
                            }
                            
                            // Create field element
                            const fieldElement = document.createElement('div');
                            fieldElement.className = 'flex items-center py-0.5 border-b border-gray-100 last:border-0 text-xs';
                            fieldElement.innerHTML = `
                                <i class="fas fa-${fieldIcon} mr-1" style="color: ${accentColor}; width: 12px; font-size: 10px;"></i>
                                <span class="font-medium mr-1">${fieldName}:</span>
                                <span class="truncate">${input.value}</span>
                            `;
                            
                            previewCustomFields.appendChild(fieldElement);
                        }
                    });
                    
                    // Show/hide the fields section based on content
                    const fieldSection = previewCustomFields.closest('.border-t.border-b');
                    if (fieldSection) {
                        fieldSection.style.display = previewCustomFields.children.length > 0 ? 'block' : 'none';
                    }
                }
            }
            
            // Generate QR Code
            function generateQRCode() {
                const qrElement = document.getElementById('card-qr-code-display');
                if (!qrElement) {
                    console.error('QR code container not found');
                    return;
                }
                
                // Clear any existing QR code
                qrElement.innerHTML = '';
                
                const productName = document.getElementById('ProductName').value || '@Model.ProductName';
                const category = document.getElementById('Category').value || '@Model.Category';
                const productId = document.getElementById('Id').value || '@Model.Id';
                const qrFgColor = document.getElementById('qr-fg-color').value || '@(Model.QrFgColor ?? "#000000")';
                const qrBgColor = document.getElementById('qr-bg-color').value || '@(Model.QrBgColor ?? "#FFFFFF")';
                
                // Update QR product name on back of card
                const qrProductNameElement = document.getElementById('qr-product-name');
                if (qrProductNameElement) {
                    qrProductNameElement.textContent = productName;
                }
                
                // Enhanced QR code data with more fields for better scanning
                const qrData = `PRODUCT:${productName}:CAT:${category}:ID:${productId}`;
                
                try {
                    // Make sure QRCode is defined
                    if (typeof QRCode === 'undefined' || !QRCode) {
                        throw new Error('QRCode library not loaded');
                    }
                    
                    // Create new QR Code
                    new QRCode(qrElement, {
                        text: qrData,
                        width: 160,
                        height: 160,
                        colorDark: qrFgColor,
                        colorLight: qrBgColor,
                        correctLevel: QRCode.CorrectLevel.H
                    });
                    
                    // Force element to be visible
                    qrElement.style.display = 'block';
                } catch (error) {
                    console.error('Error generating QR code:', error);
                    
                    // Create a more visible error/fallback display
                    qrElement.innerHTML = `
                        <div style="width:160px;height:160px;display:flex;flex-direction:column;align-items:center;justify-center;border:1px solid #e5e7eb;background:#f8fafc;padding:8px;">
                            <i class="fas fa-qrcode text-gray-400" style="font-size:48px;margin-bottom:8px;"></i>
                            <div style="font-size:12px;color:#6b7280;text-align:center;">QR Code Preview<br/>for ${productName}</div>
                        </div>
                    `;
                }
            }
            
            // Initialize Version Comparison
            function initializeVersionComparison() {
                const changesContainer = document.getElementById('changes-container');
                if (changesContainer) {
                    // Example changes - in a real app, you would fetch original values from the server
                    const originalValues = {
                        ProductName: '@Model.ProductName',
                        Category: '@Model.Category',
                        Manufacturer: '@Model.Manufacturer',
                        ModelNumber: '@Model.ModelNumber',
                        SerialNumber: '@Model.SerialNumber',
                        Location: '@Model.Location',
                        MaintenanceInfo: '@(string.IsNullOrEmpty(Model.MaintenanceInfo) ? "None specified" : Model.MaintenanceInfo)',
                        ManufactureDate: '@Model.ManufactureDate.ToString("yyyy-MM-dd")',
                        PurchaseDate: '@Model.PurchaseDate.ToString("yyyy-MM-dd")',
                        WarrantyExpiration: '@Model.WarrantyExpiration.ToString("yyyy-MM-dd")',
                        BackgroundColor: '@Model.BackgroundColor',
                        TextColor: '@Model.TextColor',
                        AccentColor: '@Model.AccentColor'
                    };
                    
                    // Store original values for comparison
                    window.originalValues = originalValues;
                    
                    // Initial update
                    updateChangesComparison();
                }
                
                // Download QR code
                const downloadQrBtn = document.getElementById('download-qr');
                if (downloadQrBtn) {
                    downloadQrBtn.addEventListener('click', function(e) {
                        showNotification('QR Code download started', 'success');
                    });
                }
            }
            
            // Update changes comparison
            function updateChangesComparison() {
                const changesContainer = document.getElementById('changes-container');
                if (!changesContainer || !window.originalValues) return;
                
                // Get current values
                const currentValues = {
                    ProductName: document.getElementById('ProductName').value,
                    Category: document.getElementById('Category').value,
                    Manufacturer: document.getElementById('Manufacturer').value,
                    ModelNumber: document.getElementById('ModelNumber').value,
                    SerialNumber: document.getElementById('SerialNumber').value,
                    Location: document.getElementById('Location').value,
                    MaintenanceInfo: document.getElementById('MaintenanceInfo').value,
                    ManufactureDate: document.getElementById('ManufactureDate').value,
                    PurchaseDate: document.getElementById('PurchaseDate').value,
                    WarrantyExpiration: document.getElementById('WarrantyExpiration').value,
                    BackgroundColor: document.getElementById('BackgroundColor').value,
                    TextColor: document.getElementById('TextColor').value,
                    AccentColor: document.getElementById('AccentColor').value
                };
                
                // Clear container
                changesContainer.innerHTML = '';
                
                // Compare and show differences
                let changesFound = false;
                
                for (const [key, originalValue] of Object.entries(window.originalValues)) {
                    const currentValue = currentValues[key];
                    
                    if (currentValue !== originalValue) {
                        changesFound = true;
                        
                        // Create comparison row
                        const row = document.createElement('div');
                        row.className = 'flex border-b border-gray-100';
                        
                        // Original value side
                        const originalSide = document.createElement('div');
                        originalSide.className = 'w-1/2 p-3 border-r border-gray-100';
                        
                        // Format the display label
                        let displayLabel = key.replace(/([A-Z])/g, ' $1').trim();
                        
                        if (key.includes('Color')) {
                            // For color fields, show color preview
                            originalSide.innerHTML = `
                                <div class="font-medium text-xs text-gray-500">${displayLabel}</div>
                                <div class="flex items-center mt-1">
                                    <div class="w-4 h-4 rounded mr-2" style="background-color: ${originalValue}"></div>
                                    <span>${originalValue}</span>
                                </div>
                            `;
                        } else if (key.includes('Date')) {
                            // For date fields, format nicely
                            originalSide.innerHTML = `
                                <div class="font-medium text-xs text-gray-500">${displayLabel}</div>
                                <div>${formatDate(originalValue)}</div>
                            `;
                        } else {
                            // Regular fields
                            originalSide.innerHTML = `
                                <div class="font-medium text-xs text-gray-500">${displayLabel}</div>
                                <div>${originalValue}</div>
                            `;
                        }
                        
                        // Current value side
                        const currentSide = document.createElement('div');
                        currentSide.className = 'w-1/2 p-3 bg-green-50';
                        
                        if (key.includes('Color')) {
                            // For color fields, show color preview
                            currentSide.innerHTML = `
                                <div class="font-medium text-xs text-green-500">${displayLabel}</div>
                                <div class="flex items-center mt-1">
                                    <div class="w-4 h-4 rounded mr-2" style="background-color: ${currentValue}"></div>
                                    <span>${currentValue}</span>
                                </div>
                            `;
                        } else if (key.includes('Date')) {
                            // For date fields, format nicely
                            currentSide.innerHTML = `
                                <div class="font-medium text-xs text-green-500">${displayLabel}</div>
                                <div>${formatDate(currentValue)}</div>
                            `;
                        } else {
                            // Regular fields
                            currentSide.innerHTML = `
                                <div class="font-medium text-xs text-green-500">${displayLabel}</div>
                                <div>${currentValue}</div>
                            `;
                        }
                        
                        row.appendChild(originalSide);
                        row.appendChild(currentSide);
                        changesContainer.appendChild(row);
                    }
                }
                
                // If no changes found
                if (!changesFound) {
                    changesContainer.innerHTML = `
                        <div class="flex p-4 text-center">
                            <div class="w-full text-gray-500">
                                <i class="fas fa-info-circle mr-2"></i>
                                No changes detected yet
                            </div>
                        </div>
                        `;
                }
            }
            
            // Form submission handling
            document.getElementById('product-form').addEventListener('submit', function(e) {
                // Process custom fields before submission
                processCustomFields();
                
                // Update QR colors before submission
                updateQrColors();
                
                // Validate form
                const isValid = validateForm();
                if (!isValid) {
                    e.preventDefault();
                    return false;
                }
                
                // Show saving indicator
                const submitButton = this.querySelector('button[type="submit"]');
                if (submitButton) {
                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Saving Changes...';
                    submitButton.disabled = true;
                }
            });
            
            // Validate entire form
            function validateForm() {
                let isValid = true;
                
                // Check all visible required fields
                const requiredFields = document.querySelectorAll('[required]:not(.hidden)');
                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        field.classList.add('border-red-500');
                        isValid = false;
                        
                        // Show validation error
                        const errorSpan = field.parentNode.nextElementSibling;
                        if (errorSpan && errorSpan.classList.contains('form-error')) {
                            errorSpan.textContent = 'This field is required';
                        }
                    } else {
                        field.classList.remove('border-red-500');
                        
                        // Clear validation error
                        const errorSpan = field.parentNode.nextElementSibling;
                        if (errorSpan && errorSpan.classList.contains('form-error')) {
                            errorSpan.textContent = '';
                        }
                    }
                });
                
                if (!isValid) {
                    // Find which step has errors
                    let stepWithError = 1;
                    const step1Errors = document.querySelectorAll('.form-section[data-step="1"] .border-red-500').length > 0;
                    const step2Errors = document.querySelectorAll('.form-section[data-step="2"] .border-red-500').length > 0;
                    const step3Errors = document.querySelectorAll('.form-section[data-step="3"] .border-red-500').length > 0;
                    
                    if (step1Errors) {
                        stepWithError = 1;
                    } else if (step2Errors) {
                        stepWithError = 2;
                    } else if (step3Errors) {
                        stepWithError = 3;
                    }
                    
                    // Go to the step with errors
                    goToStep(stepWithError);
                    
                    // Focus first invalid field
                    const firstInvalid = document.querySelector(`.form-section[data-step="${stepWithError}"] .border-red-500`);
                    if (firstInvalid) {
                        firstInvalid.focus();
                    }
                    
                    showNotification('Please fill in all required fields', 'error');
                }
                
                return isValid;
            }
            
            // Character counter for text inputs
            window.countChars = function(input, counterId, maxLength) {
                const counter = document.getElementById(counterId);
                if (counter) {
                    counter.textContent = `${input.value.length}/${maxLength}`;
                    
                    // Apply color coding based on length
                    if (input.value.length > maxLength * 0.8) {
                        counter.classList.add('text-orange-500');
                    } else {
                        counter.classList.remove('text-orange-500');
                    }
                    
                    if (input.value.length >= maxLength) {
                        counter.classList.add('text-red-500');
                        counter.classList.remove('text-orange-500');
                    } else {
                        counter.classList.remove('text-red-500');
                    }
                    
                    // Show validation icon
                    const validIcon = document.getElementById('name-valid');
                    if (validIcon) {
                        validIcon.classList.toggle('hidden', input.value.length === 0);
                    }
                }
                
                // Update preview
                updateTagPreview();
            };
            
            // Format date for display
            function formatDate(dateString) {
                if (!dateString) return '';
                
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
            }
            
            // Process custom fields before form submission
            function processCustomFields() {
                const customFields = {};
                const customInputs = document.querySelectorAll('[name^="custom-"]');
                
                customInputs.forEach(input => {
                    if (input.value) {
                        const fieldName = input.name.replace('custom-', '');
                        customFields[fieldName] = input.value;
                    }
                });
                
                // Update CustomFieldsData hidden input
                if (Object.keys(customFields).length > 0) {
                    document.getElementById('customFieldsDataHidden').value = JSON.stringify(customFields);
                }
            }
            
            // Show notification toast
            function showNotification(message, type = 'success', description = '') {
                const toast = document.getElementById('toast');
                const toastMessage = document.getElementById('toast-message');
                const toastDescription = document.getElementById('toast-description');
                const toastIcon = document.getElementById('toast-icon');
                
                if (!toast || !toastMessage || !toastDescription || !toastIcon) return;
                
                toastMessage.textContent = message;
                toastDescription.textContent = description;
                
                // Set icon based on type
                if (type === 'success') {
                    toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-green-100';
                    toastIcon.innerHTML = '<i class="fas fa-check text-green-500"></i>';
                } else if (type === 'error') {
                    toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-red-100';
                    toastIcon.innerHTML = '<i class="fas fa-exclamation-triangle text-red-500"></i>';
                } else if (type === 'info') {
                    toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-blue-100';
                    toastIcon.innerHTML = '<i class="fas fa-info-circle text-blue-500"></i>';
                } else if (type === 'warning') {
                    toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-yellow-100';
                    toastIcon.innerHTML = '<i class="fas fa-exclamation-circle text-yellow-500"></i>';
                }
                
                // Show toast
                toast.classList.remove('hidden');
                
                // Auto-hide after 5 seconds
                setTimeout(() => {
                    toast.classList.add('hidden');
                }, 5000);
                
                // Close on click
                document.getElementById('close-toast').addEventListener('click', () => {
                    toast.classList.add('hidden');
                });
            }
            
            // Add event listeners to category field
            const categoryField = document.getElementById('Category');
            if (categoryField) {
                categoryField.addEventListener('change', function() {
                    updateFieldVisibility(this.value);
                });
            }
            
            // Add input event listeners for real-time updates
            document.querySelectorAll('input, textarea, select').forEach(input => {
                input.addEventListener('input', function() {
                    updateTagPreview();
                    updateChangesComparison();
                });
                
                input.addEventListener('change', function() {
                    updateTagPreview();
                    updateChangesComparison();
                });
            });
        });
    </script>
}