@model CardTagManager.Models.Card

@{
    ViewData["Title"] = "Create New Product";
}

<div class="mb-6">
    <a asp-action="Index" class="inline-flex items-center text-primary-600 hover:text-primary-700 transition-colors group">
        <i class="fas fa-arrow-left mr-2 group-hover:-translate-x-1 transition-transform"></i> Back to Library
    </a>
</div>

<!-- Form Progress Indicator -->
<div class="form-progress mb-6">
    <div class="flex items-center justify-between max-w-2xl mx-auto">
        <div class="step active" data-step="1">
            <div class="step-circle bg-primary-600 text-white h-8 w-8 rounded-full flex items-center justify-center shadow-sm">1</div>
            <div class="step-label text-sm font-medium mt-1">Basic Info</div>
        </div>
        <div class="step-connector h-1 flex-grow bg-gray-200 mx-2 relative">
            <div class="absolute inset-0 bg-primary-600 step-progress" style="width: 0%"></div>
        </div>
        <div class="step" data-step="2">
            <div class="step-circle bg-gray-200 text-gray-600 h-8 w-8 rounded-full flex items-center justify-center shadow-sm">2</div>
            <div class="step-label text-sm font-medium mt-1">Details</div>
        </div>
        <div class="step-connector h-1 flex-grow bg-gray-200 mx-2 relative">
            <div class="absolute inset-0 bg-primary-600 step-progress" style="width: 0%"></div>
        </div>
        <div class="step" data-step="3">
            <div class="step-circle bg-gray-200 text-gray-600 h-8 w-8 rounded-full flex items-center justify-center shadow-sm">3</div>
            <div class="step-label text-sm font-medium mt-1">Appearance</div>
        </div>
    </div>
</div>

<div class="grid grid-cols-1 lg:grid-cols-5 gap-8 fade-in">
    <!-- Form Section (3 columns) -->
    <div class="lg:col-span-3">
        <div class="card">
            <div class="card-header">
                <h2 class="text-xl font-bold text-gray-800 flex items-center">
                    <i class="fas fa-plus-circle text-primary-500 mr-2"></i> Add New Product
                </h2>
                <p class="text-sm text-gray-500 mt-1">Fill in the details for your product tag</p>
            </div>
            
            <!-- Template Gallery -->
            <div class="px-6 pt-4 pb-2">
                <div class="flex justify-between items-center mb-3">
                    <h3 class="text-sm font-medium text-gray-700 flex items-center">
                        <i class="fas fa-th-large text-primary-400 mr-2"></i> 
                        Template Library
                        <span class="ml-2 px-2 py-0.5 bg-blue-50 text-blue-600 text-xs rounded-full">Quick Start</span>
                    </h3>
                    <button type="button" id="create-template-btn" class="text-sm inline-flex items-center text-primary-600 hover:text-primary-700 px-2 py-1 rounded hover:bg-primary-50 transition-all">
                        <i class="fas fa-plus-circle mr-1"></i> New Template
                    </button>
                </div>
                
                <!-- Template Categories Tabs -->
                <div class="template-tabs flex border-b border-gray-200 mb-3 overflow-x-auto pb-1 scrollbar-hide">
                    <button type="button" class="template-tab active whitespace-nowrap px-3 py-1.5 text-sm font-medium border-b-2 border-primary-500 text-primary-600" data-category="all">All Templates</button>
                    <button type="button" class="template-tab whitespace-nowrap px-3 py-1.5 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700" data-category="industry">Industrial</button>
                    <button type="button" class="template-tab whitespace-nowrap px-3 py-1.5 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700" data-category="chemical">Chemical</button>
                    <button type="button" class="template-tab whitespace-nowrap px-3 py-1.5 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700" data-category="equipment">Equipment</button>
                    <button type="button" class="template-tab whitespace-nowrap px-3 py-1.5 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700" data-category="custom">My Templates</button>
                </div>
                
                <!-- Search Templates -->
                <div class="mb-3">
                    <div class="relative">
                        <input type="text" id="template-search" class="w-full pl-9 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-sm transition-colors" placeholder="Search templates...">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search text-gray-400"></i>
                        </div>
                    </div>
                </div>
                
                <!-- Templates Container -->
                <div id="template-container" class="grid grid-cols-3 gap-3 mb-4">
                    <!-- Templates will be loaded from database -->
                </div>
                
                <!-- Load More Button -->
                <div class="text-center mt-2 mb-4">
                    <button type="button" id="load-more-templates" class="text-sm text-primary-600 hover:text-primary-700 px-3 py-1 border border-primary-200 rounded-full hover:bg-primary-50 transition-all">
                        <span class="load-more-text"><i class="fas fa-chevron-down mr-1"></i> Load More Templates</span>
                        <span class="show-less-text hidden"><i class="fas fa-chevron-up mr-1"></i> Show Less</span>
                    </button>
                </div>
                
                <!-- Recently Used Templates -->
                <div class="recently-used mt-2 mb-3">
                    <h4 class="text-xs uppercase text-gray-500 font-medium mb-2">Recently Used</h4>
                    <div class="flex flex-wrap gap-2" id="recently-used-templates">
                        <!-- Recently used templates will be loaded dynamically -->
                    </div>
                </div>
            </div>
            
        <form asp-action="Create" method="post" id="product-form" enctype="multipart/form-data">
            <!-- Add hidden fields for QR colors and template type -->
            <input type="hidden" name="QrFgColor" id="qrFgColorHidden" value="#000000" />
            <input type="hidden" name="QrBgColor" id="qrBgColorHidden" value="#FFFFFF" />
            <input type="hidden" name="TemplateType" id="templateTypeHidden" value="" />
                <div class="card-body">
                    <!-- Step 1: Basic Information -->
                    <div class="form-section" data-step="1">
                        <h3 class="text-md font-semibold text-gray-700 mb-4 pb-2 border-b flex items-center">
                            <i class="fas fa-info-circle text-primary-400 mr-2"></i> Basic Information
                        </h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="space-y-4">
                                <div class="form-group">
                                    <label asp-for="ProductName" class="form-label flex items-center">
                                        Product Name
                                        <span class="text-red-500 ml-1">*</span>
                                        <span class="ml-auto text-xs text-gray-400" id="name-counter">0/100</span>
                                    </label>
                                    <div class="relative">
                                        <input asp-for="ProductName" class="form-input pl-9" required 
                                               placeholder="RustShield Pro 5000" maxlength="100"
                                               oninput="countChars(this, 'name-counter', 100)">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-tag text-gray-400"></i>
                                        </div>
                                        <div class="validation-icon absolute inset-y-0 right-3 flex items-center hidden" id="name-valid">
                                            <i class="fas fa-check-circle text-green-500"></i>
                                        </div>
                                    </div>
                                    <span asp-validation-for="ProductName" class="form-error"></span>
                                </div>
                                
                                <div class="form-group">
                                    <label asp-for="Category" class="form-label">
                                        Category
                                        <span class="text-red-500 ml-1">*</span>
                                    </label>
                                    <div class="relative">
                                        <select asp-for="Category" class="form-input pl-9" id="category-select">
                                            <option value="Rust Coating Chemical">Rust Coating Chemical</option>
                                            <option value="Application Equipment">Application Equipment</option>
                                            <option value="Lab Equipment">Lab Equipment</option>
                                            <option value="Office Equipment">Office Equipment</option>
                                            <option value="Safety Equipment">Safety Equipment</option>
                                            <option value="Electronic Device">Electronic Device</option>
                                            <option value="Industrial Machinery">Industrial Machinery</option>
                                            <option value="Design Asset">Design Asset</option>
                                            <option value="Quality Control">Quality Control</option>
                                            <option value="Other">Other</option>
                                        </select>
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-folder text-gray-400"></i>
                                        </div>
                                    </div>
                                    <span asp-validation-for="Category" class="form-error"></span>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">Product Image</label>
                                    <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:bg-gray-50 transition-colors cursor-pointer group" id="dropzone">
                                        <input type="file" class="hidden" id="product-image" name="ImageFile" accept="image/*">
                                        <div class="flex flex-col items-center justify-center">
                                            <i class="fas fa-cloud-upload-alt text-2xl text-gray-400 mb-2 group-hover:text-primary-400 transition-colors"></i>
                                            <p class="text-sm text-gray-500 mb-1">Drag and drop an image here or click to browse</p>
                                            <p class="text-xs text-gray-400">PNG, JPG up to 5MB</p>
                                        </div>
                                    </div>
                                    <div id="image-preview" class="hidden mt-2">
                                        <div class="flex items-center justify-between bg-gray-50 rounded-lg p-2">
                                            <div class="flex items-center">
                                                <img src="" alt="Preview" class="w-10 h-10 object-cover rounded mr-2 border border-gray-200">
                                                <span class="text-sm text-gray-700 truncate max-w-[180px] filename">filename.jpg</span>
                                            </div>
                                            <button type="button" class="text-red-500 hover:text-red-700 p-1 hover:bg-red-50 rounded transition-colors" id="remove-image">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="space-y-4" id="template-fields-container">
                                <div class="form-group">
                                    <label for="Manufacturer" class="form-label">
                                        Manufacturer
                                        <span class="text-red-500 ml-1">*</span>
                                    </label>
                                    <div class="relative">
                                        <input id="Manufacturer" name="Manufacturer" class="form-input pl-9" required placeholder="Manufacturer Name">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-industry text-gray-400"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Dynamic Custom Fields Container -->
                        <div id="custom-fields-container" class="mt-4 pt-4 border-t border-gray-200">
                            <!-- Custom fields will be inserted here -->
                        </div>
                        
                        <div class="flex justify-end mt-6">
                            <button type="button" class="btn-primary next-step shadow-sm" data-next="2">
                                Continue to Details <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Step 2: Product Details -->
                    <div class="form-section hidden" data-step="2">
                        <h3 class="text-md font-semibold text-gray-700 mb-4 pb-2 border-b flex items-center">
                            <i class="fas fa-clipboard-list text-primary-400 mr-2"></i> Product Details
                        </h3>
                        
                        <div class="space-y-4">
                            <div class="form-group">
                                <label asp-for="Location" class="form-label">Location</label>
                                <div class="relative">
                                    <input asp-for="Location" class="form-input pl-9" placeholder="Chemical Storage Room A">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-map-marker-alt text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="Location" class="form-error"></span>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="MaintenanceInfo" class="form-label">Maintenance Information</label>
                                <div class="relative">
                                    <textarea asp-for="MaintenanceInfo" class="form-input h-20 pl-9" 
                                              placeholder="Regular maintenance requirements and recommendations"></textarea>
                                    <div class="absolute top-3 left-0 pl-3 flex items-start pointer-events-none">
                                        <i class="fas fa-wrench text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="MaintenanceInfo" class="form-error"></span>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                            <div class="form-group">
                                <label asp-for="ManufactureDate" class="form-label">
                                    Manufacture Date
                                    <span class="text-red-500 ml-1">*</span>
                                </label>
                                <div class="relative">
                                    <input asp-for="ManufactureDate" type="date" class="form-input pl-9" required value="@DateTime.Now.ToString("yyyy-MM-dd")">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-calendar-day text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="ManufactureDate" class="form-error"></span>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="PurchaseDate" class="form-label">
                                    Purchase Date
                                    <span class="text-red-500 ml-1">*</span>
                                </label>
                                <div class="relative">
                                    <input asp-for="PurchaseDate" type="date" class="form-input pl-9" required value="@DateTime.Now.ToString("yyyy-MM-dd")">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-shopping-cart text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="PurchaseDate" class="form-error"></span>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="WarrantyExpiration" class="form-label warranty-label">
                                    Warranty Until
                                    <span class="text-red-500 ml-1">*</span>
                                </label>
                                <div class="relative">
                                    <input asp-for="WarrantyExpiration" type="date" class="form-input pl-9 warranty-input" required value="@DateTime.Now.AddYears(1).ToString("yyyy-MM-dd")">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-shield-alt text-gray-400"></i>
                                    </div>
                                </div>
                                <span asp-validation-for="WarrantyExpiration" class="form-error"></span>
                            </div>
                        </div>
                        
                        <div class="flex justify-between mt-6">
                            <button type="button" class="btn-secondary prev-step shadow-sm" data-prev="1">
                                <i class="fas fa-arrow-left mr-2"></i> Back to Basic Info
                            </button>
                            <button type="button" class="btn-primary next-step shadow-sm" data-next="3">
                                Continue to Appearance <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Step 3: Appearance -->
                    <div class="form-section hidden" data-step="3">
                        <h3 class="text-md font-semibold text-gray-700 mb-4 pb-2 border-b flex items-center">
                            <i class="fas fa-palette text-primary-400 mr-2"></i> Card Appearance
                        </h3>
                        
                        <div class="mb-6">
                            <label class="form-label">Card Layout</label>
                            <div class="grid grid-cols-3 gap-3">
                                <div class="layout-option border rounded-lg p-2 cursor-pointer hover:border-primary-500 hover:shadow-md transition-all active" data-layout="standard">
                                    <input type="hidden" name="Layout" id="layoutHidden" value="standard" />
                                    <div class="bg-gray-50 rounded mb-1 flex items-center justify-center p-3">
                                        <div class="w-full aspect-w-16 aspect-h-10 bg-white rounded shadow-sm p-1">
                                            <div class="flex">
                                                <div class="flex-grow">
                                                    <div class="w-1/2 h-2 bg-gray-300 rounded mb-1"></div>
                                                    <div class="w-3/4 h-1 bg-gray-300 rounded mb-2"></div>
                                                    <div class="space-y-1">
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                    </div>
                                                </div>
                                                <div class="w-1/4 flex items-center justify-center">
                                                    <div class="w-10 h-10 bg-gray-300 rounded"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <p class="text-xs text-center font-medium">Standard</p>
                                </div>
                                <div class="layout-option border rounded-lg p-2 cursor-pointer hover:border-primary-500 hover:shadow-md transition-all" data-layout="modern">
                                    <div class="bg-gray-50 rounded mb-1 flex items-center justify-center p-3">
                                        <div class="w-full aspect-w-16 aspect-h-10 bg-white rounded shadow-sm p-1">
                                            <div class="flex flex-col">
                                                <div class="h-1/3 w-full bg-gray-300 rounded-t"></div>
                                                <div class="p-1 flex">
                                                    <div class="flex-grow">
                                                        <div class="w-1/2 h-1 bg-gray-300 rounded mb-1"></div>
                                                        <div class="space-y-1">
                                                            <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                            <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                        </div>
                                                    </div>
                                                    <div class="w-1/4 flex items-center justify-center">
                                                        <div class="w-8 h-8 bg-gray-300 rounded-full"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <p class="text-xs text-center font-medium">Modern</p>
                                </div>
                                <div class="layout-option border rounded-lg p-2 cursor-pointer hover:border-primary-500 hover:shadow-md transition-all" data-layout="compact">
                                    <div class="bg-gray-50 rounded mb-1 flex items-center justify-center p-3">
                                        <div class="w-full aspect-w-16 aspect-h-10 bg-white rounded shadow-sm p-1">
                                            <div class="flex">
                                                <div class="flex-grow p-1">
                                                    <div class="w-3/4 h-2 bg-gray-300 rounded mb-1"></div>
                                                    <div class="space-y-1 mt-1">
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                        <div class="w-full h-1 bg-gray-300 rounded"></div>
                                                    </div>
                                                </div>
                                                <div class="w-1/3 bg-gray-200 rounded-r flex items-center justify-center">
                                                    <div class="w-8 h-8 bg-gray-300 rounded"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <p class="text-xs text-center font-medium">Compact</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <div class="form-group">
                                <label asp-for="BackgroundColor" class="form-label">Background Color</label>
                                <div class="color-picker-wrapper">
                                <div class="flex">
                                    <input asp-for="BackgroundColor" type="color" class="color-input hidden" id="bg-color-picker">
                                    <div class="color-preview w-10 h-10 border border-gray-300 rounded-lg shadow-inner cursor-pointer" id="bg-color-preview" style="background-color: #ffffff"></div>
                                    <input asp-for="BackgroundColor" type="text" class="form-input ml-2 flex-grow" placeholder="#ffffff" value="#ffffff">
                                </div>
                                    <div class="color-presets mt-2 flex flex-wrap gap-2">
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#ffffff" style="background-color: #ffffff;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#f8fafc" style="background-color: #f8fafc;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#f0f9ff" style="background-color: #f0f9ff;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#1e293b" style="background-color: #1e293b;"></span>
                                    </div>
                                </div>
                                <span asp-validation-for="BackgroundColor" class="form-error"></span>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="TextColor" class="form-label">Text Color</label>
                                <div class="color-picker-wrapper">
                                    <div class="flex">
                                        <input type="color" class="color-input w-10 h-10 border border-gray-300 rounded-lg shadow-inner cursor-pointer" id="text-color-picker" value="#000000">
                                        <input asp-for="TextColor" type="text" class="form-input ml-2 flex-grow" placeholder="#000000" value="#000000">
                                    </div>
                                    <div class="color-presets mt-2 flex flex-wrap gap-2">
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#000000" style="background-color: #000000;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#1e293b" style="background-color: #1e293b;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#ffffff" style="background-color: #ffffff;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#64748b" style="background-color: #64748b;"></span>
                                    </div>
                                </div>
                                <span asp-validation-for="TextColor" class="form-error"></span>
                            </div>
                            
                            <div class="form-group">
                                <label asp-for="AccentColor" class="form-label">Accent Color</label>
                                <div class="color-picker-wrapper">
                                    <div class="flex">
                                        <input type="color" class="color-input w-10 h-10 border border-gray-300 rounded-lg shadow-inner cursor-pointer" id="accent-color-picker" value="#0284c7">
                                        <input asp-for="AccentColor" type="text" class="form-input ml-2 flex-grow" placeholder="#0284c7" value="#0284c7">
                                    </div>
                                    <div class="color-presets mt-2 flex flex-wrap gap-2">
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#0284c7" style="background-color: #0284c7;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#f97316" style="background-color: #f97316;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#16a34a" style="background-color: #16a34a;"></span>
                                        <span class="color-preset w-6 h-6 rounded-full border border-gray-200 shadow-sm cursor-pointer hover:scale-110 transition-transform" data-color="#9333ea" style="background-color: #9333ea;"></span>
                                    </div>
                                </div>
                                <span asp-validation-for="AccentColor" class="form-error"></span>
                            </div>
                        </div>
                        
                        <div class="mt-6 p-4 bg-gray-50 rounded-lg border border-gray-100">
                            <h4 class="text-sm font-medium mb-3 flex items-center">
                                <i class="fas fa-qrcode text-primary-400 mr-2"></i> QR Code Options
                            </h4>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="text-xs text-gray-600 block mb-1">Foreground Color</label>
                                    <div class="flex">
                                        <input type="color" class="w-10 h-10 border border-gray-300 rounded-lg cursor-pointer" value="#000000" id="qr-fg-color">
                                        <input type="text" class="form-input ml-2 flex-grow text-sm" value="#000000" id="qr-fg-color-text">
                                    </div>
                                </div>
                                <div>
                                    <label class="text-xs text-gray-600 block mb-1">Background Color</label>
                                    <div class="flex">
                                        <input type="color" class="w-10 h-10 border border-gray-300 rounded-lg cursor-pointer" value="#ffffff" id="qr-bg-color">
                                        <input type="text" class="form-input ml-2 flex-grow text-sm" value="#ffffff" id="qr-bg-color-text">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="flex justify-between mt-6">
                            <button type="button" class="btn-secondary prev-step shadow-sm" data-prev="2">
                                <i class="fas fa-arrow-left mr-2"></i> Back to Details
                            </button>
                            <button type="submit" class="btn-primary relative group shadow-sm">
                                <span class="flex items-center">
                                    <i class="fas fa-save mr-2"></i> Create Product
                                </span>
                                <span class="absolute inset-0 flex items-center justify-center bg-primary-600 rounded-md opacity-0 transition-opacity group-hover:opacity-0 group-active:opacity-100">
                                    <i class="fas fa-spinner fa-spin"></i>
                                </span>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="card-footer">
                    <div class="flex justify-between items-center">
                        <div class="text-sm text-gray-500">
                            <span class="text-red-500">*</span> Required fields
                        </div>
                        <div class="text-sm text-gray-500">
                            <span class="step-indicator">Step 1 of 3</span>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Preview Section (2 columns) -->
    <div class="lg:col-span-2">
        <div class="sticky top-6 space-y-4">
            <div class="flex justify-between items-center mb-2">
                <h3 class="text-lg font-bold text-gray-800 flex items-center">
                    <i class="fas fa-eye text-primary-500 mr-2"></i> Live Preview
                </h3>
                <div class="preview-controls flex gap-2">
                    <button type="button" class="text-sm text-gray-600 hover:text-gray-800 flex items-center p-1 hover:bg-gray-100 rounded transition-colors" id="rotate-preview">
                        <i class="fas fa-sync-alt mr-1"></i> Flip Card
                    </button>
                </div>
            </div>
            
            <div class="card shadow-lg transition-all duration-300" id="card-preview-container">
                <div class="card-flip-container">
                    <!-- Front of card -->
                    <div class="business-card card-side card-front" id="tag-preview" style="background-color: #ffffff; color: #000000">
                        <div class="p-6 h-full flex flex-col relative">
                            <div class="mb-4">
                                <span id="preview-category" class="px-2 py-1 text-xs font-semibold rounded-full inline-block" style="background-color: #0284c7; color: #ffffff">
                                    Select Category
                                </span>
                                <h3 id="preview-name" class="text-xl font-bold mt-2" style="color: #0284c7">Product Name</h3>
                                <p id="preview-manufacturer" class="text-md">Manufacturer</p>
                                <div id="preview-custom-fields" class="mt-2 text-sm"></div>
                            </div>
                            <div class="space-y-2 mt-auto text-sm">
                                <p class="flex items-center">
                                    <i class="fas fa-map-marker-alt mr-3" style="color: #0284c7"></i>
                                    <span class="font-medium">Location:</span>&nbsp;<span id="preview-location">Not specified</span>
                                </p>
                                <p class="flex items-center">
                                    <i class="fas fa-calendar-day mr-3" style="color: #0284c7"></i>
                                    <span class="font-medium">Manufactured:</span>&nbsp;<span id="preview-mfgdate">@DateTime.Now.ToString("MM/dd/yyyy")</span>
                                </p>
                                <p class="flex items-center warranty-preview">
                                    <i class="fas fa-shield-alt mr-3" style="color: #0284c7"></i>
                                    <span class="font-medium">Warranty Until:</span>&nbsp;<span id="preview-warranty">@DateTime.Now.AddYears(1).ToString("MM/dd/yyyy")</span>
                                </p>
                                <p class="flex items-center">
                                    <i class="fas fa-wrench mr-3" style="color: #0284c7"></i>
                                    <span class="font-medium">Maintenance:</span>&nbsp;<span id="preview-maintenance">No maintenance info</span>
                                </p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Back of card (QR Code) -->
                    <div class="business-card card-side card-back" style="background-color: #ffffff;">
                        <div class="p-6 h-full flex flex-col items-center justify-center">
                            <div class="qr-preview p-3 bg-white border border-gray-200 rounded-lg shadow-sm">
                                <div class="w-40 h-40 bg-white flex items-center justify-center rounded" id="card-qr-code-display">
                                    <i class="fas fa-qrcode text-gray-400 text-4xl"></i>
                                </div>
                                <p class="text-center text-sm mt-2 text-gray-700 font-medium" id="qr-product-name">Product Name</p>
                                <p class="text-center text-xs mt-1 text-gray-500">Scan for product details</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded shadow-sm">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-info-circle text-blue-400"></i>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-blue-800">Tips for effective product tags</h3>
                        <ul class="mt-2 text-sm text-blue-700 list-disc list-inside">
                            <li>Use clear, descriptive product names</li>
                            <li>Keep maintenance information concise and specific</li>
                            <li>Choose contrasting colors for better readability</li>
                            <li>Always include current location information</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
<script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
<script>
// Function to update QR color values to hidden fields
function updateQrColors() {
    document.getElementById('qrFgColorHidden').value = document.getElementById('qr-fg-color').value || '#000000';
    document.getElementById('qrBgColorHidden').value = document.getElementById('qr-bg-color').value || '#FFFFFF';
}

document.addEventListener('DOMContentLoaded', function() {
    // Force create QRCode if not defined
    if (typeof QRCode === 'undefined') {
        console.warn('QRCode library not found, creating fallback...');
        // Simple QRCode fallback
        window.QRCode = function(element, options) {
            if (typeof element === 'string') {
                element = document.querySelector(element);
            }
            
            if (!element) {
                console.error('QRCode element not found');
                return;
            }
            
            // Just display a placeholder
            element.innerHTML = `
                <div style="width:160px;height:160px;display:flex;align-items:center;justify-content:center;border:1px solid #e5e7eb;background:#f9fafb;">
                    <div style="text-align:center;">
                        <i class="fas fa-qrcode text-gray-400" style="font-size:48px;margin-bottom:8px;"></i>
                        <div style="font-size:12px;color:#6b7280;">QR Code for:<br>${options.text}</div>
                    </div>
                </div>
            `;
        };
        
        // Add correction levels
        QRCode.CorrectLevel = {L:1, M:0, Q:3, H:2};
    }
    
    // Load all required initialization functions
    try {
        initializeSteps();
        initializeColorPickers();
        initializeCardLayouts(); 
        initializeImageUpload();
        initializeFieldVisibility();
        initializeTemplates();
        initializeTemplateTabs();
        initializeLoadMoreTemplates();
    } catch (e) {
        console.error('Error during initialization:', e);
    }
    
    // Force preview containers to be visible
    const previewContainers = [
        'card-preview-container',
        'tag-preview',
        'card-qr-code-display'
    ];
    
    previewContainers.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.style.display = id === 'card-qr-code-display' ? 'flex' : 'block';
            if (id === 'card-preview-container') {
                element.style.minHeight = '400px';
                element.style.height = '400px';
            }
        } else {
            console.error(`Preview element not found: ${id}`);
        }
    });
    
    // Initialize preview with default values
    try {
        updateTagPreview();
    } catch (e) {
        console.error('Error updating tag preview:', e);
    }
    
    // Generate QR code with delay to ensure rendering
    setTimeout(function() {
        try {
            generateQRCode();
        } catch (e) {
            console.error('Error generating QR code:', e);
            
            // Fallback QR display if generation fails
            const qrElement = document.getElementById('card-qr-code-display');
            if (qrElement) {
                qrElement.innerHTML = `
                    <div style="text-align:center;">
                        <i class="fas fa-qrcode text-gray-400" style="font-size:48px;"></i>
                        <div style="font-size:12px;color:#6b7280;margin-top:8px;">QR Code Preview</div>
                    </div>
                `;
            }
        }
    }, 500);
    
    // Force preview visibility after everything else
    setTimeout(function() {
        const cardFront = document.querySelector('.card-front');
        if (cardFront) cardFront.style.display = 'block';
        
        const cardBack = document.querySelector('.card-back');
        if (cardBack) cardBack.style.display = 'none';
    }, 800);
    
    // Handle category change
    const categorySelect = document.getElementById('category-select');
    if (categorySelect) {
        categorySelect.addEventListener('change', function() {
            updateFieldVisibility(this.value);
            updateTagPreview();
        });
    }

    // Initialize form submission
    document.getElementById('product-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Update QR colors before submission
        updateQrColors();
        
        // Validate form
        if (validateForm()) {
            saveCard();
        }
    });
    
    // Add input event listeners to all form fields for live preview updates
    document.querySelectorAll('input, textarea, select').forEach(input => {
        input.addEventListener('input', updateTagPreview);
        input.addEventListener('change', updateTagPreview);
    });
    
    // Add specific event listener for color pickers
    document.querySelectorAll('input[type="color"]').forEach(colorPicker => {
        colorPicker.addEventListener('input', function() {
            updateTagPreview();
            if (this.id === 'qr-fg-color' || this.id === 'qr-bg-color') {
                updateQrColors();
                generateQRCode();
            }
        });
    });
    
    // Initialize Load More Templates button
    function initializeLoadMoreTemplates() {
        const loadMoreBtn = document.getElementById('load-more-templates');
        const loadMoreText = document.querySelector('.load-more-text');
        const showLessText = document.querySelector('.show-less-text');
        
        loadMoreBtn.addEventListener('click', function() {
            loadMoreTemplates();
            loadMoreText.classList.toggle('hidden');
            showLessText.classList.toggle('hidden');
        });
    }
    
    // Initialize template tabs
    function initializeTemplateTabs() {
        const templateTabs = document.querySelectorAll('.template-tab');
        
        templateTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // Remove active class from all tabs
                templateTabs.forEach(t => {
                    t.classList.remove('active', 'border-primary-500', 'text-primary-600');
                    t.classList.add('border-transparent', 'text-gray-500');
                });
                
                // Add active class to current tab
                this.classList.add('active', 'border-primary-500', 'text-primary-600');
                this.classList.remove('border-transparent', 'text-gray-500');
                
                // Filter templates by category
                filterTemplatesByCategory(this.getAttribute('data-category'));
            });
        });
        
        // Template search functionality
        const templateSearch = document.getElementById('template-search');
        if (templateSearch) {
            templateSearch.addEventListener('input', function() {
                filterTemplatesBySearch(this.value);
            });
        }
    }
    
    // Filter templates by category
    function filterTemplatesByCategory(category) {
        const templateCards = document.querySelectorAll('.template-card');
        
        templateCards.forEach(card => {
            if (category === 'all' || card.getAttribute('data-category') === category) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });
    }
    
    // Filter templates by search term
    function filterTemplatesBySearch(searchTerm) {
        const templateCards = document.querySelectorAll('.template-card');
        const term = searchTerm.toLowerCase();
        
        templateCards.forEach(card => {
            const text = card.textContent.toLowerCase();
            if (text.includes(term)) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });
    }
    
    // Load more templates - triggers API call to get more templates
    function loadMoreTemplates() {
        // Implementation depends on your API structure
        // This is a placeholder for the actual implementation
        console.log('Loading more templates...');
        
        // Example implementation - replace with actual API call
        fetch('/api/Template?skip=' + document.querySelectorAll('.template-card').length)
            .then(response => response.json())
            .then(templates => {
                templates.forEach(template => {
                    addTemplateCard(template);
                });
            })
            .catch(error => {
                console.error('Error loading more templates:', error);
            });
    }
    
    // Initialize templates
    function initializeTemplates() {
        // Load templates from API
        fetch('/api/Template')
            .then(response => response.json())
            .then(templates => {
                const container = document.getElementById('template-container');
                
                // Clear container
                container.innerHTML = '';
                
                // Add templates from database
                if (templates && templates.length > 0) {
                    templates.forEach(template => {
                        addTemplateCard(template);
                    });
                } else {
                    container.innerHTML = `
                        <div class="col-span-3 p-6 text-center">
                            <div class="text-gray-400 mb-2"><i class="fas fa-folder-open text-2xl"></i></div>
                            <p class="text-gray-500">No templates found</p>
                        </div>
                    `;
                }
                
                // Load recently used templates
                loadRecentlyUsedTemplates();
            })
            .catch(error => {
                console.error('Error loading templates:', error);
                showNotification('Error loading templates', 'error');
            });
    }
    
    // Add template card to the gallery
    function addTemplateCard(template) {
        const templateContainer = document.getElementById('template-container');
        
        // Create card element
        const card = document.createElement('div');
        card.className = 'template-card cursor-pointer border rounded-lg overflow-hidden hover:border-primary-500 hover:shadow transition-all relative group';
        card.setAttribute('data-template', template.id);
        card.setAttribute('data-category', template.category || 'custom');
        
        card.innerHTML = `
            <div class="absolute top-1 right-1 flex template-actions opacity-0 group-hover:opacity-100 z-10">
                <button type="button" class="edit-template-btn p-1 text-gray-500 hover:text-primary-600 bg-white rounded-full shadow-sm" data-template="${template.id}">
                    <i class="fas fa-edit"></i>
                </button>
            </div>
            <div class="h-20 bg-${getBackgroundClass(template.bgColor || '#f0f9ff')} flex items-center justify-center">
                <i class="fas fa-${template.icon || 'tag'} text-${getColorClass(template.icon || 'tag')} text-2xl"></i>
            </div>
            <div class="p-2 bg-white border-t border-gray-100">
                <h4 class="font-medium text-sm text-gray-800">${template.name || 'Unnamed Template'}</h4>
                <p class="text-xs text-gray-500 mt-0.5">${template.category || 'Custom'}</p>
            </div>
            <div class="absolute inset-0 bg-primary-500 bg-opacity-0 hover:bg-opacity-10 transition-all flex items-center justify-center">
                <span class="bg-white text-primary-600 px-2 py-1 rounded-full text-xs font-medium opacity-0 group-hover:opacity-100 transform scale-0 group-hover:scale-100 transition-all shadow-sm">
                    Select Template
                </span>
            </div>
        `;
        
        // Add event listener for template selection
        card.addEventListener('click', function(e) {
            if (!e.target.closest('.edit-template-btn')) {
                applyTemplate(template.id);
            }
        });
        
        // Add to container
        templateContainer.appendChild(card);
    }
    
    // Helper functions for template colors
    function getBackgroundClass(bgColor) {
        if (bgColor === '#f0f9ff') return 'blue-50';
        if (bgColor === '#f0fdf4') return 'green-50';
        if (bgColor === '#fef3c7') return 'yellow-50';
        if (bgColor === '#fdf2f8') return 'red-50';
        if (bgColor === '#faf5ff') return 'purple-50';
        return 'gray-50';
    }
    
    function getColorClass(icon) {
        if (['flask', 'vial'].includes(icon)) return 'blue-500';
        if (['leaf', 'seedling'].includes(icon)) return 'green-500';
        if (['cogs', 'tools', 'wrench'].includes(icon)) return 'yellow-600';
        if (['microchip', 'laptop'].includes(icon)) return 'green-500';
        if (['paint-brush', 'palette'].includes(icon)) return 'red-500';
        if (['shield-alt', 'hard-hat'].includes(icon)) return 'orange-500';
        return 'primary-500';
    }
    
    // Load recently used templates from localStorage
    function loadRecentlyUsedTemplates() {
        const container = document.getElementById('recently-used-templates');
        container.innerHTML = '';
        
        try {
            const recent = JSON.parse(localStorage.getItem('recentTemplates') || '[]');
            
            if (recent.length === 0) {
                container.innerHTML = '<p class="text-xs text-gray-400">No recently used templates</p>';
                return;
            }
            
            recent.forEach(item => {
                const chip = document.createElement('button');
                chip.type = 'button';
                chip.className = 'template-chip px-3 py-1 text-xs bg-gray-100 text-gray-700 rounded-full hover:bg-primary-50 hover:text-primary-600 transition-colors';
                chip.setAttribute('data-template', item.id);
                chip.innerHTML = `<i class="fas fa-${item.icon || 'tag'} mr-1"></i> ${item.name}`;
                
                chip.addEventListener('click', function() {
                    applyTemplate(item.id);
                });
                
                container.appendChild(chip);
            });
        } catch (e) {
            console.error('Error loading recent templates:', e);
            container.innerHTML = '<p class="text-xs text-gray-400">No recently used templates</p>';
        }
    }
    
    // Apply template function
    function applyTemplate(templateId) {
        document.getElementById('templateTypeHidden').value = templateId;
        
        // Update template cards UI
        document.querySelectorAll('.template-card').forEach(card => {
            card.classList.remove('border-primary-500');
            if (card.getAttribute('data-template') == templateId) {
                card.classList.add('border-primary-500');
            }
        });
        
        // Load template fields
        fetch(`/api/Template/${templateId}`)
            .then(response => response.json())
            .then(template => {
                // Update field visibility based on template
                displayTemplateFields(template);
                
                // Update preview
                updateTagPreview();
                
                // Add to recently used
                addToRecentlyUsed(template);
                
                // Show notification
                showNotification(`Template "${template.name}" applied`, 'success');
            })
            .catch(error => {
                console.error('Error loading template:', error);
                showNotification('Error loading template', 'error');
            });
    }
    
    // Display template fields
    function displayTemplateFields(template) {
        const container = document.getElementById('template-fields-container');
        container.innerHTML = '';
        
        // Ensure we have fields
        let fields = [];
        try {
            if (template.fieldsJson) {
                fields = JSON.parse(template.fieldsJson);
            } else if (template.fields) {
                fields = template.fields;
            }
        } catch (e) {
            console.error('Error parsing template fields:', e);
        }
        
        // Add default manufacturer field if not present
        const hasManufacturer = fields.some(f => f.name.toLowerCase() === 'manufacturer');
        if (!hasManufacturer) {
            container.innerHTML += `
                <div class="form-group">
                    <label for="Manufacturer" class="form-label">
                        Manufacturer
                        <span class="text-red-500 ml-1">*</span>
                    </label>
                    <div class="relative">
                        <input id="Manufacturer" name="Manufacturer" class="form-input pl-9" required placeholder="Manufacturer Name">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-industry text-gray-400"></i>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Add template fields
        fields.forEach(field => {
            const isRequired = field.required !== false;
            const fieldId = `custom-${field.name.replace(/\s+/g, '-').toLowerCase()}`;
            
            let fieldHTML = `
                <div class="form-group">
                    <label for="${fieldId}" class="form-label">
                        ${field.name}
                        ${isRequired ? '<span class="text-red-500 ml-1">*</span>' : ''}
                    </label>
                    <div class="relative">
            `;
            
            // Create input based on field type
            if (field.type === 'textarea') {
                fieldHTML += `
                    <textarea id="${fieldId}" name="${fieldId}" class="form-input pl-9 h-20" ${isRequired ? 'required' : ''} placeholder="${field.placeholder || ''}"></textarea>
                    <div class="absolute top-3 left-0 pl-3 flex items-start pointer-events-none">
                        <i class="fas fa-${field.icon || 'tag'} text-gray-400"></i>
                    </div>
                `;
            } else if (field.type === 'select') {
                fieldHTML += `
                    <select id="${fieldId}" name="${fieldId}" class="form-input pl-9" ${isRequired ? 'required' : ''}>
                `;
                
                // Add options
                if (field.options && field.options.length > 0) {
                    field.options.forEach(option => {
                        fieldHTML += `<option value="${option}">${option}</option>`;
                    });
                }
                
                fieldHTML += `
                    </select>
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-${field.icon || 'tag'} text-gray-400"></i>
                    </div>
                `;
            } else {
                fieldHTML += `
                    <input id="${fieldId}" name="${fieldId}" type="${field.type || 'text'}" class="form-input pl-9" ${isRequired ? 'required' : ''} placeholder="${field.placeholder || ''}">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-${field.icon || 'tag'} text-gray-400"></i>
                    </div>
                `;
            }
            
            fieldHTML += `
                    </div>
                </div>
            `;
            
            container.innerHTML += fieldHTML;
        });
    }
    
    // Add template to recently used
    function addToRecentlyUsed(template) {
        try {
            let recent = JSON.parse(localStorage.getItem('recentTemplates') || '[]');
            
            // Check if already in the list
            const index = recent.findIndex(item => item.id === template.id);
            if (index !== -1) {
                recent.splice(index, 1);
            }
            
            // Add to beginning of list
            recent.unshift({
                id: template.id,
                name: template.name,
                icon: template.icon || 'tag'
            });
            
            // Keep only last 5
            recent = recent.slice(0, 5);
            
            // Save to localStorage
            localStorage.setItem('recentTemplates', JSON.stringify(recent));
            
            // Update UI
            loadRecentlyUsedTemplates();
        } catch (e) {
            console.error('Error updating recently used templates:', e);
        }
    }
    
    // QR code color change event listeners
    document.getElementById('qr-fg-color').addEventListener('input', function() {
        document.getElementById('qr-fg-color-text').value = this.value;
        updateQrColors();
        generateQRCode();
    });
    
    document.getElementById('qr-fg-color-text').addEventListener('input', function() {
        document.getElementById('qr-fg-color').value = this.value;
        updateQrColors();
        generateQRCode();
    });
    
    document.getElementById('qr-bg-color').addEventListener('input', function() {
        document.getElementById('qr-bg-color-text').value = this.value;
        updateQrColors();
        generateQRCode();
    });
    
    document.getElementById('qr-bg-color-text').addEventListener('input', function() {
        document.getElementById('qr-bg-color').value = this.value;
        updateQrColors();
        generateQRCode();
    });
    
    // Show/hide fields based on category/template type
    function updateFieldVisibility(category) {
        const templateFieldsContainer = document.getElementById('template-fields-container');
        templateFieldsContainer.innerHTML = '';
        
        // Add default manufacturer field
        templateFieldsContainer.innerHTML = `
            <div class="form-group">
                <label for="Manufacturer" class="form-label">
                    Manufacturer
                    <span class="text-red-500 ml-1">*</span>
                </label>
                <div class="relative">
                    <input id="Manufacturer" name="Manufacturer" class="form-input pl-9" required placeholder="Manufacturer Name">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-industry text-gray-400"></i>
                    </div>
                </div>
            </div>
        `;
        
        // Update tag preview
        updateTagPreview();
    }
    
    // Initialize steps functionality for multi-step form
    function initializeSteps() {
        const nextButtons = document.querySelectorAll('.next-step');
        const prevButtons = document.querySelectorAll('.prev-step');
        const formSections = document.querySelectorAll('.form-section');
        const stepIndicator = document.querySelector('.step-indicator');
        const steps = document.querySelectorAll('.step');
        const progressBars = document.querySelectorAll('.step-progress');
        
        // Handle next button clicks
        nextButtons.forEach(button => {
            button.addEventListener('click', function() {
                const currentStep = parseInt(this.getAttribute('data-next')) - 1;
                const nextStep = parseInt(this.getAttribute('data-next'));
                
                // Validate current step before proceeding
                if (validateStep(currentStep)) {
                    // Hide current section, show next section
                    formSections.forEach(section => {
                        section.classList.add('hidden');
                    });
                    
                    document.querySelector(`.form-section[data-step="${nextStep}"]`).classList.remove('hidden');
                    
                    // Update step indicator
                    stepIndicator.textContent = `Step ${nextStep} of 3`;
                    
                    // Update step circles
                    steps.forEach(step => {
                        step.classList.remove('active');
                    });
                    
                    document.querySelector(`.step[data-step="${nextStep}"]`).classList.add('active');
                    
                    // Update progress bars
                    for (let i = 0; i < nextStep - 1; i++) {
                        progressBars[i].style.width = '100%';
                    }
                    
                    // Update form progress
                    updateFormProgress(nextStep);
                    
                    // If moving to step 3, generate QR code preview
                    if (nextStep === 3) {
                        generateQRCode();
                    }
                    
                    // Scroll to top
                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });
                }
            });
        });
        
        // Handle previous button clicks
        prevButtons.forEach(button => {
            button.addEventListener('click', function() {
                const prevStep = parseInt(this.getAttribute('data-prev'));
                
                // Hide current section, show previous section
                formSections.forEach(section => {
                    section.classList.add('hidden');
                });
                
                document.querySelector(`.form-section[data-step="${prevStep}"]`).classList.remove('hidden');
                
                // Update step indicator
                stepIndicator.textContent = `Step ${prevStep} of 3`;
                
                // Update step circles
                steps.forEach(step => {
                    step.classList.remove('active');
                });
                
                document.querySelector(`.step[data-step="${prevStep}"]`).classList.add('active');
                
                // Update form progress
                updateFormProgress(prevStep);
                
                // Scroll to top
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            });
        });
        
        // Validate step before proceeding
        function validateStep(stepNumber) {
            let isValid = true;
            const currentSection = document.querySelector(`.form-section[data-step="${stepNumber + 1}"]`);
            const requiredFields = currentSection.querySelectorAll('[required]');
            
            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    field.classList.add('border-red-500');
                    isValid = false;
                } else {
                    field.classList.remove('border-red-500');
                }
            });
            
            if (!isValid) {
                // Show error notification
                showNotification('Please fill in all required fields', 'error');
                
                // Scroll to first invalid field
                const firstInvalidField = currentSection.querySelector('.border-red-500');
                if (firstInvalidField) {
                    firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    firstInvalidField.focus();
                }
            }
            
            return isValid;
        }
        
        // Update form progress
        function updateFormProgress(step) {
            // Update progress bars
            document.querySelectorAll('.step-progress').forEach((progressBar, index) => {
                if (index < step - 1) {
                    progressBar.style.width = '100%';
                } else {
                    progressBar.style.width = '0%';
                }
            });
            
            // Update step circles
            document.querySelectorAll('.step').forEach((stepCircle, index) => {
                const stepNumber = index + 1;
                
                if (stepNumber < step) {
                    // Completed step
                    stepCircle.classList.add('active');
                    stepCircle.querySelector('.step-circle').classList.remove('bg-gray-200', 'text-gray-600');
                    stepCircle.querySelector('.step-circle').classList.add('bg-primary-600', 'text-white');
                } else if (stepNumber === step) {
                    // Current step
                    stepCircle.classList.add('active');
                    stepCircle.querySelector('.step-circle').classList.remove('bg-gray-200', 'text-gray-600');
                    stepCircle.querySelector('.step-circle').classList.add('bg-primary-600', 'text-white');
                } else {
                    // Upcoming step
                    stepCircle.classList.remove('active');
                    stepCircle.querySelector('.step-circle').classList.remove('bg-primary-600', 'text-white');
                    stepCircle.querySelector('.step-circle').classList.add('bg-gray-200', 'text-gray-600');
                }
            });
        }
        
        // Character counter for name field
        window.countChars = function(input, counterId, maxLength) {
            const counter = document.getElementById(counterId);
            const length = input.value.length;
            counter.textContent = `${length}/${maxLength}`;
            
            // Show validation icon when field has a value
            const validIcon = document.getElementById('name-valid');
            if (length > 0) {
                validIcon.classList.remove('hidden');
            } else {
                validIcon.classList.add('hidden');
            }
            
            // Update preview and QR code
            updateTagPreview();
        };
    }
    
    // Initialize color pickers
    function initializeColorPickers() {
        // Background color
        const bgColorPicker = document.getElementById('bg-color-picker');
        const bgColorText = document.getElementById('BackgroundColor');
        const bgColorPreview = document.getElementById('bg-color-preview');
        
        // For the color picker that's hidden, we need to handle the preview div click
        bgColorPreview.addEventListener('click', function() {
            bgColorPicker.click();
        });
        
        bgColorPicker.addEventListener('input', function() {
            bgColorText.value = this.value;
            bgColorPreview.style.backgroundColor = this.value;
            updateTagPreview();
        });
        
        bgColorText.addEventListener('input', function() {
            try {
                bgColorPicker.value = this.value;
                bgColorPreview.style.backgroundColor = this.value;
                updateTagPreview();
            } catch (e) {
                // Invalid color value, ignore
            }
        });
        
        // Text color
        const textColorPicker = document.getElementById('text-color-picker');
        const textColorText = document.getElementById('TextColor');
        
        textColorPicker.addEventListener('input', function() {
            textColorText.value = this.value;
            updateTagPreview();
        });
        
        textColorText.addEventListener('input', function() {
            try {
                textColorPicker.value = this.value;
                updateTagPreview();
            } catch (e) {
                // Invalid color value, ignore
            }
        });
        
        // Accent color
        const accentColorPicker = document.getElementById('accent-color-picker');
        const accentColorText = document.getElementById('AccentColor');
        
        accentColorPicker.addEventListener('input', function() {
            accentColorText.value = this.value;
            updateTagPreview();
        });
        
        accentColorText.addEventListener('input', function() {
            try {
                accentColorPicker.value = this.value;
                updateTagPreview();
            } catch (e) {
                // Invalid color value, ignore
            }
        });
        
        // Color presets
        document.querySelectorAll('.color-preset').forEach(preset => {
            preset.addEventListener('click', function() {
                const color = this.getAttribute('data-color');
                const parent = this.closest('.color-picker-wrapper');
                
                if (parent) {
                    const colorInput = parent.querySelector('input[type="color"]');
                    const textInput = parent.querySelector('input[type="text"]');
                    const colorPreview = parent.querySelector('.color-preview');
                    
                    if (colorInput && textInput) {
                        colorInput.value = color;
                        textInput.value = color;
                        
                        if (colorPreview) {
                            colorPreview.style.backgroundColor = color;
                        }
                        
                        // Trigger change event to update preview
                        colorInput.dispatchEvent(new Event('input'));
                    }
                }
            });
        });
    }
    
    // Initialize card layout selection
    function initializeCardLayouts() {
        const layoutOptions = document.querySelectorAll('.layout-option');
        const layoutHidden = document.getElementById('layoutHidden');
        
        layoutOptions.forEach(option => {
            option.addEventListener('click', function() {
                // Remove active class from all options
                layoutOptions.forEach(opt => {
                    opt.classList.remove('border-primary-500', 'active');
                });
                
                // Add active class to selected option
                this.classList.add('border-primary-500', 'active');
                
                // Update hidden input
                const layout = this.getAttribute('data-layout');
                layoutHidden.value = layout;
                
                // Update tag preview
                updateTagPreview();
            });
        });
        
        // Setup card flip functionality
        const rotateBtn = document.getElementById('rotate-preview');
        const cardFlipContainer = document.querySelector('.card-flip-container');
        
        rotateBtn.addEventListener('click', function() {
            cardFlipContainer.classList.toggle('flipped');
        });
    }
    
    // Initialize image upload
    function initializeImageUpload() {
        const dropzone = document.getElementById('dropzone');
        const imageInput = document.getElementById('product-image');
        const imagePreview = document.getElementById('image-preview');
        const previewImage = imagePreview.querySelector('img');
        const previewFilename = imagePreview.querySelector('.filename');
        const removeImageBtn = document.getElementById('remove-image');
        
        // Open file dialog when clicking on dropzone
        dropzone.addEventListener('click', function() {
            imageInput.click();
        });
        
        // Handle file selection
        imageInput.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                const file = this.files[0];
                
                // Check file type and size
                if (!file.type.match('image.*')) {
                    showNotification('Please select an image file', 'error');
                    return;
                }
                
                if (file.size > 5 * 1024 * 1024) { // 5MB limit
                    showNotification('Image must be less than 5MB', 'error');
                    return;
                }
                
                // Show preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewImage.src = e.target.result;
                    previewFilename.textContent = file.name;
                    imagePreview.classList.remove('hidden');
                    dropzone.classList.add('border-primary-400', 'border-opacity-20', 'bg-primary-50', 'bg-opacity-30');
                };
                reader.readAsDataURL(file);
            }
        });
        
        // Handle drag and drop
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropzone.addEventListener(eventName, function(e) {
                e.preventDefault();
                e.stopPropagation();
            });
        });
        
        // Highlight dropzone on drag over
        ['dragenter', 'dragover'].forEach(eventName => {
            dropzone.addEventListener(eventName, function() {
                this.classList.add('border-primary-400', 'border-opacity-50', 'bg-primary-50');
            });
        });
        
        // Remove highlight on drag leave
        ['dragleave', 'drop'].forEach(eventName => {
            dropzone.addEventListener(eventName, function() {
                this.classList.remove('border-primary-400', 'border-opacity-50', 'bg-primary-50');
            });
        });
        
        // Handle file drop
        dropzone.addEventListener('drop', function(e) {
            const files = e.dataTransfer.files;
            
            if (files && files[0]) {
                const file = files[0];
                
                // Check file type and size
                if (!file.type.match('image.*')) {
                    showNotification('Please select an image file', 'error');
                    return;
                }
                
                if (file.size > 5 * 1024 * 1024) { // 5MB limit
                    showNotification('Image must be less than 5MB', 'error');
                    return;
                }
                
                // Update file input
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                imageInput.files = dataTransfer.files;
                
                // Show preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewImage.src = e.target.result;
                    previewFilename.textContent = file.name;
                    imagePreview.classList.remove('hidden');
                    dropzone.classList.add('border-primary-400', 'border-opacity-20', 'bg-primary-50', 'bg-opacity-30');
                };
                reader.readAsDataURL(file);
            }
        });
        
        // Remove image
        removeImageBtn.addEventListener('click', function() {
            imageInput.value = '';
            previewImage.src = '';
            previewFilename.textContent = '';
            imagePreview.classList.add('hidden');
            dropzone.classList.remove('border-primary-400', 'border-opacity-20', 'bg-primary-50', 'bg-opacity-30');
        });
    }

    // Validate entire form
    function validateForm() {
        let isValid = true;
        const requiredFields = document.querySelectorAll('[required]');
        
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                field.classList.add('border-red-500');
                isValid = false;
                
                // Show the appropriate step if there's an error
                const step = field.closest('.form-section');
                if (step && step.classList.contains('hidden')) {
                    const stepNumber = step.getAttribute('data-step');
                    showStep(parseInt(stepNumber));
                }
            } else {
                field.classList.remove('border-red-500');
            }
        });
        
        if (!isValid) {
            showNotification('Please fill in all required fields', 'error');
        }
        
        return isValid;
    }
    
    // Show a specific step
    function showStep(stepNumber) {
        const formSections = document.querySelectorAll('.form-section');
        formSections.forEach(section => {
            section.classList.add('hidden');
        });
        
        document.querySelector(`.form-section[data-step="${stepNumber}"]`).classList.remove('hidden');
        
        // Update step indicator
        document.querySelector('.step-indicator').textContent = `Step ${stepNumber} of 3`;
        
        // Update step circles
        const steps = document.querySelectorAll('.step');
        steps.forEach(step => {
            step.classList.remove('active');
        });
        
        document.querySelector(`.step[data-step="${stepNumber}"]`).classList.add('active');
        
        // Update form progress
        updateFormProgress(stepNumber);
    }
    
    // Save card data to local storage for testing
    function saveCard() {
        // Get form data for submission
        const form = document.getElementById('product-form');
        form.submit();
    }
    
    // Generate QR Code
    function generateQRCode() {
        const qrElement = document.getElementById('card-qr-code-display');
        if (!qrElement) {
            console.error('QR code container not found');
            return;
        }
        
        // Clear any existing QR code
        qrElement.innerHTML = '';
        
        const productName = document.getElementById('ProductName').value || 'Sample Product';
        const qrFgColor = document.getElementById('qr-fg-color').value || '#000000';
        const qrBgColor = document.getElementById('qr-bg-color').value || '#FFFFFF';
        
        // Update QR product name on back of card
        const qrProductNameElement = document.getElementById('qr-product-name');
        if (qrProductNameElement) {
            qrProductNameElement.textContent = productName;
        }
        
        // QR code data would typically contain a URL or ID to access the product details
        const qrData = `PRODUCT:${productName}:${Date.now()}`;
        
        try {
            // Make sure QRCode is loaded
            if (typeof QRCode === 'undefined') {
                throw new Error('QRCode library not loaded');
            }
            
            // Create new QR Code
            new QRCode(qrElement, {
                text: qrData,
                width: 160,
                height: 160,
                colorDark: qrFgColor,
                colorLight: qrBgColor,
                correctLevel: QRCode.CorrectLevel.H
            });
        } catch (error) {
            console.error('Error generating QR code:', error);
            qrElement.innerHTML = '<i class="fas fa-exclamation-triangle text-red-500 text-xl"></i><p class="text-xs text-red-500 mt-2">Error generating QR code</p>';
        }
    }
    
    // Update tag preview based on form values
    function updateTagPreview() {
        const preview = document.getElementById('tag-preview');
        const previewName = document.getElementById('preview-name');
        const previewCategory = document.getElementById('preview-category');
        const previewManufacturer = document.getElementById('preview-manufacturer');
        const previewLocation = document.getElementById('preview-location');
        const previewMfgDate = document.getElementById('preview-mfgdate');
        const previewWarranty = document.getElementById('preview-warranty');
        const previewMaintenance = document.getElementById('preview-maintenance');
        const previewCustomFields = document.getElementById('preview-custom-fields');
        
        if (!preview || !previewName || !previewCategory) {
            console.error("Preview elements not found");
            return;
        }
        
        // Update colors
        const bgColor = document.getElementById('BackgroundColor')?.value || '#ffffff';
        const textColor = document.getElementById('TextColor')?.value || '#000000';
        const accentColor = document.getElementById('AccentColor')?.value || '#0284c7';
        
        preview.style.backgroundColor = bgColor;
        preview.style.color = textColor;
        previewName.style.color = accentColor;
        previewCategory.style.backgroundColor = accentColor;
        document.querySelectorAll('#tag-preview i').forEach(icon => {
            icon.style.color = accentColor;
        });
        
        // Also update the back of the card
        const cardBack = document.querySelector('.card-back');
        if (cardBack) {
            cardBack.style.backgroundColor = bgColor;
        }
        
        // Update content
        const productName = document.getElementById('ProductName');
        if (productName && productName.value) {
            previewName.textContent = productName.value;
            const qrProductName = document.getElementById('qr-product-name');
            if (qrProductName) {
                qrProductName.textContent = productName.value;
            }
        } else {
            previewName.textContent = "Product Name";
        }
        
        const category = document.getElementById('category-select');
        if (category && category.value) {
            previewCategory.textContent = category.value;
        } else {
            previewCategory.textContent = "Category";
        }
        
        const manufacturer = document.getElementById('Manufacturer');
        if (manufacturer && manufacturer.value) {
            previewManufacturer.textContent = manufacturer.value;
        } else {
            previewManufacturer.textContent = "Manufacturer";
        }
        
        const location = document.getElementById('Location');
        if (location && location.value) {
            previewLocation.textContent = location.value;
        } else {
            previewLocation.textContent = "Not specified";
        }
        
        const mfgDate = document.getElementById('ManufactureDate');
        if (mfgDate && mfgDate.value) {
            previewMfgDate.textContent = new Date(mfgDate.value).toLocaleDateString();
        }
        
        const warranty = document.getElementById('WarrantyExpiration');
        if (warranty && warranty.value) {
            previewWarranty.textContent = new Date(warranty.value).toLocaleDateString();
        }
        
        const maintenance = document.getElementById('MaintenanceInfo');
        if (maintenance && maintenance.value) {
            previewMaintenance.textContent = maintenance.value.length > 40 ? 
                maintenance.value.substring(0, 40) + '...' : 
                maintenance.value;
        } else {
            previewMaintenance.textContent = "No maintenance info";
        }
        
        // Update custom fields
        if (previewCustomFields) {
            previewCustomFields.innerHTML = '';
            document.querySelectorAll('[id^="custom-"]').forEach(field => {
                if (field.value) {
                    const fieldName = field.id.replace('custom-', '').replace(/-/g, ' ');
                    const fieldValue = field.value;
                    
                    const fieldElement = document.createElement('div');
                    fieldElement.className = 'flex items-center space-x-2 text-sm mt-1';
                    fieldElement.innerHTML = `
                        <span class="font-semibold">${fieldName}:</span>&nbsp;<span>${fieldValue}</span>
                    `;
                    
                    previewCustomFields.appendChild(fieldElement);
                }
            });
        }
        
        // Update layout
        const layout = document.getElementById('layoutHidden')?.value || 'standard';
        preview.className = 'business-card card-side card-front';
        
        switch (layout) {
            case 'modern':
                preview.classList.add('modern-layout');
                break;
            case 'compact':
                preview.classList.add('compact-layout');
                break;
            default:
                preview.classList.add('standard-layout');
                break;
        }
        
        // Force QR code regeneration after preview update
        setTimeout(() => {
            generateQRCode();
        }, 100);
    }
    
    // Notification system
    window.showNotification = function(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = 'fixed bottom-4 right-4 bg-white shadow-lg rounded-lg p-4 transform translate-y-0 opacity-0 transition-all duration-300 z-50 max-w-sm border border-gray-100';
        
        let iconClass, iconColor, bgColor;
        if (type === 'success') {
            iconClass = 'fas fa-check';
            iconColor = 'text-green-500';
            bgColor = 'bg-green-100';
        } else if (type === 'error') {
            iconClass = 'fas fa-times';
            iconColor = 'text-red-500';
            bgColor = 'bg-red-100';
        } else if (type === 'info') {
            iconClass = 'fas fa-info';
            iconColor = 'text-blue-500';
            bgColor = 'bg-blue-100';
        }
        
        toast.innerHTML = `
            <div class="flex items-center">
                <div class="flex-shrink-0 w-10 h-10 flex items-center justify-center rounded-full ${bgColor} ${iconColor} mr-3">
                    <i class="${iconClass}"></i>
                </div>
                <div class="flex-grow">
                    <p class="font-medium">${type.charAt(0).toUpperCase() + type.slice(1)}</p>
                    <p class="text-sm text-gray-500">${message}</p>
                </div>
                <button onclick="this.parentNode.parentNode.remove()" class="ml-2 text-gray-400 hover:text-gray-600 h-8 w-8 rounded-full hover:bg-gray-100 flex items-center justify-center transition-colors">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
        
        document.body.appendChild(toast);
        
        // Animate in
        setTimeout(() => {
            toast.classList.replace('opacity-0', 'opacity-100');
            toast.classList.replace('translate-y-0', 'translate-y-[-20px]');
        }, 10);
        
        // Automatically remove after 3 seconds
        setTimeout(() => {
            toast.classList.replace('opacity-100', 'opacity-0');
            toast.classList.replace('translate-y-[-20px]', 'translate-y-20');
            
            // Remove from DOM after animation
            setTimeout(() => {
                toast.remove();
            }, 300);
        }, 3000);
    };
});
</script>
}