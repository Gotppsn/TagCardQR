@model CardTagManager.Models.Card

@{
    ViewData["Title"] = "QR Code for " + Model.ProductName;
    Layout = "_MinimalLayout";
}

<div class="min-h-screen flex flex-col items-center justify-center p-6" style="background-color: @(Model.BackgroundColor == "#FFFFFF" ? "#f8fafc" : Model.BackgroundColor)">
    <!-- Top Navigation Bar -->
    <div class="fixed top-0 left-0 right-0 bg-white shadow-sm p-4 flex items-center justify-between z-10">
        <a href="javascript:history.back()" class="flex items-center text-gray-700 hover:text-primary-600 transition-colors group">
            <i class="fas fa-arrow-left mr-2 group-hover:-translate-x-1 transition-transform"></i>
            <span>Back</span>
        </a>
        <div class="text-center text-sm font-medium text-gray-500">QR Code for @Model.ProductName</div>
        <div class="flex gap-2">
            <button id="download-btn" class="p-2 rounded-full hover:bg-gray-100 text-gray-700 transition-colors" title="Download QR Code">
                <i class="fas fa-download"></i>
            </button>
            <button id="print-btn" class="p-2 rounded-full hover:bg-gray-100 text-gray-700 transition-colors" title="Print QR Code">
                <i class="fas fa-print"></i>
            </button>
            <button id="share-btn" class="p-2 rounded-full hover:bg-gray-100 text-gray-700 transition-colors" title="Share QR Code">
                <i class="fas fa-share-alt"></i>
            </button>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="max-w-md w-full mx-auto mt-16 mb-8">
        <div class="bg-white rounded-xl shadow-lg overflow-hidden transform transition-all duration-300 hover:shadow-xl">
            <!-- Product Banner -->
            <div class="h-2 w-full" style="background-color: @Model.AccentColor"></div>
            
            <!-- QR Code Section -->
            <div class="p-8 text-center">
                <h1 class="text-2xl font-bold mb-1" style="color: @Model.AccentColor">Scan this QR Code</h1>
                <p class="text-gray-500 mb-6">to access detailed product information via ScanShow page</p>
                
                <div class="relative group mb-6">
                    <div class="absolute -inset-0.5 bg-gradient-to-r from-blue-500 to-primary-500 rounded-lg blur opacity-30 group-hover:opacity-70 transition duration-500"></div>
                    <div class="bg-white p-6 rounded-lg shadow-sm relative flex items-center justify-center">
                        <img src="@ViewBag.QrCodeImage" alt="QR Code for @Model.ProductName" class="max-w-full" style="width: 250px; height: 250px;" id="qr-image" />
                        
                        <!-- Fullscreen button -->
                        <button id="fullscreen-btn" class="absolute bottom-2 right-2 bg-white bg-opacity-90 p-2 rounded-lg shadow-sm text-gray-600 hover:text-primary-600 opacity-0 group-hover:opacity-100 transition-opacity">
                            <i class="fas fa-expand"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Product Information -->
                <div class="mb-4" style="color: @Model.TextColor">
                    <h2 class="text-xl font-bold" style="color: @Model.AccentColor">@Model.ProductName</h2>
                    @if (!string.IsNullOrEmpty(Model.Location))
                    {
                        <p class="text-lg">@Model.Location</p>
                    }
                </div>
                
                <div class="grid grid-cols-2 gap-4 text-sm text-gray-600">
                    <div class="flex items-center justify-center border border-gray-100 rounded-lg p-2 bg-gray-50">
                        <i class="fas fa-calendar-day mr-2" style="color: @Model.AccentColor"></i>
                        <span class="font-medium">@Model.ManufactureDate.ToString("MM/dd/yyyy")</span>
                    </div>
                    <div class="flex items-center justify-center border border-gray-100 rounded-lg p-2 bg-gray-50">
                        <i class="fas fa-shield-alt mr-2" style="color: @Model.AccentColor"></i>
                        <span class="font-medium">@Model.WarrantyExpiration.ToString("MM/dd/yyyy")</span>
                    </div>
                    <div class="flex items-center justify-center border border-gray-100 rounded-lg p-2 bg-gray-50 col-span-2">
                        <i class="fas fa-map-marker-alt mr-2" style="color: @Model.AccentColor"></i>
                        <span class="font-medium">@Model.Location</span>
                    </div>
                </div>
            </div>
            
            <!-- Footer with instructions -->
            <div class="bg-gray-50 p-4 border-t border-gray-100">
                <div class="flex items-center">
                    <div class="flex-shrink-0 bg-blue-100 rounded-full p-2 mr-3">
                        <i class="fas fa-info text-blue-500"></i>
                    </div>
                    <div class="text-sm text-gray-600">
                        <p>Open your camera app and point it at the QR code to scan. The ScanShow page will open automatically and display product details.</p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Action buttons -->
        <div class="mt-6 grid grid-cols-2 gap-4">
            <a href="@Url.Action("Details", new { id = Model.Id })" class="btn-secondary py-3 text-center">
                <i class="fas fa-info-circle mr-2"></i> View Details
            </a>
            <a href="@Url.Action("ScanShow", new { id = Model.Id })" class="btn-primary py-3 text-center">
                <i class="fas fa-qrcode mr-2"></i> Preview ScanShow
            </a>
        </div>
    </div>
    
    <!-- Scan animation indicator (hidden initially) -->
    <div id="scan-success" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-20 hidden">
        <div class="bg-white rounded-xl p-8 shadow-2xl transform scale-90 opacity-0 transition-all duration-300" id="success-modal">
            <div class="flex items-center justify-center mb-4">
                <div class="w-16 h-16 rounded-full bg-green-100 flex items-center justify-center">
                    <i class="fas fa-check text-3xl text-green-500"></i>
                </div>
            </div>
            <h3 class="text-xl font-bold text-center mb-2">Successful Scan!</h3>
            <p class="text-gray-600 text-center">Opening ScanShow page with product information</p>
        </div>
    </div>
    
    <!-- Fullscreen Modal -->
    <div id="fullscreen-modal" class="fixed inset-0 bg-black bg-opacity-90 z-30 hidden flex items-center justify-center">
        <button id="close-fullscreen" class="absolute top-4 right-4 text-white text-2xl hover:text-gray-300">
            <i class="fas fa-times"></i>
        </button>
        <img src="@ViewBag.QrCodeImage" alt="QR Code for @Model.ProductName" class="max-w-full max-h-full p-4" />
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Store the current URL for sharing and QR purposes
        const baseUrl = window.location.origin;
        const scanShowUrl = `${baseUrl}/Card/ScanShow/@Model.Id`;
        
        // Fullscreen functionality
        const fullscreenBtn = document.getElementById('fullscreen-btn');
        const fullscreenModal = document.getElementById('fullscreen-modal');
        const closeFullscreen = document.getElementById('close-fullscreen');
        
        if (fullscreenBtn && fullscreenModal && closeFullscreen) {
            fullscreenBtn.addEventListener('click', function() {
                fullscreenModal.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
            });
            
            closeFullscreen.addEventListener('click', function() {
                fullscreenModal.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
            });
            
            // Also close on click outside the image
            fullscreenModal.addEventListener('click', function(e) {
                if (e.target === fullscreenModal) {
                    fullscreenModal.classList.add('hidden');
                    document.body.classList.remove('overflow-hidden');
                }
            });
        }
        
        // Print functionality
        const printBtn = document.getElementById('print-btn');
        if (printBtn) {
            printBtn.addEventListener('click', function() {
                window.print();
            });
        }
        
        // Download functionality
        const downloadBtn = document.getElementById('download-btn');
        const qrImage = document.getElementById('qr-image');
        
        if (downloadBtn && qrImage) {
            downloadBtn.addEventListener('click', function() {
                // Create a temporary link element
                const link = document.createElement('a');
                link.href = qrImage.src;
                link.download = 'qrcode-@Model.ProductName.Replace(" ", "-").ToLower()';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                // Show a toast notification
                showToast('QR Code downloaded successfully!', 'success');
            });
        }
        
        // Share functionality
        const shareBtn = document.getElementById('share-btn');
        
        if (shareBtn) {
            shareBtn.addEventListener('click', function() {
                if (navigator.share) {
                    navigator.share({
                        title: 'QR Code for @Model.ProductName',
                        text: 'Scan this QR code to access information about @Model.ProductName on the ScanShow page',
                        url: scanShowUrl
                    })
                    .then(() => showToast('Shared successfully!', 'success'))
                    .catch((error) => showToast('Error sharing: ' + error, 'error'));
                } else {
                    // Clipboard fallback
                    navigator.clipboard.writeText(scanShowUrl)
                        .then(() => showToast('ScanShow link copied to clipboard!', 'success'))
                        .catch(() => showToast('Failed to copy link', 'error'));
                }
            });
        }
        
        // Simulate scan success (for demo purposes)
        const qrImageContainer = document.querySelector('.group');
        const scanSuccess = document.getElementById('scan-success');
        const successModal = document.getElementById('success-modal');
        
        if (qrImageContainer && scanSuccess && successModal) {
            qrImageContainer.addEventListener('dblclick', function() {
                // Show the success overlay
                scanSuccess.classList.remove('hidden');
                
                // Animate the success modal
                setTimeout(() => {
                    successModal.classList.remove('scale-90', 'opacity-0');
                    successModal.classList.add('scale-100', 'opacity-100');
                }, 10);
                
                // Hide after 2 seconds and redirect to ScanShow
                setTimeout(() => {
                    successModal.classList.remove('scale-100', 'opacity-100');
                    successModal.classList.add('scale-110', 'opacity-0');
                    
                    setTimeout(() => {
                        scanSuccess.classList.add('hidden');
                        successModal.classList.remove('scale-110');
                        successModal.classList.add('scale-90');
                        
                        // Redirect to ScanShow page
                        window.location.href = scanShowUrl;
                    }, 300);
                }, 2000);
            });
        }
        
        // Toast notification system
        function showToast(message, type = 'info') {
            // Create toast container if it doesn't exist
            let toastContainer = document.getElementById('toast-container');
            
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.className = 'fixed bottom-4 right-4 z-50 flex flex-col gap-2';
                document.body.appendChild(toastContainer);
            }
            
            // Create toast element
            const toast = document.createElement('div');
            toast.className = 'bg-white rounded-lg shadow-lg border border-gray-100 p-4 transform transition-all duration-300 translate-x-full';
            
            // Set icon and background based on type
            let iconClass = 'fa-info-circle text-blue-500';
            let bgClass = 'bg-blue-50';
            
            if (type === 'success') {
                iconClass = 'fa-check-circle text-green-500';
                bgClass = 'bg-green-50';
            } else if (type === 'error') {
                iconClass = 'fa-exclamation-circle text-red-500';
                bgClass = 'bg-red-50';
            } else if (type === 'warning') {
                iconClass = 'fa-exclamation-triangle text-yellow-500';
                bgClass = 'bg-yellow-50';
            }
            
            toast.innerHTML = `
                <div class="flex items-center">
                    <div class="flex-shrink-0 w-10 h-10 rounded-full ${bgClass} flex items-center justify-center">
                        <i class="fas ${iconClass}"></i>
                    </div>
                    <div class="ml-3 flex-grow">
                        <p class="text-sm font-medium text-gray-900">${message}</p>
                    </div>
                    <button class="ml-auto text-gray-400 hover:text-gray-500" onclick="this.parentNode.parentNode.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            // Add to container
            toastContainer.appendChild(toast);
            
            // Animate in
            setTimeout(() => {
                toast.classList.remove('translate-x-full');
            }, 10);
            
            // Remove after 5 seconds
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 5000);
        }
    });
</script>
}