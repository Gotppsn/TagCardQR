@model CardTagManager.Models.Card

@{
    ViewData["Title"] = "Export Product Tag";
    Layout = "_Layout";
}

<div class="container mx-auto px-4 py-6">
    <div class="mb-6">
        <nav class="flex" aria-label="Breadcrumb">
            <ol class="inline-flex items-center space-x-1 md:space-x-3">
                <li class="inline-flex items-center">
                    <a href="@(Context.Request.PathBase)/" class="inline-flex items-center text-sm font-medium text-gray-500 hover:text-primary-600">
                        <i class="fas fa-home mr-2"></i>
                        Home
                    </a>
                </li>
                <li>
                    <div class="flex items-center">
                        <i class="fas fa-chevron-right text-gray-400 mx-2 text-xs"></i>
                        <a asp-action="Index" class="text-sm font-medium text-gray-500 hover:text-primary-600">Products</a>
                    </div>
                </li>
                <li>
                    <div class="flex items-center">
                        <i class="fas fa-chevron-right text-gray-400 mx-2 text-xs"></i>
                        <a asp-action="Details" asp-route-id="@Model.Id" class="text-sm font-medium text-gray-500 hover:text-primary-600">@Model.ProductName</a>
                    </div>
                </li>
                <li aria-current="page">
                    <div class="flex items-center">
                        <i class="fas fa-chevron-right text-gray-400 mx-2 text-xs"></i>
                        <span class="text-sm font-medium text-primary-600">Export Tag</span>
                    </div>
                </li>
            </ol>
        </nav>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
        <!-- Export Options Panel -->
        <div class="lg:col-span-1">
            <div class="card bg-white rounded-xl shadow-sm border border-gray-100">
                <div class="card-header flex items-center bg-gradient-to-r from-primary-600 to-primary-500 text-white p-4 rounded-t-xl">
                    <i class="fas fa-sliders-h text-xl mr-3"></i>
                    <h2 class="text-lg font-semibold">Export Options</h2>
                </div>
                <div class="card-body p-5 space-y-5">
                    <!-- Format Options -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Export Format</label>
                        <div class="grid grid-cols-3 gap-3">
                            <div class="format-option border border-gray-300 rounded-lg p-3 cursor-pointer hover:border-primary-500 transition-all active" data-format="png">
                                <div class="flex items-center justify-center bg-gray-50 rounded mb-2 p-3">
                                    <i class="fas fa-file-image text-gray-500 text-xl"></i>
                                </div>
                                <p class="text-xs text-center font-medium">PNG Image</p>
                            </div>
                            <div class="format-option border border-gray-300 rounded-lg p-3 cursor-pointer hover:border-primary-500 transition-all" data-format="pdf">
                                <div class="flex items-center justify-center bg-gray-50 rounded mb-2 p-3">
                                    <i class="fas fa-file-pdf text-gray-500 text-xl"></i>
                                </div>
                                <p class="text-xs text-center font-medium">PDF Document</p>
                            </div>
                            <div class="format-option border border-gray-300 rounded-lg p-3 cursor-pointer hover:border-primary-500 transition-all" data-format="print">
                                <div class="flex items-center justify-center bg-gray-50 rounded mb-2 p-3">
                                    <i class="fas fa-print text-gray-500 text-xl"></i>
                                </div>
                                <p class="text-xs text-center font-medium">Print</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Size Options -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Tag Size</label>
                        <div class="grid grid-cols-3 gap-3">
                            <div class="size-option border border-gray-300 rounded-lg p-3 cursor-pointer hover:border-primary-500 transition-all active" data-size="standard">
                                <div class="aspect-w-7 aspect-h-4 flex items-center justify-center bg-gray-50 rounded mb-2 p-1">
                                    <div class="text-sm text-gray-500">3.5 × 2 in</div>
                                </div>
                                <p class="text-xs text-center font-medium">Standard</p>
                            </div>
                            <div class="size-option border border-gray-300 rounded-lg p-3 cursor-pointer hover:border-primary-500 transition-all" data-size="large">
                                <div class="aspect-w-7 aspect-h-4 flex items-center justify-center bg-gray-50 rounded mb-2 p-1">
                                    <div class="text-sm text-gray-500">4 × 2.5 in</div>
                                </div>
                                <p class="text-xs text-center font-medium">Large</p>
                            </div>
                            <div class="size-option border border-gray-300 rounded-lg p-3 cursor-pointer hover:border-primary-500 transition-all" data-size="custom">
                                <div class="aspect-w-7 aspect-h-4 flex items-center justify-center bg-gray-50 rounded mb-2 p-1">
                                    <div class="text-sm text-gray-500">Custom</div>
                                </div>
                                <p class="text-xs text-center font-medium">Custom</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Custom Size -->
                    <div id="custom-size-controls" class="hidden p-4 rounded-lg bg-gray-50 mb-4">
                        <h3 class="text-sm font-medium text-gray-700 mb-2">Custom Dimensions</h3>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-xs text-gray-500 mb-1">Width (px)</label>
                                <input type="number" value="600" min="300" max="1200" step="50" id="custom-width" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                            </div>
                            <div>
                                <label class="block text-xs text-gray-500 mb-1">Height (px)</label>
                                <input type="number" value="350" min="200" max="800" step="50" id="custom-height" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                            </div>
                        </div>
                    </div>

                    <!-- QR Code Settings -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">QR Code Settings</label>
                        <div class="space-y-3">
                            <div>
                                <label class="block text-xs text-gray-500 mb-1">QR Code Size</label>
                                <div class="flex items-center">
                                    <input type="range" id="qr-size" min="100" max="400" step="50" value="200" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
                                    <span id="qr-size-value" class="ml-2 text-sm text-gray-700 min-w-[50px] text-center">200px</span>
                                </div>
                            </div>
                            
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-xs text-gray-500 mb-1">QR Code Only</label>
                                    <div class="relative inline-block w-10 mr-2 align-middle select-none">
                                        <input type="checkbox" id="qr-only" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"/>
                                        <label for="qr-only" class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"></label>
                                    </div>
                                </div>
                                <div>
                                    <label class="block text-xs text-gray-500 mb-1">Error Correction</label>
                                    <select id="error-correction" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
                                        <option value="L">Low (7%)</option>
                                        <option value="M" selected>Medium (15%)</option>
                                        <option value="Q">Quartile (25%)</option>
                                        <option value="H">High (30%)</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Content Options -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Card Content</label>
                        <div class="space-y-2">
                            <label class="flex items-center cursor-pointer">
                                <input type="checkbox" id="toggle-category" class="form-checkbox h-4 w-4 text-primary-600 rounded border-gray-300 focus:ring-primary-500" checked>
                                <span class="ml-2 text-sm text-gray-700">Show Category</span>
                            </label>
                            <label class="flex items-center cursor-pointer">
                                <input type="checkbox" id="toggle-warranty" class="form-checkbox h-4 w-4 text-primary-600 rounded border-gray-300 focus:ring-primary-500" checked>
                                <span class="ml-2 text-sm text-gray-700">Show Warranty Date</span>
                            </label>
                            <label class="flex items-center cursor-pointer">
                                <input type="checkbox" id="toggle-maintenance" class="form-checkbox h-4 w-4 text-primary-600 rounded border-gray-300 focus:ring-primary-500" checked>
                                <span class="ml-2 text-sm text-gray-700">Show Maintenance Info</span>
                            </label>
                        </div>
                    </div>

                    <div class="pt-4 border-t border-gray-200">
                        <button id="apply-options" class="w-full btn-primary py-3 uppercase text-sm font-medium tracking-wider">
                            <i class="fas fa-check mr-2"></i> Apply Settings
                        </button>
                    </div>
                </div>
            </div>

            <!-- Download Button -->
            <div class="mt-4">
                <button id="download-btn" class="w-full btn-primary py-4 text-center flex items-center justify-center group bg-primary-600 hover:bg-primary-700 transition-all">
                    <i class="fas fa-download text-xl mr-3 group-hover:animate-bounce"></i>
                    <span class="text-lg font-bold">Download Tag</span>
                </button>
            </div>
        </div>

        <!-- Preview Section -->
        <div class="lg:col-span-2">
            <div class="card bg-white rounded-xl shadow-sm border border-gray-100">
                <div class="card-header bg-gray-50 p-4 rounded-t-xl">
                    <div class="flex justify-between items-center">
                        <h2 class="text-lg font-semibold text-gray-800 flex items-center">
                            <i class="fas fa-eye text-primary-500 mr-2"></i> Export Preview
                        </h2>
                        <div class="flex space-x-2">
                            <button type="button" id="toggle-dark-mode" class="p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition-colors">
                                <i class="fas fa-moon"></i>
                            </button>
                            <button type="button" id="zoom-in" class="p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition-colors">
                                <i class="fas fa-search-plus"></i>
                            </button>
                            <button type="button" id="zoom-out" class="p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition-colors">
                                <i class="fas fa-search-minus"></i>
                            </button>
                            <button type="button" id="rotate-preview" class="p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition-colors">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="p-8 flex items-center justify-center bg-gray-100 min-h-[400px]" id="preview-container">
                    <div id="zoom-container" class="transform transition-transform duration-300" style="transform: scale(1);">
                        <!-- Preview Card -->
                        <div class="card-preview">
                            <div class="tag-card" id="tag-preview" style="background-color: @Model.BackgroundColor; color: @Model.TextColor">
                                <div class="card-content">
                                    <div class="card-info">
                                        <span class="category-badge" style="background-color: @Model.AccentColor; color: @Model.BackgroundColor">
                                            @Model.Category
                                        </span>
                                        <h3 class="card-name mt-1" style="color: @Model.AccentColor">@Model.ProductName</h3>
                                        
                                        <div class="card-details">
                                            <p><i class="fas fa-map-marker-alt" style="color: @Model.AccentColor"></i><span>@Model.Location</span></p>
                                            <p><i class="fas fa-calendar-day" style="color: @Model.AccentColor"></i><span>Mfg: @Model.ManufactureDate.ToString("MM/dd/yyyy")</span></p>
                                            <p class="warranty-info"><i class="fas fa-shield-alt" style="color: @Model.AccentColor"></i><span>Warranty: @Model.WarrantyExpiration.ToString("MM/dd/yyyy")</span></p>
                                            @if (!string.IsNullOrEmpty(Model.MaintenanceInfo))
                                            {
                                                <p class="maintenance-info"><i class="fas fa-tools" style="color: @Model.AccentColor"></i><span>@(Model.MaintenanceInfo.Length > 40 ? Model.MaintenanceInfo.Substring(0, 37) + "..." : Model.MaintenanceInfo)</span></p>
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="card-qr">
                                        @if (!string.IsNullOrEmpty(ViewBag.QrCodeImage))
                                        {
                                            <img src="@ViewBag.QrCodeImage" alt="QR Code" class="qr-code-image" />
                                            <p class="scan-text">Scan for Product Info</p>
                                        }
                                        else
                                        {
                                            <div class="text-center text-red-500 p-2 border border-red-200 rounded bg-red-50">
                                                <i class="fas fa-exclamation-triangle"></i> QR code not available
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer flex justify-between items-center p-4 bg-gray-50 rounded-b-xl">
                    <div class="text-xs text-gray-500">
                        <span id="zoom-level">Zoom: 100%</span> • <span id="format-label">PNG</span> • <span id="size-label">Standard Size</span>
                    </div>
                    <div class="flex space-x-3">
                        <a asp-action="Details" asp-route-id="@Model.Id" class="text-sm text-gray-500 hover:text-primary-600 flex items-center">
                            <i class="fas fa-arrow-left mr-1"></i> Back to Details
                        </a>
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="text-sm text-gray-500 hover:text-primary-600 flex items-center">
                            <i class="fas fa-edit mr-1"></i> Edit Product
                        </a>
                    </div>
                </div>
            </div>

            <!-- QR Code Only Preview -->
            <div id="qr-only-preview" class="hidden mt-6 card bg-white rounded-xl shadow-sm border border-gray-100">
                <div class="card-header bg-gray-50 p-4 rounded-t-xl">
                    <h3 class="font-medium text-gray-700">QR Code Preview</h3>
                </div>
                <div class="p-8 flex items-center justify-center bg-gray-100">
                    <div class="qr-code-container bg-white p-6 rounded-lg shadow-sm">
                        @if (!string.IsNullOrEmpty(ViewBag.QrCodeImage))
                        {
                            <img src="@ViewBag.QrCodeImage" alt="QR Code" class="max-w-full max-h-[300px]" id="qr-only-image" />
                        }
                        else
                        {
                            <div class="text-center text-red-500 p-8 border border-red-200 rounded bg-red-50">
                                <i class="fas fa-exclamation-triangle text-3xl mb-2"></i>
                                <p>QR code not available</p>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-footer flex justify-between items-center p-4 bg-gray-50 rounded-b-xl">
                    <div class="text-xs text-gray-500">
                        Size: <span id="qr-only-size">200px × 200px</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Error notification -->
    <div id="error-toast" class="fixed bottom-4 right-4 bg-red-50 border-l-4 border-red-500 text-red-700 p-4 rounded shadow-lg hidden transform transition-all duration-500 z-50">
        <div class="flex">
            <div class="flex-shrink-0">
                <i class="fas fa-exclamation-circle text-red-500"></i>
            </div>
            <div class="ml-3">
                <p class="text-sm font-medium" id="error-message">Error message here</p>
            </div>
            <div class="ml-auto pl-3">
                <button type="button" class="inline-flex text-red-500 focus:outline-none focus:text-red-600" onclick="closeErrorToast()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>
</div>

@section Styles {
<style>
    /* Toggle Switch Styles */
    .toggle-checkbox:checked {
        right: 0;
        border-color: #0284c7;
    }
    .toggle-checkbox:checked + .toggle-label {
        background-color: #0284c7;
    }

    /* Card Preview Styles */
    .tag-card {
        width: 3.5in;
        height: 2in;
        padding: 0.25in;
        border-radius: 0.1in;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .card-content {
        display: flex;
        height: 100%;
    }

    .card-info {
        flex: 1;
        padding-right: 0.2in;
    }

    .card-qr {
        width: 1.2in;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .category-badge {
        display: inline-block;
        padding: 0.1in 0.15in;
        border-radius: 0.1in;
        font-size: 0.12in;
        font-weight: bold;
        text-transform: uppercase;
    }

    .card-name {
        font-size: 0.17in;
        font-weight: bold;
        margin-top: 0.08in;
        margin-bottom: 0.08in;
    }

    .card-details {
        font-size: 0.12in;
        line-height: 1.3;
    }

    .card-details p {
        margin-bottom: 0.05in;
        display: flex;
        align-items: center;
    }

    .card-details i {
        width: 0.15in;
        margin-right: 0.05in;
    }

    .qr-code-image {
        width: 1in;
        height: 1in;
        object-fit: contain;
    }

    .scan-text {
        font-size: 0.08in;
        margin-top: 0.05in;
        text-align: center;
        opacity: 0.7;
    }

    /* Size variations */
    .size-standard {
        width: 3.5in;
        height: 2in;
    }

    .size-large {
        width: 4in;
        height: 2.5in;
    }

    /* Format option active state */
    .format-option.active, .size-option.active {
        border-color: #0284c7;
        background-color: #f0f9ff;
    }

    /* Animation for download button */
    @@keyframes bounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }
    .group-hover\:animate-bounce:hover {
        animation: bounce 0.5s infinite;
    }

    /* Print-specific styles */
    @@media print {
        body * {
            visibility: hidden;
        }
        #tag-preview, #tag-preview * {
            visibility: visible;
        }
        #tag-preview {
            position: absolute;
            left: 0;
            top: 0;
            width: 3.5in !important;
            height: 2in !important;
            margin: 0;
            padding: 0.25in;
            box-shadow: none;
        }
        .card-preview {
            margin: 0;
            padding: 0;
        }
    }
</style>
}

@section Scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Variables
        let zoomLevel = 1;
        let isRotated = false;
        let isDarkMode = false;
        let currentFormat = 'png';
        let currentSize = 'standard';
        let qrOnly = false;
        let qrSize = 200;
        
        // Elements
        const zoomIn = document.getElementById('zoom-in');
        const zoomOut = document.getElementById('zoom-out');
        const rotatePreview = document.getElementById('rotate-preview');
        const toggleDarkMode = document.getElementById('toggle-dark-mode');
        const zoomContainer = document.getElementById('zoom-container');
        const zoomLevelDisplay = document.getElementById('zoom-level');
        const previewContainer = document.getElementById('preview-container');
        const tagPreview = document.getElementById('tag-preview');
        const formatLabel = document.getElementById('format-label');
        const sizeLabel = document.getElementById('size-label');
        const qrOnlyPreview = document.getElementById('qr-only-preview');
        const qrOnlyToggle = document.getElementById('qr-only');
        const qrSizeSlider = document.getElementById('qr-size');
        const qrSizeValue = document.getElementById('qr-size-value');
        const qrOnlyImage = document.getElementById('qr-only-image');
        const qrOnlySize = document.getElementById('qr-only-size');
        const downloadBtn = document.getElementById('download-btn');
        const formatOptions = document.querySelectorAll('.format-option');
        const sizeOptions = document.querySelectorAll('.size-option');
        const customSizeControls = document.getElementById('custom-size-controls');
        const customWidth = document.getElementById('custom-width');
        const customHeight = document.getElementById('custom-height');
        const toggleCategory = document.getElementById('toggle-category');
        const toggleWarranty = document.getElementById('toggle-warranty');
        const toggleMaintenance = document.getElementById('toggle-maintenance');
        const applyOptionsBtn = document.getElementById('apply-options');
        const errorCorrection = document.getElementById('error-correction');
        const errorToast = document.getElementById('error-toast');
        const errorMessage = document.getElementById('error-message');
        
        // Check if QR code is available
        const qrCodeImg = document.querySelector('.qr-code-image');
        const qrCodeAvailable = !!qrCodeImg;
        
        if (!qrCodeAvailable) {
            showError("QR code could not be generated. Please try again.");
        }
        
        // Error handling function
        function showError(message) {
            if (errorToast && errorMessage) {
                errorMessage.textContent = message;
                errorToast.classList.remove('hidden');
                setTimeout(() => {
                    closeErrorToast();
                }, 5000);
            } else {
                console.error(message);
                alert(message);
            }
        }
        
        function closeErrorToast() {
            if (errorToast) {
                errorToast.classList.add('hidden');
            }
        }
        
        // Zoom functionality
        if (zoomIn) {
            zoomIn.addEventListener('click', function() {
                if (zoomLevel < 1.5) {
                    zoomLevel += 0.1;
                    updateZoom();
                }
            });
        }
        
        if (zoomOut) {
            zoomOut.addEventListener('click', function() {
                if (zoomLevel > 0.5) {
                    zoomLevel -= 0.1;
                    updateZoom();
                }
            });
        }
        
        function updateZoom() {
            if (zoomContainer && zoomLevelDisplay) {
                zoomContainer.style.transform = `scale(${zoomLevel})`;
                zoomLevelDisplay.textContent = `Zoom: ${Math.round(zoomLevel * 100)}%`;
            }
        }
        
        // Rotate functionality
        if (rotatePreview && tagPreview) {
            rotatePreview.addEventListener('click', function() {
                isRotated = !isRotated;
                tagPreview.style.transform = isRotated ? 'rotate(90deg)' : 'rotate(0deg)';
            });
        }
        
        // Dark mode toggle
        if (toggleDarkMode && previewContainer) {
            toggleDarkMode.addEventListener('click', function() {
                isDarkMode = !isDarkMode;
                if (isDarkMode) {
                    previewContainer.classList.add('bg-gray-800');
                    this.innerHTML = '<i class="fas fa-sun"></i>';
                    this.classList.add('text-yellow-500');
                    this.classList.remove('text-gray-700');
                } else {
                    previewContainer.classList.remove('bg-gray-800');
                    this.innerHTML = '<i class="fas fa-moon"></i>';
                    this.classList.remove('text-yellow-500');
                    this.classList.add('text-gray-700');
                }
            });
        }
        
        // Format options
        formatOptions.forEach(option => {
            option.addEventListener('click', function() {
                formatOptions.forEach(o => {
                    o.classList.remove('active');
                });
                
                this.classList.add('active');
                currentFormat = this.getAttribute('data-format');
                if (formatLabel) {
                    formatLabel.textContent = currentFormat === 'print' ? 'PRINT' : currentFormat.toUpperCase();
                }
            });
        });
        
        // Size options
        sizeOptions.forEach(option => {
            option.addEventListener('click', function() {
                sizeOptions.forEach(o => {
                    o.classList.remove('active');
                });
                
                this.classList.add('active');
                currentSize = this.getAttribute('data-size');
                
                if (currentSize === 'custom') {
                    if (customSizeControls) {
                        customSizeControls.classList.remove('hidden');
                    }
                    if (sizeLabel) {
                        sizeLabel.textContent = 'Custom Size';
                    }
                } else {
                    if (customSizeControls) {
                        customSizeControls.classList.add('hidden');
                    }
                    if (sizeLabel) {
                        sizeLabel.textContent = currentSize === 'standard' ? 'Standard Size' : 'Large Size';
                    }
                    updateCardSize(currentSize);
                }
            });
        });
        
        // QR Code Only toggle
        if (qrOnlyToggle && qrOnlyPreview) {
            qrOnlyToggle.addEventListener('change', function() {
                qrOnly = this.checked;
                
                if (qrOnly) {
                    qrOnlyPreview.classList.remove('hidden');
                    updateQrCodeSize();
                } else {
                    qrOnlyPreview.classList.add('hidden');
                }
            });
        }
        
        // QR Size slider
        if (qrSizeSlider && qrSizeValue) {
            qrSizeSlider.addEventListener('input', function() {
                qrSize = this.value;
                qrSizeValue.textContent = `${qrSize}px`;
                updateQrCodeSize();
            });
        }
        
        function updateQrCodeSize() {
            if (qrOnlyImage && qrOnlySize) {
                qrOnlyImage.style.width = `${qrSize}px`;
                qrOnlyImage.style.height = `${qrSize}px`;
                qrOnlySize.textContent = `${qrSize}px × ${qrSize}px`;
            }
        }
        
        // Update card size
        function updateCardSize(size) {
            if (!tagPreview) return;
            
            // Reset classes
            tagPreview.classList.remove('size-standard', 'size-large');
            
            // Apply appropriate size class
            if (size === 'standard') {
                tagPreview.classList.add('size-standard');
                tagPreview.style.width = '3.5in';
                tagPreview.style.height = '2in';
            } else if (size === 'large') {
                tagPreview.classList.add('size-large');
                tagPreview.style.width = '4in';
                tagPreview.style.height = '2.5in';
            } else if (size === 'custom') {
                const width = customWidth?.value || 600;
                const height = customHeight?.value || 350;
                
                tagPreview.style.width = `${width}px`;
                tagPreview.style.height = `${height}px`;
                if (sizeLabel) {
                    sizeLabel.textContent = `${width}px × ${height}px`;
                }
            }
        }
        
        // Custom size controls
        if (customWidth) {
            customWidth.addEventListener('change', function() {
                if (currentSize === 'custom') {
                    updateCardSize('custom');
                }
            });
        }
        
        if (customHeight) {
            customHeight.addEventListener('change', function() {
                if (currentSize === 'custom') {
                    updateCardSize('custom');
                }
            });
        }
        
        // Content toggles
        if (toggleCategory) {
            toggleCategory.addEventListener('change', function() {
                const categoryBadge = document.querySelector('.category-badge');
                if (categoryBadge) {
                    categoryBadge.style.display = this.checked ? 'inline-block' : 'none';
                }
            });
        }
        
        if (toggleWarranty) {
            toggleWarranty.addEventListener('change', function() {
                const warrantyInfo = document.querySelector('.warranty-info');
                if (warrantyInfo) {
                    warrantyInfo.style.display = this.checked ? 'flex' : 'none';
                }
            });
        }
        
        if (toggleMaintenance) {
            toggleMaintenance.addEventListener('change', function() {
                const maintenanceInfo = document.querySelector('.maintenance-info');
                if (maintenanceInfo) {
                    maintenanceInfo.style.display = this.checked ? 'flex' : 'none';
                }
            });
        }
        
        // Apply options button
        if (applyOptionsBtn) {
            applyOptionsBtn.addEventListener('click', function() {
                // Apply all settings at once
                updateCardSize(currentSize);
                
                // Show success feedback
                this.innerHTML = '<i class="fas fa-check-circle mr-2"></i> Settings Applied';
                this.classList.add('bg-green-600');
                this.classList.remove('bg-primary-600');
                
                setTimeout(() => {
                    this.innerHTML = '<i class="fas fa-check mr-2"></i> Apply Settings';
                    this.classList.remove('bg-green-600');
                    this.classList.add('bg-primary-600');
                }, 2000);
            });
        }
        
        // Download functionality
        if (downloadBtn) {
            downloadBtn.addEventListener('click', function() {
                if (!qrCodeAvailable) {
                    showError("QR code is not available. Cannot export card.");
                    return;
                }
                
                try {
                    // Different export methods depending on format
                    if (currentFormat === 'print') {
                        // For print, open print dialog
                        window.print();
                    } else if (qrOnly) {
                        // For QR code only export
                        exportQrCodeOnly();
                    } else {
                        // For full card export
                        exportFullCard();
                    }
                } catch (error) {
                    console.error("Export error:", error);
                    showError(`Export failed: ${error.message || "Unknown error"}`);
                }
            });
        }
        
        function exportQrCodeOnly() {
            if (!qrCodeImg) {
                showError("QR code image not available");
                return;
            }
            
            const cardName = "@Model.ProductName".replace(/[^a-z0-9]/gi, '_').toLowerCase();
            
            try {
                // Create a canvas element
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // Set canvas dimensions
                canvas.width = qrSize;
                canvas.height = qrSize;
                
                // Create a new Image object
                const img = new Image();
                img.crossOrigin = 'Anonymous';
                img.src = qrCodeImg.src;
                
                // Once the image is loaded, draw it on the canvas and export
                img.onload = function() {
                    try {
                        ctx.drawImage(img, 0, 0, qrSize, qrSize);
                        
                        if (currentFormat === 'png') {
                            // PNG export
                            const pngUrl = canvas.toDataURL('image/png');
                            downloadImage(pngUrl, `${cardName}_qrcode.png`);
                        } else if (currentFormat === 'pdf') {
                            // PDF export
                            const { jsPDF } = window.jspdf;
                            if (!jsPDF) {
                                throw new Error("PDF library not loaded");
                            }
                            
                            const pdf = new jsPDF({
                                orientation: 'portrait',
                                unit: 'mm',
                                format: [100, 100]
                            });
                            
                            const imgData = canvas.toDataURL('image/png');
                            pdf.addImage(imgData, 'PNG', 10, 10, 80, 80);
                            pdf.save(`${cardName}_qrcode.pdf`);
                        }
                    } catch (error) {
                        console.error("Error creating QR export:", error);
                        showError(`Failed to create QR export: ${error.message}`);
                    }
                };
                
                img.onerror = function() {
                    showError("Failed to load QR code image");
                };
            } catch (error) {
                console.error("Error in QR code export:", error);
                showError(`QR code export failed: ${error.message}`);
            }
        }
        
        function exportFullCard() {
            const cardName = "@Model.ProductName".replace(/[^a-z0-9]/gi, '_').toLowerCase();
            
            // Check if HTML2Canvas is loaded
            if (typeof html2canvas !== 'function') {
                showError("Required libraries not loaded. Please refresh the page and try again.");
                return;
            }
            
            // Use html2canvas to capture the card
            html2canvas(document.getElementById('tag-preview'), {
                scale: 2, // Higher quality
                allowTaint: true,
                useCORS: true,
                logging: false
            }).then(canvas => {
                try {
                    if (currentFormat === 'png') {
                        // PNG export
                        const pngUrl = canvas.toDataURL('image/png');
                        downloadImage(pngUrl, `${cardName}_card.png`);
                    } else if (currentFormat === 'pdf') {
                        // PDF export
                        const { jsPDF } = window.jspdf;
                        if (!jsPDF) {
                            throw new Error("PDF library not loaded");
                        }
                        
                        let width, height;
                        if (currentSize === 'standard') {
                            width = 88.9; // 3.5 inches in mm
                            height = 50.8; // 2 inches in mm
                        } else if (currentSize === 'large') {
                            width = 101.6; // 4 inches in mm
                            height = 63.5; // 2.5 inches in mm
                        } else if (currentSize === 'custom') {
                            // Convert pixels to mm (approximate)
                            width = (customWidth?.value || 600) * 0.26;
                            height = (customHeight?.value || 350) * 0.26;
                        }
                        
                        const pdf = new jsPDF({
                            orientation: width > height ? 'landscape' : 'portrait',
                            unit: 'mm',
                            format: [width + 20, height + 20]
                        });
                        
                        const imgData = canvas.toDataURL('image/png');
                        pdf.addImage(imgData, 'PNG', 10, 10, width, height);
                        pdf.save(`${cardName}_card.pdf`);
                    }
                } catch (error) {
                    console.error("Error in card export:", error);
                    showError(`Card export failed: ${error.message}`);
                }
            }).catch(error => {
                console.error("Error capturing card:", error);
                showError(`Failed to capture card: ${error.message}`);
            });
        }
        
        function downloadImage(dataUrl, filename) {
            try {
                const link = document.createElement('a');
                link.href = dataUrl;
                link.download = filename;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } catch (error) {
                console.error("Download error:", error);
                showError(`Download failed: ${error.message}`);
            }
        }
        
        // Check if libraries are loaded
        if (typeof html2canvas !== 'function') {
            console.warn("html2canvas library not loaded");
        }
        
        if (typeof window.jspdf === 'undefined' || typeof window.jspdf.jsPDF !== 'function') {
            console.warn("jsPDF library not loaded");
        }
        
        // Initialize preview
        updateQrCodeSize();
    });
</script>
}