@model CardTagManager.Models.Card

@{
    ViewData["Title"] = "Product Details";
}

<!-- Breadcrumb navigation -->
<nav class="mb-5 py-3 px-4 bg-white rounded-lg shadow-sm flex items-center text-sm">
    <a href="/" class="text-gray-500 hover:text-primary-600">
        <i class="fas fa-home"></i>
    </a>
    <span class="mx-2 text-gray-400">/</span>
    <a asp-action="Index" class="text-gray-500 hover:text-primary-600">Products</a>
    <span class="mx-2 text-gray-400">/</span>
    <span class="text-primary-600 font-medium truncate">@Model.ProductName</span>
</nav>

<!-- Product header -->
<div class="mb-8 bg-white rounded-xl shadow-sm overflow-hidden border border-gray-100">
    <div class="relative h-24 bg-gradient-to-r from-primary-600 to-primary-400 flex items-end">
        <div class="absolute top-4 right-4 flex space-x-2">
            <a asp-action="Edit" asp-route-id="@Model.Id" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all">
                <i class="fas fa-edit"></i>
            </a>
            <a asp-action="Print" asp-route-id="@Model.Id" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all">
                <i class="fas fa-print"></i>
            </a>
            <a asp-action="QrCode" asp-route-id="@Model.Id" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all">
                <i class="fas fa-qrcode"></i>
            </a>
            <button id="share-button" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all">
                <i class="fas fa-share-alt"></i>
            </button>
        </div>
        <div class="w-full h-16 bg-white rounded-t-3xl"></div>
    </div>
    <div class="px-8 pb-6 pt-2">
        <div class="flex flex-col md:flex-row md:items-end gap-6">
            <div class="flex-shrink-0 -mt-12">
                <div class="w-20 h-20 rounded-xl bg-white shadow-md border border-gray-100 flex items-center justify-center text-2xl text-primary-500">
                    @switch(Model.Category?.ToLower())
                    {
                        case var c when c != null && c.Contains("chemical"):
                            <i class="fas fa-flask"></i>
                            break;
                        case var c when c != null && c.Contains("equipment"):
                            <i class="fas fa-tools"></i>
                            break;
                        case var c when c != null && c.Contains("safety"):
                            <i class="fas fa-hard-hat"></i>
                            break;
                        default:
                            <i class="fas fa-box"></i>
                            break;
                    }
                </div>
            </div>
            <div class="flex-grow">
                <div class="flex flex-wrap items-start gap-3 mb-2">
                    <span class="px-3 py-1 text-xs font-semibold rounded-full"
                          style="background-color: @Model.AccentColor; color: @Model.BackgroundColor">
                        @Model.Category
                    </span>
                    
                    @if (Model.WarrantyExpiration < DateTime.Now)
                    {
                        <span class="px-3 py-1 bg-red-100 text-red-800 text-xs font-medium rounded-full">
                            <i class="fas fa-exclamation-circle mr-1"></i> Warranty Expired
                        </span>
                    }
                    else if (Model.WarrantyExpiration < DateTime.Now.AddMonths(3))
                    {
                        <span class="px-3 py-1 bg-yellow-100 text-yellow-800 text-xs font-medium rounded-full">
                            <i class="fas fa-clock mr-1"></i> Warranty Expiring Soon
                        </span>
                    }
                    else
                    {
                        <span class="px-3 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">
                            <i class="fas fa-shield-alt mr-1"></i> In Warranty
                        </span>
                    }
                </div>
                <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-1">@Model.ProductName</h1>
                <div class="flex flex-wrap items-center gap-x-4 gap-y-2 text-gray-500">
                    <div class="flex items-center">
                        <i class="fas fa-industry mr-2 text-primary-400"></i>
                        <span>@Model.Manufacturer</span>
                    </div>
                    <div class="flex items-center">
                        <i class="fas fa-tag mr-2 text-primary-400"></i>
                        <span>@Model.ModelNumber</span>
                    </div>
                    <div class="flex items-center">
                        <i class="fas fa-map-marker-alt mr-2 text-primary-400"></i>
                        <span>@Model.Location</span>
                    </div>
                </div>
            </div>
            <div class="flex flex-col md:items-end mt-4 md:mt-0">
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn-primary w-full md:w-auto mb-2 justify-center">
                    <i class="fas fa-edit mr-2"></i> Edit Product
                </a>
                <div class="text-xs text-gray-500">
                    Last updated: @Model.UpdatedAt.ToString("MMM dd, yyyy HH:mm")
                </div>
            </div>
        </div>
    </div>
</div>

<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <!-- Left Sidebar: Card Preview & Actions -->
    <div class="lg:col-span-1">
        <div class="sticky top-6 space-y-6">
            <!-- Card Preview -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <h2 class="text-lg font-bold mb-5 flex items-center">
                    <i class="fas fa-id-card text-primary-500 mr-2"></i> Product Tag Preview
                </h2>
                
                <!-- Add the image code here -->
                @if (!string.IsNullOrEmpty(Model.ImagePath))
                {
                    <div class="mb-4 bg-white p-3 rounded-lg shadow-sm border border-gray-100">
                        <h4 class="text-sm font-medium text-gray-700 mb-2">Product Image</h4>
                        <div class="flex justify-center">
                            <img src="@Model.ImagePath" alt="@Model.ProductName" class="max-w-full h-auto rounded shadow-sm" style="max-height: 200px;">
                        </div>
                    </div>
                }
                
                <div class="business-card transform hover:scale-105 transition-all duration-300 mb-6"
                    style="background-color: @Model.BackgroundColor; color: @Model.TextColor; perspective: 1000px;">
                    <div class="card-flip-container relative w-full h-full">
                        <div class="card-side card-front absolute w-full h-full rounded-lg p-5">
                            <div class="h-full flex flex-col">
                                <div class="mb-3">
                                    <span class="inline-flex items-center px-2 py-1 text-xs font-bold rounded-full" 
                                          style="background-color: @Model.AccentColor; color: @Model.BackgroundColor">
                                        @Model.Category
                                    </span>
                                    <h3 class="text-xl font-bold mt-2" style="color: @Model.AccentColor">@Model.ProductName</h3>
                                    <p class="text-sm font-medium">@Model.Manufacturer</p>
                                </div>
                                <div class="space-y-1 text-sm mt-auto">
                                    <p class="flex items-center">
                                        <i class="fas fa-tag mr-2" style="color: @Model.AccentColor"></i>Model: @Model.ModelNumber
                                    </p>
                                    <p class="flex items-center">
                                        <i class="fas fa-fingerprint mr-2" style="color: @Model.AccentColor"></i>SN: @Model.SerialNumber
                                    </p>
                                    <p class="flex items-center">
                                        <i class="fas fa-map-marker-alt mr-2" style="color: @Model.AccentColor"></i>@Model.Location
                                    </p>
                                    <p class="flex items-center">
                                        <i class="fas fa-calendar-check mr-2" style="color: @Model.AccentColor"></i>Warranty: @Model.WarrantyExpiration.ToString("MMM d, yyyy")
                                    </p>
                                </div>
                            </div>
                            <button type="button" id="flip-card" class="absolute bottom-2 right-2 text-xs opacity-50 hover:opacity-100 transition-opacity">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                        <div class="card-side card-back absolute w-full h-full rounded-lg p-5 flex flex-col items-center justify-center" style="transform: rotateY(180deg); backface-visibility: hidden;">
                            <img src="@ViewBag.QrCodeImage" alt="QR Code" class="w-32 h-32 mb-2 border border-gray-200 p-1 rounded" />
                            <p class="text-center text-sm">Scan for product details</p>
                            <button type="button" id="flip-card-back" class="absolute bottom-2 right-2 text-xs opacity-50 hover:opacity-100 transition-opacity">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="flex flex-wrap gap-2">
                    <button type="button" id="copy-qr-btn" class="text-sm text-gray-600 flex items-center gap-1 px-3 py-1.5 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
                        <i class="fas fa-copy"></i> Copy QR
                    </button>
                    <a asp-action="DownloadQrCode" asp-route-id="@Model.Id" class="text-sm text-gray-600 flex items-center gap-1 px-3 py-1.5 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
                        <i class="fas fa-download"></i> Download QR
                    </a>
                    <a asp-action="DownloadData" asp-route-id="@Model.Id" class="text-sm text-gray-600 flex items-center gap-1 px-3 py-1.5 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
                        <i class="fas fa-file-alt"></i> Data File
                    </a>
                </div>
            </div>
            
            <!-- Quick Actions -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <h2 class="text-lg font-bold mb-4 flex items-center">
                    <i class="fas fa-bolt text-primary-500 mr-2"></i> Quick Actions
                </h2>
                
                <div class="space-y-3">
                    <a asp-action="Print" asp-route-id="@Model.Id" class="w-full px-4 py-3 flex items-center justify-between bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-primary-100 flex items-center justify-center text-primary-600 mr-3 group-hover:scale-110 transition-transform">
                                <i class="fas fa-print"></i>
                            </div>
                            <div>
                                <div class="font-medium">Print Tag</div>
                                <div class="text-xs text-gray-500">Print this product tag</div>
                            </div>
                        </div>
                        <i class="fas fa-chevron-right text-gray-300 group-hover:text-gray-500 group-hover:translate-x-1 transition-all"></i>
                    </a>
                    
                    <a asp-action="QrCode" asp-route-id="@Model.Id" class="w-full px-4 py-3 flex items-center justify-between bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 mr-3 group-hover:scale-110 transition-transform">
                                <i class="fas fa-qrcode"></i>
                            </div>
                            <div>
                                <div class="font-medium">Show QR Code</div>
                                <div class="text-xs text-gray-500">Full-screen QR for scanning</div>
                            </div>
                        </div>
                        <i class="fas fa-chevron-right text-gray-300 group-hover:text-gray-500 group-hover:translate-x-1 transition-all"></i>
                    </a>
                    
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="w-full px-4 py-3 flex items-center justify-between bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-green-100 flex items-center justify-center text-green-600 mr-3 group-hover:scale-110 transition-transform">
                                <i class="fas fa-edit"></i>
                            </div>
                            <div>
                                <div class="font-medium">Edit Product</div>
                                <div class="text-xs text-gray-500">Modify product information</div>
                            </div>
                        </div>
                        <i class="fas fa-chevron-right text-gray-300 group-hover:text-gray-500 group-hover:translate-x-1 transition-all"></i>
                    </a>
                    
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="w-full px-4 py-3 flex items-center justify-between bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-red-100 flex items-center justify-center text-red-600 mr-3 group-hover:scale-110 transition-transform">
                                <i class="fas fa-trash"></i>
                            </div>
                            <div>
                                <div class="font-medium">Delete Product</div>
                                <div class="text-xs text-gray-500">Remove this product</div>
                            </div>
                        </div>
                        <i class="fas fa-chevron-right text-gray-300 group-hover:text-gray-500 group-hover:translate-x-1 transition-all"></i>
                    </a>
                </div>
            </div>
            
            <!-- Maintenance Reminders -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <h2 class="text-lg font-bold mb-4 flex items-center">
                    <i class="fas fa-bell text-primary-500 mr-2"></i> Maintenance Alerts
                </h2>
                
                @if (Model.WarrantyExpiration < DateTime.Now.AddMonths(3))
                {
                    <div class="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <i class="fas fa-exclamation-triangle text-yellow-500"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-yellow-800">Warranty Expiration</h3>
                                <div class="mt-1 text-sm text-yellow-700">
                                    <p>Warranty expires on @Model.WarrantyExpiration.ToString("MMM d, yyyy") (@((Model.WarrantyExpiration - DateTime.Now).Days) days remaining)</p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                
                <div class="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-tools text-blue-500"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-blue-800">Maintenance Information</h3>
                            <div class="mt-1 text-sm text-blue-700">
                                <p>@(string.IsNullOrEmpty(Model.MaintenanceInfo) ? "No maintenance information provided." : Model.MaintenanceInfo)</p>
                            </div>
                            <div class="mt-2">
                                <button type="button" id="add-reminder" class="text-xs text-blue-600 hover:text-blue-800 flex items-center">
                                    <i class="fas fa-plus-circle mr-1"></i> Add Reminder
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Maintenance Reminders List -->
                <div class="mt-4">
                    <h4 class="text-sm font-medium text-gray-700 mb-2">Upcoming Reminders</h4>
                    <div id="reminders-list" class="space-y-2">
                        <!-- Placeholder for reminders - will be populated by JavaScript -->
                        <div class="p-2 bg-gray-50 rounded-lg border border-gray-200 flex justify-between items-center">
                            <div>
                                <span class="text-sm font-medium">Filter Replacement</span>
                                <div class="text-xs text-gray-500">Due: @DateTime.Now.AddDays(15).ToString("MMM d, yyyy")</div>
                            </div>
                            <div class="flex space-x-1">
                                <button class="p-1 text-gray-400 hover:text-blue-600 reminder-edit" data-id="1">
                                    <i class="fas fa-pen"></i>
                                </button>
                                <button class="p-1 text-gray-400 hover:text-red-600 reminder-delete" data-id="1">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Main Content Area: Product Details -->
    <div class="lg:col-span-2">
        <!-- Tab Navigation -->
        <div class="flex border-b border-gray-200 mb-6">
            <button type="button" class="tab-button px-6 py-3 text-primary-600 border-b-2 border-primary-500 font-medium text-sm" data-tab="product-info">
                Product Information
            </button>
            <button type="button" class="tab-button px-6 py-3 text-gray-500 hover:text-gray-700 font-medium text-sm" data-tab="history">
                History
            </button>
            <button type="button" class="tab-button px-6 py-3 text-gray-500 hover:text-gray-700 font-medium text-sm" data-tab="documents">
                Documents
            </button>
        </div>
        
        <!-- Product Information Tab -->
        <div id="tab-product-info" class="tab-content space-y-6">
            <!-- Basic Information -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-100 flex justify-between items-center">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-info-circle text-primary-500 mr-2"></i> Basic Information
                    </h3>
                    <button type="button" class="text-sm text-gray-500 hover:text-primary-600 flex items-center copy-section" data-section="basic-info">
                        <i class="fas fa-copy mr-1"></i> Copy
                    </button>
                </div>
                
                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="basic-info">
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Product Name</span>
                            <span class="font-medium text-gray-800">@Model.ProductName</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Category</span>
                            <span class="font-medium text-gray-800">@Model.Category</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Manufacturer</span>
                            <span class="font-medium text-gray-800">@Model.Manufacturer</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Department</span>
                            <span class="font-medium text-gray-800">@(string.IsNullOrEmpty(Model.Department) ? "Not Specified" : Model.Department)</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Owner/Contact</span>
                            <span class="font-medium text-gray-800">@(string.IsNullOrEmpty(Model.UserFullName) ? "Not Specified" : Model.UserFullName)</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Plant/Location</span>
                            <span class="font-medium text-gray-800">@(string.IsNullOrEmpty(Model.PlantName) ? "Not Specified" : Model.PlantName)</span>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(Model.Email))
                        {
                            <div class="flex flex-col">
                                <span class="text-xs text-gray-500 uppercase font-medium mb-1">Contact Email</span>
                                <span class="font-medium text-gray-800">@Model.Email</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Technical Details -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-100 flex justify-between items-center">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-microchip text-primary-500 mr-2"></i> Technical Details
                    </h3>
                    <button type="button" class="text-sm text-gray-500 hover:text-primary-600 flex items-center copy-section" data-section="tech-details">
                        <i class="fas fa-copy mr-1"></i> Copy
                    </button>
                </div>
                
                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="tech-details">
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Model Number</span>
                            <div class="flex items-center">
                                <span class="font-medium text-gray-800 mr-2">@Model.ModelNumber</span>
                                <button type="button" class="copy-text-btn text-gray-400 hover:text-primary-600 transition-colors" data-text="@Model.ModelNumber">
                                    <i class="fas fa-copy"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Serial Number</span>
                            <div class="flex items-center">
                                <span class="font-medium text-gray-800 mr-2">@Model.SerialNumber</span>
                                <button type="button" class="copy-text-btn text-gray-400 hover:text-primary-600 transition-colors" data-text="@Model.SerialNumber">
                                    <i class="fas fa-copy"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Location</span>
                            <span class="font-medium text-gray-800">@Model.Location</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Maintenance Info</span>
                            <span class="font-medium text-gray-800">@(string.IsNullOrEmpty(Model.MaintenanceInfo) ? "N/A" : Model.MaintenanceInfo)</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Layout</span>
                            <span class="font-medium text-gray-800">@(string.IsNullOrEmpty(Model.Layout) ? "Standard" : Model.Layout)</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Timeline & Dates -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-100">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-calendar-alt text-primary-500 mr-2"></i> Timeline
                    </h3>
                </div>
                
                <div class="p-6">
                    <div class="relative">
                        <!-- Timeline bar -->
                        <div class="absolute h-full w-0.5 bg-gray-200 left-2.5 top-0"></div>
                        
                        <div class="space-y-6">
                            <!-- Manufacture Date -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full bg-blue-100 border-2 border-blue-500 z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Manufactured</h4>
                                    <p class="text-sm text-gray-500">@Model.ManufactureDate.ToString("MMMM d, yyyy")</p>
                                    <p class="text-xs text-gray-400 mt-1">@((DateTime.Now - Model.ManufactureDate).Days) days ago</p>
                                </div>
                            </div>
                            
                            <!-- Purchase Date -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full bg-green-100 border-2 border-green-500 z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Purchased</h4>
                                    <p class="text-sm text-gray-500">@Model.PurchaseDate.ToString("MMMM d, yyyy")</p>
                                    <p class="text-xs text-gray-400 mt-1">@((DateTime.Now - Model.PurchaseDate).Days) days ago</p>
                                </div>
                            </div>
                            
                            <!-- Warranty Expiration -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full @(Model.WarrantyExpiration < DateTime.Now ? "bg-red-100 border-2 border-red-500" : "bg-yellow-100 border-2 border-yellow-500") z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Warranty Expires</h4>
                                    <p class="text-sm text-gray-500">@Model.WarrantyExpiration.ToString("MMMM d, yyyy")</p>
                                    @if (Model.WarrantyExpiration > DateTime.Now)
                                    {
                                        <p class="text-xs text-gray-400 mt-1">@((Model.WarrantyExpiration - DateTime.Now).Days) days remaining</p>
                                    }
                                    else
                                    {
                                        <p class="text-xs text-red-500 mt-1">Expired @((DateTime.Now - Model.WarrantyExpiration).Days) days ago</p>
                                    }
                                </div>
                            </div>
                            
                            <!-- Creation in System -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full bg-purple-100 border-2 border-purple-500 z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Created in System</h4>
                                    <p class="text-sm text-gray-500">@Model.CreatedAt.ToString("MMMM d, yyyy h:mm tt")</p>
                                    <p class="text-xs text-gray-400 mt-1">@((DateTime.Now - Model.CreatedAt).Days) days ago</p>
                                </div>
                            </div>
                            
                            <!-- Last Update -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full bg-gray-100 border-2 border-gray-500 z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Last Updated</h4>
                                    <p class="text-sm text-gray-500">@Model.UpdatedAt.ToString("MMMM d, yyyy h:mm tt")</p>
                                    @if ((DateTime.Now - Model.UpdatedAt).TotalDays < 1)
                                    {
                                        <p class="text-xs text-gray-400 mt-1">@Math.Round((DateTime.Now - Model.UpdatedAt).TotalHours) hours ago</p>
                                    }
                                    else
                                    {
                                        <p class="text-xs text-gray-400 mt-1">@((DateTime.Now - Model.UpdatedAt).Days) days ago</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Visual Customization -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-100">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-palette text-primary-500 mr-2"></i> Visual Design
                    </h3>
                </div>
                
                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                            <span class="text-xs text-gray-500 uppercase font-medium mb-2 block">Background Color</span>
                            <div class="flex items-center">
                                <div class="w-10 h-10 rounded-md border border-gray-200 shadow-sm mr-3" style="background-color: @Model.BackgroundColor"></div>
                                <span class="font-mono text-sm">@Model.BackgroundColor</span>
                            </div>
                        </div>
                        
                        <div>
                            <span class="text-xs text-gray-500 uppercase font-medium mb-2 block">Text Color</span>
                            <div class="flex items-center">
                                <div class="w-10 h-10 rounded-md border border-gray-200 shadow-sm mr-3" style="background-color: @Model.TextColor"></div>
                                <span class="font-mono text-sm">@Model.TextColor</span>
                            </div>
                        </div>
                        
                        <div>
                            <span class="text-xs text-gray-500 uppercase font-medium mb-2 block">Accent Color</span>
                            <div class="flex items-center">
                                <div class="w-10 h-10 rounded-md border border-gray-200 shadow-sm mr-3" style="background-color: @Model.AccentColor"></div>
                                <span class="font-mono text-sm">@Model.AccentColor</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6">
                        <span class="text-xs text-gray-500 uppercase font-medium mb-2 block">QR Code Colors</span>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <span class="text-xs text-gray-500 mb-2 block">Foreground Color</span>
                                <div class="flex items-center">
                                    <div class="w-10 h-10 rounded-md border border-gray-200 shadow-sm mr-3" style="background-color: @Model.QrFgColor"></div>
                                    <span class="font-mono text-sm">@Model.QrFgColor</span>
                                </div>
                            </div>
                            
                            <div>
                                <span class="text-xs text-gray-500 mb-2 block">Background Color</span>
                                <div class="flex items-center">
                                    <div class="w-10 h-10 rounded-md border border-gray-200 shadow-sm mr-3" style="background-color: @Model.QrBgColor"></div>
                                    <span class="font-mono text-sm">@Model.QrBgColor</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                        <div class="flex items-center justify-between">
                            <h4 class="text-sm font-medium text-gray-700">Color Palette Preview</h4>
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="text-xs text-primary-600 hover:text-primary-700">Change Colors</a>
                        </div>
                        <div class="mt-3 flex items-center space-x-2">
                            <div class="h-8 flex-grow rounded" style="background-color: @Model.BackgroundColor"></div>
                            <div class="h-8 flex-grow rounded" style="background-color: @Model.TextColor"></div>
                            <div class="h-8 flex-grow rounded" style="background-color: @Model.AccentColor"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- History Tab -->
        <div id="tab-history" class="tab-content hidden space-y-6">
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-lg font-bold text-gray-800">Change History</h3>
                    <a asp-action="History" asp-route-id="@Model.Id" class="text-sm text-primary-600 hover:text-primary-800">
                        <i class="fas fa-external-link-alt mr-1"></i> View Full History
                    </a>
                </div>
                
                <div id="history-container" class="space-y-4">
                    <!-- Loading indicator -->
                    <div id="history-loading" class="py-10 text-center">
                        <div class="inline-block animate-spin w-8 h-8 border-4 border-gray-300 border-t-primary-600 rounded-full"></div>
                        <p class="mt-2 text-sm text-gray-500">Loading history...</p>
                    </div>
                    
                    <!-- History items will be loaded here -->
                    <div id="history-items" class="hidden">
                        <!-- Template for history items -->
                    </div>
                    
                    <!-- No history message -->
                    <div id="no-history" class="py-10 text-center hidden">
                        <i class="fas fa-history text-gray-300 text-4xl mb-2"></i>
                        <p class="text-gray-500">No history records found for this product.</p>
                    </div>
                </div>
                
                <div class="mt-6 text-center">
                    <button id="load-more-history" type="button" class="text-primary-600 hover:text-primary-800 text-sm font-medium hidden">
                        <i class="fas fa-chevron-down mr-1"></i> Load More History
                    </button>
                </div>
            </div>
            
            <!-- User Activity Timeline -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <h3 class="text-lg font-bold text-gray-800 mb-4">User Activity</h3>
                
                <div id="user-activity-timeline" class="relative">
                    <!-- Timeline line -->
                    <div class="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200"></div>
                    
                    <!-- Timeline entries will be loaded here -->
                    <div id="activity-items">
                        <div class="mb-4 pl-12 relative">
                            <div class="absolute left-0 w-8 h-8 rounded-full bg-primary-100 flex items-center justify-center">
                                <i class="fas fa-plus text-primary-600"></i>
                            </div>
                            <div class="p-3 bg-gray-50 rounded-lg">
                                <p class="text-sm font-medium text-gray-800">Created by @Model.Username</p>
                                <p class="text-xs text-gray-500">@Model.CreatedAt.ToString("MMM d, yyyy h:mm tt")</p>
                            </div>
                        </div>
                        
                        <div class="mb-4 pl-12 relative">
                            <div class="absolute left-0 w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center">
                                <i class="fas fa-edit text-blue-600"></i>
                            </div>
                            <div class="p-3 bg-gray-50 rounded-lg">
                                <p class="text-sm font-medium text-gray-800">Last updated by @Model.Username</p>
                                <p class="text-xs text-gray-500">@Model.UpdatedAt.ToString("MMM d, yyyy h:mm tt")</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Documents Tab -->
        <div id="tab-documents" class="tab-content hidden space-y-6">
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-lg font-bold text-gray-800">Related Documents</h3>
                    <button type="button" id="add-document-btn" class="text-primary-600 hover:text-primary-800 text-sm font-medium flex items-center">
                        <i class="fas fa-plus mr-1"></i> Add Document
                    </button>
                </div>
                
                <div id="documents-container">
                    <!-- Loading indicator -->
                    <div id="documents-loading" class="py-10 text-center">
                        <div class="inline-block animate-spin w-8 h-8 border-4 border-gray-300 border-t-primary-600 rounded-full"></div>
                        <p class="mt-2 text-sm text-gray-500">Loading documents...</p>
                    </div>
                    
                    <!-- Document items will be loaded here -->
                    <div id="document-items" class="space-y-4 hidden">
                        <!-- Template for document items -->
                        <div class="document-item p-4 border border-gray-100 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-between">
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <div class="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center text-red-600">
                                        <i class="fas fa-file-pdf"></i>
                                    </div>
                                </div>
                                <div class="ml-4">
                                    <div class="font-medium text-gray-800">Product Manual</div>
                                    <div class="text-xs text-gray-500">PDF • 2.4 MB • Uploaded 30 days ago</div>
                                </div>
                            </div>
                            <div class="flex items-center space-x-2">
                                <button type="button" class="p-2 text-gray-400 hover:text-primary-600 document-download" data-id="1">
                                    <i class="fas fa-download"></i>
                                </button>
                                <button type="button" class="p-2 text-gray-400 hover:text-red-600 document-delete" data-id="1">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- No documents message -->
                    <div id="no-documents" class="py-10 text-center hidden">
                        <i class="fas fa-file-alt text-gray-300 text-4xl mb-2"></i>
                        <p class="text-gray-500">No documents attached to this product.</p>
                        <button type="button" id="add-first-document" class="mt-4 px-4 py-2 bg-primary-50 text-primary-600 rounded-md font-medium hover:bg-primary-100 transition-colors">
                            <i class="fas fa-plus mr-1"></i> Add First Document
                        </button>
                    </div>
                </div>
                
                <div class="mt-8 border-t border-gray-100 pt-6 hidden" id="document-upload-section">
                    <h4 class="text-sm font-medium text-gray-700 mb-4">Upload New Document</h4>
                    
                    <form id="document-upload-form" method="post" enctype="multipart/form-data" class="space-y-4">
                        <div>
                            <label for="document-title" class="block text-sm font-medium text-gray-700 mb-1">Document Title</label>
                            <input type="text" id="document-title" name="Title" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" placeholder="e.g. Product Manual" required />
                        </div>
                        
                        <div>
                            <label for="document-type" class="block text-sm font-medium text-gray-700 mb-1">Document Type</label>
                            <select id="document-type" name="DocumentType" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
                                <option value="Manual">Manual</option>
                                <option value="Datasheet">Datasheet</option>
                                <option value="Certificate">Certificate</option>
                                <option value="Invoice">Invoice</option>
                                <option value="Maintenance">Maintenance Record</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        
                        <div>
                            <label for="document-description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                            <textarea id="document-description" name="Description" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" placeholder="Brief description of this document"></textarea>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Document File</label>
                            <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center" id="document-drop-area">
                                <div class="flex flex-col items-center justify-center">
                                    <i class="fas fa-cloud-upload-alt text-3xl text-gray-400 mb-3"></i>
                                    <p class="text-sm text-gray-500 mb-2">Drag and drop a file here or click to browse</p>
                                    <p class="text-xs text-gray-400 mb-4">PDF, Excel, Word, or Image files up to 10MB</p>
                                    <input type="file" id="document-file" name="DocumentFile" class="hidden" accept=".pdf,.doc,.docx,.xls,.xlsx,.png,.jpg,.jpeg" required />
                                    <button type="button" id="browse-document" class="px-4 py-2 bg-primary-50 text-primary-600 rounded-md text-sm font-medium hover:bg-primary-100 transition-colors">
                                        Browse Files
                                    </button>
                                </div>
                            </div>
                            <div id="file-preview" class="mt-2 hidden">
                                <div class="flex items-center justify-between bg-gray-50 p-2 rounded-md">
                                    <div class="flex items-center">
                                        <i id="file-icon" class="fas fa-file text-primary-500 mr-2"></i>
                                        <span id="file-name" class="text-sm truncate"></span>
                                    </div>
                                    <button type="button" id="remove-file" class="text-red-500 hover:text-red-700">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="flex justify-end space-x-3 mt-6">
                            <button type="button" id="cancel-upload" class="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors">
                                Cancel
                            </button>
                            <button type="submit" id="upload-document" class="px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700 transition-colors flex items-center">
                                <span id="upload-text">Upload Document</span>
                                <span id="upload-spinner" class="ml-2 hidden">
                                    <i class="fas fa-spinner fa-spin"></i>
                                </span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Reminder Modal -->
<div id="reminder-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-xl shadow-xl max-w-md w-full mx-4 overflow-hidden transform transition-all">
        <div class="px-6 py-4 border-b border-gray-100 flex justify-between items-center">
            <h3 class="font-bold text-gray-800">Add Maintenance Reminder</h3>
            <button type="button" id="close-reminder-modal" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="p-6">
            <form id="reminder-form" class="space-y-4">
                <input type="hidden" id="reminder-id" value="0" />
                <input type="hidden" id="card-id" value="@Model.Id" />
                
                <div>
                    <label for="reminder-title" class="block text-sm font-medium text-gray-700 mb-2">Reminder Title</label>
                    <input type="text" id="reminder-title" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" placeholder="e.g. Filter Replacement" required />
                </div>
                
                <div>
                    <label for="reminder-date" class="block text-sm font-medium text-gray-700 mb-2">Due Date</label>
                    <input type="date" id="reminder-date" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" required />
                </div>
                
                <div>
                    <label for="reminder-notes" class="block text-sm font-medium text-gray-700 mb-2">Notes</label>
                    <textarea id="reminder-notes" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" rows="3" placeholder="Additional information about this maintenance task"></textarea>
                </div>
                
                <div>
                    <label for="reminder-repeat" class="block text-sm font-medium text-gray-700 mb-2">Repeat</label>
                    <select id="reminder-repeat" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
                        <option value="never">Never</option>
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="quarterly">Quarterly</option>
                        <option value="yearly">Yearly</option>
                    </select>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button type="button" id="cancel-reminder" class="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" id="save-reminder" class="px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700 transition-colors">
                        Save Reminder
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-xl shadow-xl max-w-md w-full mx-4 overflow-hidden transform transition-all">
        <div class="px-6 py-4 border-b border-gray-100">
            <h3 class="font-bold text-gray-800">Confirm Delete</h3>
        </div>
        
        <div class="p-6">
            <div class="mb-4">
                <div class="flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full mb-4">
                    <i class="fas fa-exclamation-triangle text-red-600 text-xl"></i>
                </div>
                <h4 class="text-center text-lg font-medium text-gray-800 mb-2">Are you sure?</h4>
                <p class="text-center text-gray-500 text-sm" id="delete-message">
                    Are you sure you want to delete this item? This action cannot be undone.
                </p>
            </div>
            
            <div class="flex justify-center space-x-4">
                <button type="button" id="cancel-delete" class="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors">
                    Cancel
                </button>
                <button type="button" id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Share Modal -->
<div id="share-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-xl shadow-xl max-w-md w-full mx-4 overflow-hidden transform transition-all">
        <div class="px-6 py-4 border-b border-gray-100 flex justify-between items-center">
            <h3 class="font-bold text-gray-800">Share Product Tag</h3>
            <button type="button" id="close-share-modal" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="p-6">
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">QR Code</label>
                <div class="flex justify-center mb-4">
                    <img src="@ViewBag.QrCodeImage" alt="QR Code" class="w-40 h-40 border border-gray-200 p-1 rounded" />
                </div>
                <div class="flex justify-center">
                    <a asp-action="DownloadQrCode" asp-route-id="@Model.Id" class="text-sm bg-primary-50 text-primary-600 px-3 py-1.5 rounded hover:bg-primary-100 transition-colors">
                        <i class="fas fa-download mr-1"></i> Download QR Code
                    </a>
                </div>
            </div>
            
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">Share Link</label>
                <div class="flex">
                    <input type="text" id="share-link" value="@($"{Context.Request.Scheme}://{Context.Request.Host}/Card/ScanShow/{Model.Id}")" class="w-full px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" readonly />
                    <button type="button" id="copy-link-btn" class="px-3 py-2 bg-primary-600 text-white rounded-r-md hover:bg-primary-700 transition-colors">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Share via</label>
                <div class="flex space-x-2">
                    <button type="button" class="flex-1 px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors text-sm share-btn" data-type="facebook">
                        <i class="fab fa-facebook mr-1"></i> Facebook
                    </button>
                    <button type="button" class="flex-1 px-3 py-2 bg-blue-400 text-white rounded hover:bg-blue-500 transition-colors text-sm share-btn" data-type="twitter">
                        <i class="fab fa-twitter mr-1"></i> Twitter
                    </button>
                    <button type="button" class="flex-1 px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors text-sm share-btn" data-type="whatsapp">
                        <i class="fab fa-whatsapp mr-1"></i> WhatsApp
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Notification -->
<div id="toast-notification" class="fixed bottom-4 right-4 bg-white rounded-lg shadow-lg border border-gray-100 p-4 max-w-sm transform translate-y-20 opacity-0 transition-all duration-300 z-50 hidden">
    <div class="flex items-center">
        <div id="toast-icon" class="flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-green-100">
            <i id="toast-icon-symbol" class="fas fa-check text-green-500"></i>
        </div>
        <div class="ml-3 flex-1">
            <p id="toast-message" class="text-sm font-medium text-gray-900">Information copied to clipboard</p>
            <p id="toast-description" class="text-sm text-gray-500">You can now paste it anywhere you need</p>
        </div>
        <button id="close-toast" class="ml-auto text-gray-400 hover:text-gray-500">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

@section Scripts {
    <script>
        // Wait for DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Card flip functionality
            initCardFlip();
            
            // Tab switching functionality
            initTabSwitching();
            
            // Share functionality
            initShareModal();
            
            // Reminder functionality
            initReminders();
            
            // Document functionality
            initDocuments();
            
            // History functionality
            initHistory();
            
            // Copy to clipboard functionality
            initCopyToClipboard();
            
            // Toast notifications
            initToastNotifications();
        });
        
        function initCardFlip() {
            const flipCard = document.getElementById('flip-card');
            const flipCardBack = document.getElementById('flip-card-back');
            const cardContainer = document.querySelector('.card-flip-container');
            
            if (flipCard && cardContainer) {
                flipCard.addEventListener('click', function() {
                    cardContainer.classList.add('flipped');
                });
            }
            
            if (flipCardBack && cardContainer) {
                flipCardBack.addEventListener('click', function() {
                    cardContainer.classList.remove('flipped');
                });
            }
        }
        
        function initTabSwitching() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const tabId = this.getAttribute('data-tab');
                    
                    // Remove active class from all buttons
                    tabButtons.forEach(btn => {
                        btn.classList.remove('text-primary-600', 'border-b-2', 'border-primary-500');
                        btn.classList.add('text-gray-500', 'hover:text-gray-700');
                    });
                    
                    // Add active class to clicked button
                    this.classList.add('text-primary-600', 'border-b-2', 'border-primary-500');
                    this.classList.remove('text-gray-500', 'hover:text-gray-700');
                    
                    // Hide all tab contents
                    tabContents.forEach(content => {
                        content.classList.add('hidden');
                    });
                    
                    // Show corresponding tab content
                    document.getElementById(`tab-${tabId}`).classList.remove('hidden');
                    
                    // Load tab-specific content if needed
                    if (tabId === 'history') {
                        loadHistoryData();
                    } else if (tabId === 'documents') {
                        loadDocumentsData();
                    }
                });
            });
        }
        
        function initShareModal() {
            const shareButton = document.getElementById('share-button');
            const shareModal = document.getElementById('share-modal');
            const closeShareModal = document.getElementById('close-share-modal');
            const copyLinkBtn = document.getElementById('copy-link-btn');
            const shareButtons = document.querySelectorAll('.share-btn');
            
            if (shareButton && shareModal) {
                shareButton.addEventListener('click', function() {
                    shareModal.classList.remove('hidden');
                });
            }
            
            if (closeShareModal && shareModal) {
                closeShareModal.addEventListener('click', function() {
                    shareModal.classList.add('hidden');
                });
                
                // Close modal when clicking outside
                shareModal.addEventListener('click', function(e) {
                    if (e.target === shareModal) {
                        shareModal.classList.add('hidden');
                    }
                });
            }
            
            if (copyLinkBtn) {
                copyLinkBtn.addEventListener('click', function() {
                    const shareLink = document.getElementById('share-link');
                    copyToClipboard(shareLink.value);
                    showToast('Link copied', 'Share link has been copied to clipboard', 'success');
                });
            }
            
            // Share buttons
            shareButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const shareType = this.getAttribute('data-type');
                    const shareUrl = document.getElementById('share-link').value;
                    const shareTitle = `@Model.ProductName - Product Information`;
                    
                    let shareLink = '';
                    
                    switch (shareType) {
                        case 'facebook':
                            shareLink = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`;
                            break;
                        case 'twitter':
                            shareLink = `https://twitter.com/intent/tweet?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareTitle)}`;
                            break;
                        case 'whatsapp':
                            shareLink = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareTitle + ' ' + shareUrl)}`;
                            break;
                    }
                    
                    if (shareLink) {
                        window.open(shareLink, '_blank');
                    }
                });
            });
        }
        
        function initReminders() {
            const addReminderBtn = document.getElementById('add-reminder');
            const reminderModal = document.getElementById('reminder-modal');
            const closeReminderModal = document.getElementById('close-reminder-modal');
            const cancelReminderBtn = document.getElementById('cancel-reminder');
            const reminderForm = document.getElementById('reminder-form');
            
            // Setup default due date (tomorrow)
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            document.getElementById('reminder-date').valueAsDate = tomorrow;
            
            if (addReminderBtn && reminderModal) {
                addReminderBtn.addEventListener('click', function() {
                    // Reset form to add mode
                    document.getElementById('reminder-id').value = '0';
                    document.getElementById('reminder-title').value = '';
                    document.getElementById('reminder-notes').value = '';
                    document.getElementById('reminder-repeat').value = 'never';
                    
                    // Set default date to tomorrow
                    document.getElementById('reminder-date').valueAsDate = tomorrow;
                    
                    reminderModal.classList.remove('hidden');
                });
            }
            
            if (closeReminderModal && reminderModal) {
                closeReminderModal.addEventListener('click', function() {
                    reminderModal.classList.add('hidden');
                });
                
                // Close modal when clicking outside
                reminderModal.addEventListener('click', function(e) {
                    if (e.target === reminderModal) {
                        reminderModal.classList.add('hidden');
                    }
                });
            }
            
            if (cancelReminderBtn && reminderModal) {
                cancelReminderBtn.addEventListener('click', function() {
                    reminderModal.classList.add('hidden');
                });
            }
            
            if (reminderForm) {
                reminderForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const reminderId = document.getElementById('reminder-id').value;
                    const cardId = document.getElementById('card-id').value;
                    const title = document.getElementById('reminder-title').value;
                    const dueDate = document.getElementById('reminder-date').value;
                    const notes = document.getElementById('reminder-notes').value;
                    const repeat = document.getElementById('reminder-repeat').value;
                    
                    // For demonstration, we'll just add to the DOM and use localStorage
                    // In a real app, you would send this to the server
                    saveReminder({
                        id: reminderId === '0' ? Date.now().toString() : reminderId,
                        cardId: cardId,
                        title: title,
                        dueDate: dueDate,
                        notes: notes,
                        repeat: repeat,
                        createdAt: new Date().toISOString()
                    });
                    
                    // Close modal
                    reminderModal.classList.add('hidden');
                    
                    // Show success toast
                    showToast('Reminder saved', 'Your maintenance reminder has been scheduled', 'success');
                });
            }
            
            // Initial load of reminders
            loadReminders();
            
            // Setup reminder edit/delete handlers
            document.addEventListener('click', function(e) {
                if (e.target.closest('.reminder-edit')) {
                    const button = e.target.closest('.reminder-edit');
                    const reminderId = button.getAttribute('data-id');
                    editReminder(reminderId);
                }
                
                if (e.target.closest('.reminder-delete')) {
                    const button = e.target.closest('.reminder-delete');
                    const reminderId = button.getAttribute('data-id');
                    
                    // Show delete confirmation
                    showDeleteConfirmation('reminder', reminderId, 'Are you sure you want to delete this reminder?');
                }
            });
        }
        
        function saveReminder(reminder) {
            // Get existing reminders from localStorage
            let reminders = JSON.parse(localStorage.getItem('cardReminders') || '[]');
            
            if (reminder.id) {
                // Check if this is an edit or new reminder
                const existingIndex = reminders.findIndex(r => r.id === reminder.id);
                
                if (existingIndex >= 0) {
                    // Update existing reminder
                    reminders[existingIndex] = reminder;
                } else {
                    // Add new reminder
                    reminders.push(reminder);
                }
            }
            
            // Save back to localStorage
            localStorage.setItem('cardReminders', JSON.stringify(reminders));
            
            // Refresh the reminders list
            loadReminders();
        }
        
 function loadReminders() {
    const cardId = document.getElementById('card-id').value;
    const remindersList = document.getElementById('reminders-list');
    
    // Show loading indicator
    remindersList.innerHTML = '<div class="p-3 text-center"><i class="fas fa-spinner fa-spin mr-2"></i> Loading reminders...</div>';
    
    // Fetch reminders from the API
    fetch(`/Card/GetCardReminders/${cardId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to load reminders');
            }
            return response.json();
        })
        .then(reminders => {
            // Clear current reminders
            remindersList.innerHTML = '';
            
            // Add reminders to the list
            if (reminders.length > 0) {
                reminders.forEach(reminder => {
                    const dueDate = new Date(reminder.dueDate);
                    const isPastDue = dueDate < new Date();
                    
                    const reminderEl = document.createElement('div');
                    reminderEl.className = `p-2 ${isPastDue ? 'bg-red-50' : 'bg-gray-50'} rounded-lg border ${isPastDue ? 'border-red-200' : 'border-gray-200'} flex justify-between items-center`;
                    reminderEl.innerHTML = `
                        <div>
                            <span class="text-sm font-medium ${isPastDue ? 'text-red-800' : 'text-gray-800'}">${reminder.title}</span>
                            <div class="text-xs ${isPastDue ? 'text-red-500' : 'text-gray-500'}">Due: ${formatDate(dueDate)}</div>
                            ${reminder.notes ? `<div class="text-xs text-gray-500 mt-1">${reminder.notes}</div>` : ''}
                        </div>
                        <div class="flex space-x-1">
                            <button class="p-1 text-gray-400 hover:text-blue-600 reminder-edit" data-id="${reminder.id}">
                                <i class="fas fa-pen"></i>
                            </button>
                            <button class="p-1 text-gray-400 hover:text-red-600 reminder-delete" data-id="${reminder.id}">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                    `;
                    
                    remindersList.appendChild(reminderEl);
                });
            } else {
                // No reminders message
                const noReminders = document.createElement('div');
                noReminders.className = 'p-3 text-center text-gray-500 text-sm';
                noReminders.textContent = 'No reminders scheduled yet';
                remindersList.appendChild(noReminders);
            }
        })
        .catch(error => {
            console.error('Error loading reminders:', error);
            remindersList.innerHTML = '<div class="p-3 text-center text-red-500">Failed to load reminders. Please try again.</div>';
        });
}

function saveReminder(reminder) {
    // Create form data for the request
    const formData = new FormData();
    formData.append('Id', reminder.id === '0' ? 0 : reminder.id);
    formData.append('CardId', reminder.cardId);
    formData.append('Title', reminder.title);
    formData.append('DueDate', reminder.dueDate);
    formData.append('Notes', reminder.notes || '');
    formData.append('RepeatFrequency', reminder.repeat || 'never');
    
    // Send the request to the server
    fetch('/Card/SaveReminder', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to save reminder');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Refresh the reminders list
            loadReminders();
            
            // Show success toast
            showToast('Reminder saved', 'Your maintenance reminder has been scheduled', 'success');
        } else {
            showToast('Error', data.error || 'Failed to save reminder', 'error');
        }
    })
    .catch(error => {
        console.error('Error saving reminder:', error);
        showToast('Error', 'Failed to save reminder. Please try again.', 'error');
    });
}

function deleteReminder(reminderId) {
    // Send delete request to the server
    fetch('/Card/DeleteReminder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `id=${reminderId}`
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete reminder');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Refresh the reminders list
            loadReminders();
            
            // Show success toast
            showToast('Reminder deleted', 'The maintenance reminder has been removed', 'success');
        } else {
            showToast('Error', data.error || 'Failed to delete reminder', 'error');
        }
    })
    .catch(error => {
        console.error('Error deleting reminder:', error);
        showToast('Error', 'Failed to delete reminder. Please try again.', 'error');
    });
}

// For documents
function loadDocumentsData() {
    // Show loading state
    document.getElementById('documents-loading').classList.remove('hidden');
    document.getElementById('document-items').classList.add('hidden');
    document.getElementById('no-documents').classList.add('hidden');
    
    const cardId = document.getElementById('card-id').value;
    
    // Fetch documents from the API
    fetch(`/Card/GetCardDocuments/${cardId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to load documents');
            }
            return response.json();
        })
        .then(documents => {
            // Hide loading state
            document.getElementById('documents-loading').classList.add('hidden');
            
            // Get the container
            const documentItems = document.getElementById('document-items');
            documentItems.innerHTML = '';
            
            if (documents.length > 0) {
                // Show document items
                documentItems.classList.remove('hidden');
                
                // Add documents to the list
                documents.forEach(doc => {
                    const uploadDate = new Date(doc.uploadedAt);
                    const daysAgo = Math.floor((new Date() - uploadDate) / (1000 * 60 * 60 * 24));
                    
                    // Get file icon
                    let fileIcon = 'fa-file';
                    let iconColor = 'text-gray-600';
                    
                    if (doc.fileType && doc.fileType.startsWith('image/')) {
                        fileIcon = 'fa-file-image';
                        iconColor = 'text-blue-600';
                    } else if (doc.fileType && doc.fileType.includes('pdf')) {
                        fileIcon = 'fa-file-pdf';
                        iconColor = 'text-red-600';
                    } else if (doc.fileType && (doc.fileType.includes('excel') || doc.fileType.includes('spreadsheet')) || (doc.fileName && (doc.fileName.endsWith('.xlsx') || doc.fileName.endsWith('.xls')))) {
                        fileIcon = 'fa-file-excel';
                        iconColor = 'text-green-600';
                    } else if (doc.fileType && (doc.fileType.includes('word') || doc.fileType.includes('document')) || (doc.fileName && (doc.fileName.endsWith('.docx') || doc.fileName.endsWith('.doc')))) {
                        fileIcon = 'fa-file-word';
                        iconColor = 'text-blue-600';
                    }
                    
                    // Format file size
                    const fileSize = formatFileSize(doc.fileSize);
                    
                    const docEl = document.createElement('div');
                    docEl.className = 'document-item p-4 border border-gray-100 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-between';
                    docEl.innerHTML = `
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center ${iconColor}">
                                    <i class="fas ${fileIcon}"></i>
                                </div>
                            </div>
                            <div class="ml-4">
                                <div class="font-medium text-gray-800">${doc.title}</div>
                                <div class="text-xs text-gray-500">${doc.documentType} • ${fileSize} • Uploaded ${daysAgo === 0 ? 'today' : daysAgo === 1 ? 'yesterday' : daysAgo + ' days ago'}</div>
                                ${doc.description ? `<div class="text-xs text-gray-500 mt-1">${doc.description}</div>` : ''}
                            </div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <a href="/Card/DownloadDocument/${doc.id}" class="p-2 text-gray-400 hover:text-primary-600 document-download" data-id="${doc.id}">
                                <i class="fas fa-download"></i>
                            </a>
                            <button type="button" class="p-2 text-gray-400 hover:text-red-600 document-delete" data-id="${doc.id}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `;
                    
                    documentItems.appendChild(docEl);
                });
            } else {
                // Show no documents message
                document.getElementById('no-documents').classList.remove('hidden');
            }
        })
        .catch(error => {
            console.error('Error loading documents:', error);
            document.getElementById('documents-loading').classList.add('hidden');
            document.getElementById('document-items').innerHTML = '<div class="p-3 text-center text-red-500">Failed to load documents. Please try again.</div>';
            document.getElementById('document-items').classList.remove('hidden');
        });
}

function deleteDocument(documentId) {
    // Send delete request to the server
    fetch('/Card/DeleteDocument', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `id=${documentId}`
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete document');
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            // Refresh the documents list
            loadDocumentsData();
            
            // Show success toast
            showToast('Document deleted', 'The document has been removed', 'success');
        } else {
            showToast('Error', data.error || 'Failed to delete document', 'error');
        }
    })
    .catch(error => {
        console.error('Error deleting document:', error);
        showToast('Error', 'Failed to delete document. Please try again.', 'error');
    });
}

// Update document form submission
if (documentForm) {
    documentForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        
        // Show loading state
        document.getElementById('upload-text').textContent = 'Uploading...';
        document.getElementById('upload-spinner').classList.remove('hidden');
        
        fetch('/Card/UploadDocument', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to upload document');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Reset form
                documentForm.reset();
                filePreview.classList.add('hidden');
                
                // Hide upload section
                documentUploadSection.classList.add('hidden');
                
                // Reset button state
                document.getElementById('upload-text').textContent = 'Upload Document';
                document.getElementById('upload-spinner').classList.add('hidden');
                
                // Refresh documents list
                loadDocumentsData();
                
                // Show success message
                showToast('Document uploaded', 'Your document has been successfully uploaded', 'success');
            } else {
                // Reset button state
                document.getElementById('upload-text').textContent = 'Upload Document';
                document.getElementById('upload-spinner').classList.add('hidden');
                
                showToast('Error', data.error || 'Failed to upload document', 'error');
            }
        })
        .catch(error => {
            console.error('Error uploading document:', error);
            
            // Reset button state
            document.getElementById('upload-text').textContent = 'Upload Document';
            document.getElementById('upload-spinner').classList.add('hidden');
            
            showToast('Error', 'Failed to upload document. Please try again.', 'error');
        });
    });
}
            
            // Initial load of documents
            loadDocumentsData();
            
            // Setup document download/delete handlers
            document.addEventListener('click', function(e) {
                if (e.target.closest('.document-download')) {
                    const button = e.target.closest('.document-download');
                    const documentId = button.getAttribute('data-id');
                    
                    // For demo, just show a toast
                    showToast('Download started', 'Your document download has started', 'success');
                }
                
                if (e.target.closest('.document-delete')) {
                    const button = e.target.closest('.document-delete');
                    const documentId = button.getAttribute('data-id');
                    
                    // Show delete confirmation
                    showDeleteConfirmation('document', documentId, 'Are you sure you want to delete this document?');
                }
            });
        }
        
        function handleFileSelection(file) {
            if (!file) return;
            
            const filePreview = document.getElementById('file-preview');
            const fileName = document.getElementById('file-name');
            const fileIcon = document.getElementById('file-icon');
            
            // Display file name
            fileName.textContent = file.name;
            
            // Set appropriate icon based on file type
            if (file.type.startsWith('image/')) {
                fileIcon.className = 'fas fa-file-image text-blue-500 mr-2';
            } else if (file.type.includes('pdf')) {
                fileIcon.className = 'fas fa-file-pdf text-red-500 mr-2';
            } else if (file.type.includes('excel') || file.type.includes('spreadsheet') || file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
                fileIcon.className = 'fas fa-file-excel text-green-500 mr-2';
            } else if (file.type.includes('word') || file.type.includes('document') || file.name.endsWith('.docx') || file.name.endsWith('.doc')) {
                fileIcon.className = 'fas fa-file-word text-blue-500 mr-2';
            } else {
                fileIcon.className = 'fas fa-file text-gray-500 mr-2';
            }
            
            // Show file preview
            filePreview.classList.remove('hidden');
        }
        
        function saveDocument(document) {
            // Get existing documents from localStorage
            let documents = JSON.parse(localStorage.getItem('cardDocuments') || '[]');
            
            // Add new document
            documents.push(document);
            
            // Save back to localStorage
            localStorage.setItem('cardDocuments', JSON.stringify(documents));
            
            // Refresh the documents list
            loadDocumentsData();
        }
        
        function loadDocumentsData() {
            // Show loading state
            document.getElementById('documents-loading').classList.remove('hidden');
            document.getElementById('document-items').classList.add('hidden');
            document.getElementById('no-documents').classList.add('hidden');
            
            // For demo purposes, simulate API call with setTimeout
            setTimeout(() => {
                const cardId = document.getElementById('card-id').value;
                const documentItems = document.getElementById('document-items');
                
                // Get documents from localStorage
                let documents = JSON.parse(localStorage.getItem('cardDocuments') || '[]');
                
                // Filter to this card's documents
                documents = documents.filter(d => d.cardId === cardId);
                
                // Sort by upload date (newest first)
                documents.sort((a, b) => new Date(b.uploadedAt) - new Date(a.uploadedAt));
                
                // Hide loading state
                document.getElementById('documents-loading').classList.add('hidden');
                
                // Clear current documents
                documentItems.innerHTML = '';
                
                if (documents.length > 0) {
                    // Show document items
                    documentItems.classList.remove('hidden');
                    
                    // Add documents to the list
                    documents.forEach(doc => {
                        const uploadDate = new Date(doc.uploadedAt);
                        const daysAgo = Math.floor((new Date() - uploadDate) / (1000 * 60 * 60 * 24));
                        
                        // Get file icon
                        let fileIcon = 'fa-file';
                        let iconColor = 'text-gray-600';
                        
                        if (doc.fileType && doc.fileType.startsWith('image/')) {
                            fileIcon = 'fa-file-image';
                            iconColor = 'text-blue-600';
                        } else if (doc.fileType && doc.fileType.includes('pdf')) {
                            fileIcon = 'fa-file-pdf';
                            iconColor = 'text-red-600';
                        } else if (doc.fileType && (doc.fileType.includes('excel') || doc.fileType.includes('spreadsheet')) || (doc.fileName && (doc.fileName.endsWith('.xlsx') || doc.fileName.endsWith('.xls')))) {
                            fileIcon = 'fa-file-excel';
                            iconColor = 'text-green-600';
                        } else if (doc.fileType && (doc.fileType.includes('word') || doc.fileType.includes('document')) || (doc.fileName && (doc.fileName.endsWith('.docx') || doc.fileName.endsWith('.doc')))) {
                            fileIcon = 'fa-file-word';
                            iconColor = 'text-blue-600';
                        }
                        
                        // Format file size
                        const fileSize = formatFileSize(doc.fileSize);
                        
                        const docEl = document.createElement('div');
                        docEl.className = 'document-item p-4 border border-gray-100 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-between';
                        docEl.innerHTML = `
                            <div class="flex items-center">
                                <div class="flex-shrink-0">
                                    <div class="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center ${iconColor}">
                                        <i class="fas ${fileIcon}"></i>
                                    </div>
                                </div>
                                <div class="ml-4">
                                    <div class="font-medium text-gray-800">${doc.title}</div>
                                    <div class="text-xs text-gray-500">${doc.type} • ${fileSize} • Uploaded ${daysAgo === 0 ? 'today' : daysAgo === 1 ? 'yesterday' : daysAgo + ' days ago'}</div>
                                    ${doc.description ? `<div class="text-xs text-gray-500 mt-1">${doc.description}</div>` : ''}
                                </div>
                            </div>
                            <div class="flex items-center space-x-2">
                                <button type="button" class="p-2 text-gray-400 hover:text-primary-600 document-download" data-id="${doc.id}">
                                    <i class="fas fa-download"></i>
                                </button>
                                <button type="button" class="p-2 text-gray-400 hover:text-red-600 document-delete" data-id="${doc.id}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        `;
                        
                        documentItems.appendChild(docEl);
                    });
                } else {
                    // Show no documents message
                    document.getElementById('no-documents').classList.remove('hidden');
                }
            }, 800);
        }
        
        function deleteDocument(documentId) {
            // Get documents from localStorage
            let documents = JSON.parse(localStorage.getItem('cardDocuments') || '[]');
            
            // Filter out the one to delete
            documents = documents.filter(d => d.id !== documentId);
            
            // Save back to localStorage
            localStorage.setItem('cardDocuments', JSON.stringify(documents));
            
            // Refresh the documents list
            loadDocumentsData();
            
            // Show success toast
            showToast('Document deleted', 'The document has been removed', 'success');
        }
        
        function initHistory() {
            // Will be called when the history tab is clicked
        }
        
        function loadHistoryData() {
            // Show loading state
            document.getElementById('history-loading').classList.remove('hidden');
            document.getElementById('history-items').classList.add('hidden');
            document.getElementById('no-history').classList.add('hidden');
            document.getElementById('load-more-history').classList.add('hidden');
            
            // For demo purposes, simulate API call with setTimeout
            setTimeout(() => {
                // Get the card ID
                const cardId = document.getElementById('card-id').value;
                
                // You would normally fetch this from the server
                // For demo, we'll create some sample history items
                const historyItems = [
                    {
                        id: 1,
                        cardId: cardId,
                        fieldName: 'Location',
                        oldValue: 'Storage Room B',
                        newValue: '@Model.Location',
                        changedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days ago
                        changedBy: '@Model.Username'
                    },
                    {
                        id: 2,
                        cardId: cardId,
                        fieldName: 'MaintenanceInfo',
                        oldValue: 'Check monthly',
                        newValue: '@Model.MaintenanceInfo',
                        changedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days ago
                        changedBy: '@Model.Username'
                    },
                    {
                        id: 3,
                        cardId: cardId,
                        fieldName: 'Creation',
                        oldValue: '',
                        newValue: 'Initial product creation',
                        changedAt: '@Model.CreatedAt',
                        changedBy: '@Model.Username'
                    }
                ];
                
                // Hide loading state
                document.getElementById('history-loading').classList.add('hidden');
                
                // Get the container
                const historyItemsContainer = document.getElementById('history-items');
                historyItemsContainer.innerHTML = '';
                
                if (historyItems.length > 0) {
                    // Show history items
                    historyItemsContainer.classList.remove('hidden');
                    
                    // Add history items to the container
                    historyItems.forEach(item => {
                        const changedAt = new Date(item.changedAt);
                        const historyEl = document.createElement('div');
                        historyEl.className = 'p-4 border border-gray-100 rounded-lg hover:bg-gray-50 transition-colors';
                        
let iconClass = 'fa-edit';
                        let bgClass = 'bg-blue-100';
                        let iconColorClass = 'text-blue-600';
                        
                        if (item.fieldName === 'Creation') {
                            iconClass = 'fa-plus';
                            bgClass = 'bg-purple-100';
                            iconColorClass = 'text-purple-600';
                        } else if (item.fieldName === 'Deletion') {
                            iconClass = 'fa-trash';
                            bgClass = 'bg-red-100';
                            iconColorClass = 'text-red-600';
                        }
                        
                        historyEl.innerHTML = `
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                    <div class="w-10 h-10 ${bgClass} rounded-full flex items-center justify-center ${iconColorClass}">
                                        <i class="fas ${iconClass}"></i>
                                    </div>
                                </div>
                                <div class="ml-4 flex-1">
                                    <div class="flex items-center justify-between">
                                        <div class="font-medium text-gray-800">${item.fieldName === 'Creation' ? 'Product Created' : `${item.fieldName} Updated`}</div>
                                        <div class="text-sm text-gray-500">${formatDateTime(changedAt)}</div>
                                    </div>
                                    ${item.fieldName !== 'Creation' ? `
                                    <div class="text-sm text-gray-600 mt-1">
                                        <span class="text-red-500 line-through">${item.oldValue}</span>
                                        <span class="mx-2">→</span>
                                        <span class="text-green-500">${item.newValue}</span>
                                    </div>` : `
                                    <div class="text-sm text-gray-600 mt-1">${item.newValue}</div>`}
                                    <div class="text-xs text-gray-500 mt-1">by ${item.changedBy}</div>
                                </div>
                            </div>
                        `;
                        
                        historyItemsContainer.appendChild(historyEl);
                    });
                    
                    // Show Load More button if there are more than 5 items (for pagination demo)
                    if (historyItems.length > 5) {
                        document.getElementById('load-more-history').classList.remove('hidden');
                    }
                } else {
                    // Show no history message
                    document.getElementById('no-history').classList.remove('hidden');
                }
            }, 800);
        }
        
        function initCopyToClipboard() {
            const copyTextButtons = document.querySelectorAll('.copy-text-btn');
            const copySectionButtons = document.querySelectorAll('.copy-section');
            const copyQrBtn = document.getElementById('copy-qr-btn');
            
            copyTextButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const text = this.getAttribute('data-text');
                    copyToClipboard(text);
                    showToast('Copied to clipboard', text, 'success');
                });
            });
            
            copySectionButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const sectionId = this.getAttribute('data-section');
                    const section = document.getElementById(sectionId);
                    
                    if (section) {
                        const sectionText = section.innerText;
                        copyToClipboard(sectionText);
                        showToast('Section copied', 'Information has been copied to clipboard', 'success');
                    }
                });
            });
            
            if (copyQrBtn) {
                copyQrBtn.addEventListener('click', function() {
                    // For QR code, we'd normally need Canvas to copy the image
                    // For this demo, we'll just show a toast
                    showToast('QR code copied', 'QR code has been copied to clipboard', 'success');
                });
            }
        }
        
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function() {
                console.log('Copying to clipboard was successful');
            }, function(err) {
                console.error('Could not copy text: ', err);
            });
        }
        
        function initToastNotifications() {
            const toast = document.getElementById('toast-notification');
            const closeToast = document.getElementById('close-toast');
            
            if (closeToast && toast) {
                closeToast.addEventListener('click', function() {
                    toast.classList.add('translate-y-20', 'opacity-0');
                    setTimeout(function() {
                        toast.classList.add('hidden');
                    }, 300);
                });
            }
        }
        
        function showToast(message, description = '', type = 'success') {
            const toast = document.getElementById('toast-notification');
            const toastMessage = document.getElementById('toast-message');
            const toastDescription = document.getElementById('toast-description');
            const toastIcon = document.getElementById('toast-icon');
            const toastIconSymbol = document.getElementById('toast-icon-symbol');
            
            toastMessage.textContent = message;
            toastDescription.textContent = description;
            
            // Set icon based on type
            if (type === 'success') {
                toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-green-100';
                toastIconSymbol.className = 'fas fa-check text-green-500';
            } else if (type === 'error') {
                toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-red-100';
                toastIconSymbol.className = 'fas fa-times text-red-500';
            } else if (type === 'warning') {
                toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-yellow-100';
                toastIconSymbol.className = 'fas fa-exclamation text-yellow-500';
            } else if (type === 'info') {
                toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-blue-100';
                toastIconSymbol.className = 'fas fa-info text-blue-500';
            }
            
            // Show toast
            toast.classList.remove('hidden', 'translate-y-20', 'opacity-0');
            toast.classList.add('translate-y-0', 'opacity-100');
            
            // Auto-hide after 5 seconds
            setTimeout(function() {
                toast.classList.add('translate-y-20', 'opacity-0');
                setTimeout(function() {
                    toast.classList.add('hidden');
                }, 300);
            }, 5000);
        }
        
        function showDeleteConfirmation(type, id, message) {
            const deleteModal = document.getElementById('delete-modal');
            const cancelDeleteBtn = document.getElementById('cancel-delete');
            const confirmDeleteBtn = document.getElementById('confirm-delete');
            const deleteMessage = document.getElementById('delete-message');
            
            if (deleteModal && cancelDeleteBtn && confirmDeleteBtn) {
                // Set message
                deleteMessage.textContent = message;
                
                // Show modal
                deleteModal.classList.remove('hidden');
                
                // Handle cancel
                const handleCancel = function() {
                    deleteModal.classList.add('hidden');
                    
                    // Remove event listeners
                    cancelDeleteBtn.removeEventListener('click', handleCancel);
                    confirmDeleteBtn.removeEventListener('click', handleConfirm);
                    deleteModal.removeEventListener('click', handleOutsideClick);
                };
                
                // Handle confirm
                const handleConfirm = function() {
                    deleteModal.classList.add('hidden');
                    
                    // Perform delete based on type
                    if (type === 'reminder') {
                        deleteReminder(id);
                    } else if (type === 'document') {
                        deleteDocument(id);
                    }
                    
                    // Remove event listeners
                    cancelDeleteBtn.removeEventListener('click', handleCancel);
                    confirmDeleteBtn.removeEventListener('click', handleConfirm);
                    deleteModal.removeEventListener('click', handleOutsideClick);
                };
                
                // Handle clicking outside the modal
                const handleOutsideClick = function(e) {
                    if (e.target === deleteModal) {
                        handleCancel();
                    }
                };
                
                // Add event listeners
                cancelDeleteBtn.addEventListener('click', handleCancel);
                confirmDeleteBtn.addEventListener('click', handleConfirm);
                deleteModal.addEventListener('click', handleOutsideClick);
            }
        }
        
        // Helper functions
        function formatDate(date) {
            return date.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric'
            });
        }
        
        function formatDateTime(date) {
            return date.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        function formatFileSize(bytes) {
            if (!bytes) return 'Unknown size';
            
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            if (bytes === 0) return '0 Bytes';
            const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10);
            if (i === 0) return `${bytes} ${sizes[i]}`;
            return `${(bytes / (1024 ** i)).toFixed(1)} ${sizes[i]}`;
        }
    </script>
}