@model CardTagManager.Models.Card

@{
    ViewData["Title"] = "Product Details";
}

<!-- Breadcrumb navigation -->
<nav class="mb-5 py-3 px-4 bg-white rounded-lg shadow-sm flex items-center text-sm">
    <a href="/" class="text-gray-500 hover:text-primary-600">
        <i class="fas fa-home"></i>
    </a>
    <span class="mx-2 text-gray-400">/</span>
    <a asp-action="Index" class="text-gray-500 hover:text-primary-600">Products</a>
    <span class="mx-2 text-gray-400">/</span>
    <span class="text-primary-600 font-medium truncate">@Model.ProductName</span>
</nav>

<!-- Product header -->
<div class="mb-8 bg-white rounded-xl shadow-sm overflow-hidden border border-gray-100">
    <div class="relative h-24 bg-gradient-to-r from-primary-600 to-primary-400 flex items-end">
        <div class="absolute top-4 right-4 flex space-x-2">
            <a asp-action="Edit" asp-route-id="@Model.Id" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all">
                <i class="fas fa-edit"></i>
            </a>
            <a asp-action="Print" asp-route-id="@Model.Id" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all">
                <i class="fas fa-print"></i>
            </a>
            <a asp-action="QrCode" asp-route-id="@Model.Id" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all">
                <i class="fas fa-qrcode"></i>
            </a>
            <button id="share-button" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all">
                <i class="fas fa-share-alt"></i>
            </button>
        </div>
        <div class="w-full h-16 bg-white rounded-t-3xl"></div>
    </div>
    <div class="px-8 pb-6 pt-2">
        <div class="flex flex-col md:flex-row md:items-end gap-6">
            <div class="flex-shrink-0 -mt-12">
                <div class="w-20 h-20 rounded-xl bg-white shadow-md border border-gray-100 flex items-center justify-center text-2xl text-primary-500">
                    @switch(Model.Category?.ToLower())
                    {
                        case var c when c != null && c.Contains("chemical"):
                            <i class="fas fa-flask"></i>
                            break;
                        case var c when c != null && c.Contains("equipment"):
                            <i class="fas fa-tools"></i>
                            break;
                        case var c when c != null && c.Contains("safety"):
                            <i class="fas fa-hard-hat"></i>
                            break;
                        default:
                            <i class="fas fa-box"></i>
                            break;
                    }
                </div>
            </div>
            <div class="flex-grow">
                <div class="flex flex-wrap items-start gap-3 mb-2">
                    <span class="inline-flex items-center px-3 py-1 text-xs font-semibold rounded-full" 
                          style="background-color: @Model.AccentColor; color: @Model.BackgroundColor">
                        @(string.IsNullOrEmpty(Model.Category) ? "No Category" : Model.Category)
                    </span>
                    
                    @if (Model.WarrantyExpiration < DateTime.Now)
                    {
                        <span class="px-3 py-1 bg-red-100 text-red-800 text-xs font-medium rounded-full">
                            <i class="fas fa-exclamation-circle mr-1"></i> Warranty Expired
                        </span>
                    }
                    else if (Model.WarrantyExpiration < DateTime.Now.AddMonths(3))
                    {
                        <span class="px-3 py-1 bg-yellow-100 text-yellow-800 text-xs font-medium rounded-full">
                            <i class="fas fa-clock mr-1"></i> Warranty Expiring Soon
                        </span>
                    }
                    else
                    {
                        <span class="px-3 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">
                            <i class="fas fa-shield-alt mr-1"></i> In Warranty
                        </span>
                    }
                </div>
                <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-1">@Model.ProductName</h1>
                <div class="flex flex-wrap items-center gap-x-4 gap-y-2 text-gray-500">
                    <div class="flex items-center">
                        <i class="fas fa-map-marker-alt mr-2 text-primary-400"></i>
                        <span>@(string.IsNullOrEmpty(Model.Location) ? "Location not specified" : Model.Location)</span>
                    </div>
                </div>
            </div>
            <div class="flex flex-col md:items-end mt-4 md:mt-0">
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn-primary w-full md:w-auto mb-2 justify-center">
                    <i class="fas fa-edit mr-2"></i> Edit Product
                </a>
                <div class="text-xs text-gray-500">
                    Last updated: @Model.UpdatedAt.ToString("MMM dd, yyyy HH:mm")
                </div>
            </div>
        </div>
    </div>
</div>

<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <!-- Left Sidebar: Card Preview & Actions -->
    <div class="lg:col-span-1">
        <div class="sticky top-6 space-y-6">
            <!-- Card Preview -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <h2 class="text-lg font-bold mb-5 flex items-center">
                    <i class="fas fa-id-card text-primary-500 mr-2"></i> Product Tag Preview
                </h2>
                
                <!-- Add the image code here -->
                @if (!string.IsNullOrEmpty(Model.ImagePath))
                {
                    <div class="mb-4 bg-white p-3 rounded-lg shadow-sm border border-gray-100">
                        <h4 class="text-sm font-medium text-gray-700 mb-2">Product Image</h4>
                        <div class="flex justify-center">
                            <img src="@Model.ImagePath" alt="@Model.ProductName" class="max-w-full h-auto rounded shadow-sm" style="max-height: 200px;">
                        </div>
                    </div>
                }
                
                <div class="business-card transform hover:scale-105 transition-all duration-300 mb-6"
                    style="background-color: @Model.BackgroundColor; color: @Model.TextColor; perspective: 1000px;">
                    <div class="card-flip-container relative w-full h-full">
                        <div class="card-side card-front absolute w-full h-full rounded-lg p-5">
                            <div class="h-full flex flex-col">
                                <div class="mb-3">
                                    <span class="inline-flex items-center px-2 py-1 text-xs font-bold rounded-full" 
                                          style="background-color: @Model.AccentColor; color: @Model.BackgroundColor">
                                        @Model.Category
                                    </span>
                                    <h3 class="text-xl font-bold mt-2" style="color: @Model.AccentColor">@Model.ProductName</h3>
                                </div>
                                <div class="space-y-1 text-sm mt-auto">
                                    <p class="flex items-center">
                                        <i class="fas fa-map-marker-alt mr-2" style="color: @Model.AccentColor"></i>@(string.IsNullOrEmpty(Model.Location) ? "Location not specified" : Model.Location)
                                    </p>
                                    <p class="flex items-center">
                                        <i class="fas fa-calendar-check mr-2" style="color: @Model.AccentColor"></i>Warranty: @Model.WarrantyExpiration.ToString("MMM d, yyyy")
                                    </p>
                                </div>
                            </div>
                            <button type="button" id="flip-card" class="absolute bottom-2 right-2 text-xs opacity-50 hover:opacity-100 transition-opacity">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                        <div class="card-side card-back absolute w-full h-full rounded-lg p-5 flex flex-col items-center justify-center" style="transform: rotateY(180deg); backface-visibility: hidden;">
                            <img src="@ViewBag.QrCodeImage" alt="QR Code" class="w-32 h-32 mb-2 border border-gray-200 p-1 rounded" />
                            <p class="text-center text-sm">Scan for product details</p>
                            <button type="button" id="flip-card-back" class="absolute bottom-2 right-2 text-xs opacity-50 hover:opacity-100 transition-opacity">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="flex flex-wrap gap-2">
                    <button type="button" id="copy-qr-btn" class="text-sm text-gray-600 flex items-center gap-1 px-3 py-1.5 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
                        <i class="fas fa-copy"></i> Copy QR
                    </button>
                    <a asp-action="DownloadQrCode" asp-route-id="@Model.Id" class="text-sm text-gray-600 flex items-center gap-1 px-3 py-1.5 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
                        <i class="fas fa-download"></i> Download QR
                    </a>
                    <a asp-action="DownloadData" asp-route-id="@Model.Id" class="text-sm text-gray-600 flex items-center gap-1 px-3 py-1.5 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors">
                        <i class="fas fa-file-alt"></i> Data File
                    </a>
                </div>
            </div>
            
            <!-- Quick Actions -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <h2 class="text-lg font-bold mb-4 flex items-center">
                    <i class="fas fa-bolt text-primary-500 mr-2"></i> Quick Actions
                </h2>
                
                <div class="space-y-3">
                    <a asp-action="Print" asp-route-id="@Model.Id" class="w-full px-4 py-3 flex items-center justify-between bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-primary-100 flex items-center justify-center text-primary-600 mr-3 group-hover:scale-110 transition-transform">
                                <i class="fas fa-print"></i>
                            </div>
                            <div>
                                <div class="font-medium">Print Tag</div>
                                <div class="text-xs text-gray-500">Print this product tag</div>
                            </div>
                        </div>
                        <i class="fas fa-chevron-right text-gray-300 group-hover:text-gray-500 group-hover:translate-x-1 transition-all"></i>
                    </a>
                    
                    <a asp-action="QrCode" asp-route-id="@Model.Id" class="w-full px-4 py-3 flex items-center justify-between bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 mr-3 group-hover:scale-110 transition-transform">
                                <i class="fas fa-qrcode"></i>
                            </div>
                            <div>
                                <div class="font-medium">Show QR Code</div>
                                <div class="text-xs text-gray-500">Full-screen QR for scanning</div>
                            </div>
                        </div>
                        <i class="fas fa-chevron-right text-gray-300 group-hover:text-gray-500 group-hover:translate-x-1 transition-all"></i>
                    </a>
                    
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="w-full px-4 py-3 flex items-center justify-between bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-green-100 flex items-center justify-center text-green-600 mr-3 group-hover:scale-110 transition-transform">
                                <i class="fas fa-edit"></i>
                            </div>
                            <div>
                                <div class="font-medium">Edit Product</div>
                                <div class="text-xs text-gray-500">Modify product information</div>
                            </div>
                        </div>
                        <i class="fas fa-chevron-right text-gray-300 group-hover:text-gray-500 group-hover:translate-x-1 transition-all"></i>
                    </a>
                    
                    <a asp-action="Delete" asp-route-id="@Model.Id" class="w-full px-4 py-3 flex items-center justify-between bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors group">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-red-100 flex items-center justify-center text-red-600 mr-3 group-hover:scale-110 transition-transform">
                                <i class="fas fa-trash"></i>
                            </div>
                            <div>
                                <div class="font-medium">Delete Product</div>
                                <div class="text-xs text-gray-500">Remove this product</div>
                            </div>
                        </div>
                        <i class="fas fa-chevron-right text-gray-300 group-hover:text-gray-500 group-hover:translate-x-1 transition-all"></i>
                    </a>
                </div>
            </div>
            
            <!-- Maintenance Reminders -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <h2 class="text-lg font-bold mb-4 flex items-center">
                    <i class="fas fa-bell text-primary-500 mr-2"></i> Maintenance Alerts
                </h2>
                
                @if (Model.WarrantyExpiration < DateTime.Now.AddMonths(3))
                {
                    <div class="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <i class="fas fa-exclamation-triangle text-yellow-500"></i>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-yellow-800">Warranty Expiration</h3>
                                <div class="mt-1 text-sm text-yellow-700">
                                    <p>Warranty expires on @Model.WarrantyExpiration.ToString("MMM d, yyyy") (@((Model.WarrantyExpiration - DateTime.Now).Days) days remaining)</p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                
                <div class="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-tools text-blue-500"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-blue-800">Maintenance Information</h3>
                            <div class="mt-1 text-sm text-blue-700">
                                <p>@(string.IsNullOrEmpty(Model.MaintenanceInfo) ? "No maintenance information provided." : Model.MaintenanceInfo)</p>
                            </div>
                            <div class="mt-2">
                                <button type="button" id="add-reminder" class="text-xs text-blue-600 hover:text-blue-800 flex items-center">
                                    <i class="fas fa-plus-circle mr-1"></i> Add Reminder
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Maintenance Reminders List -->
                <div class="mt-4">
                    <h4 class="text-sm font-medium text-gray-700 mb-2">Upcoming Reminders</h4>
                    <div id="reminders-list" class="space-y-2">
                        <!-- Will be populated by JavaScript -->
                        <div class="p-3 text-center text-gray-500 text-sm">
                            <i class="fas fa-spinner fa-spin mr-2"></i> Loading reminders...
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Main Content Area: Product Details -->
    <div class="lg:col-span-2">
        <!-- Tab Navigation -->
        <div class="flex border-b border-gray-200 mb-6">
            <button type="button" class="tab-button px-6 py-3 text-primary-600 border-b-2 border-primary-500 font-medium text-sm" data-tab="product-info">
                Product Information
            </button>
            <button type="button" class="tab-button px-6 py-3 text-gray-500 hover:text-gray-700 font-medium text-sm" data-tab="history">
                History
            </button>
            <button type="button" class="tab-button px-6 py-3 text-gray-500 hover:text-gray-700 font-medium text-sm" data-tab="documents">
                Documents
            </button>
            <button type="button" class="tab-button px-6 py-3 text-gray-500 hover:text-gray-700 font-medium text-sm" data-tab="scan-settings">
                Scan Settings
            </button>
        </div>
        
        <!-- Product Information Tab -->
        <div id="tab-product-info" class="tab-content space-y-6">
            <!-- Basic Information -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-100 flex justify-between items-center">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-info-circle text-primary-500 mr-2"></i> Basic Information
                    </h3>
                    <button type="button" class="text-sm text-gray-500 hover:text-primary-600 flex items-center copy-section" data-section="basic-info">
                        <i class="fas fa-copy mr-1"></i> Copy
                    </button>
                </div>
                
                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="basic-info">
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Product Name</span>
                            <span class="font-medium text-gray-800">@Model.ProductName</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Category</span>
                            <span class="font-medium text-gray-800">@(string.IsNullOrEmpty(Model.Category) ? "Not specified" : Model.Category)</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Location</span>
                            <span class="font-medium text-gray-800">@(string.IsNullOrEmpty(Model.Location) ? "Not specified" : Model.Location)</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Manufacture Date</span>
                            <span class="font-medium text-gray-800">@Model.ManufactureDate.ToString("MMMM d, yyyy")</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Purchase Date</span>
                            <span class="font-medium text-gray-800">@Model.PurchaseDate.ToString("MMMM d, yyyy")</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Warranty Until</span>
                            <span class="font-medium text-gray-800">@Model.WarrantyExpiration.ToString("MMMM d, yyyy")</span>
                        </div>
                        
                        <div class="flex flex-col md:col-span-2">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Maintenance Information</span>
                            <span class="font-medium text-gray-800">@(string.IsNullOrEmpty(Model.MaintenanceInfo) ? "Not specified" : Model.MaintenanceInfo)</span>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(Model.CustomFieldsData) && Model.CustomFieldsData != "{}")
                        {
                            <div class="flex flex-col md:col-span-2">
                                <span class="text-xs text-gray-500 uppercase font-medium mb-1">Custom Fields</span>
                                <div class="font-medium text-gray-800">
                                    @try
                                    {
                                        var customFields = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(Model.CustomFieldsData);
                                        if (customFields != null && customFields.Count > 0)
                                        {
                                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                                                @foreach (var field in customFields)
                                                {
                                                    <div class="flex items-center">
                                                        <span class="text-sm font-medium text-gray-600 mr-2">@field.Key:</span>
                                                        <span class="text-sm text-gray-800">@field.Value</span>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <span>No custom fields</span>
                                        }
                                    }
                                    catch
                                    {
                                        <span>Invalid custom fields data</span>
                                    }
                                </div>
                            </div>
                        }
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Created By</span>
                            <span class="font-medium text-gray-800">@(string.IsNullOrEmpty(Model.CreatedBy) ? "System" : Model.CreatedBy)</span>
                        </div>
                        
                        <div class="flex flex-col">
                            <span class="text-xs text-gray-500 uppercase font-medium mb-1">Created At</span>
                            <span class="font-medium text-gray-800">@Model.CreatedAt.ToString("MMMM d, yyyy h:mm tt")</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Timeline & Dates -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-100">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-calendar-alt text-primary-500 mr-2"></i> Timeline
                    </h3>
                </div>
                
                <div class="p-6">
                    <div class="relative">
                        <!-- Timeline bar -->
                        <div class="absolute h-full w-0.5 bg-gray-200 left-2.5 top-0"></div>
                        
                        <div class="space-y-6">
                            <!-- Manufacture Date -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full bg-blue-100 border-2 border-blue-500 z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Manufactured</h4>
                                    <p class="text-sm text-gray-500">@Model.ManufactureDate.ToString("MMMM d, yyyy")</p>
                                    <p class="text-xs text-gray-400 mt-1">@((DateTime.Now - Model.ManufactureDate).Days) days ago</p>
                                </div>
                            </div>
                            
                            <!-- Purchase Date -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full bg-green-100 border-2 border-green-500 z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Purchased</h4>
                                    <p class="text-sm text-gray-500">@Model.PurchaseDate.ToString("MMMM d, yyyy")</p>
                                    <p class="text-xs text-gray-400 mt-1">@((DateTime.Now - Model.PurchaseDate).Days) days ago</p>
                                </div>
                            </div>
                            
                            <!-- Warranty Expiration -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full @(Model.WarrantyExpiration < DateTime.Now ? "bg-red-100 border-2 border-red-500" : "bg-yellow-100 border-2 border-yellow-500") z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Warranty Expires</h4>
                                    <p class="text-sm text-gray-500">@Model.WarrantyExpiration.ToString("MMMM d, yyyy")</p>
                                    @if (Model.WarrantyExpiration > DateTime.Now)
                                    {
                                        <p class="text-xs text-gray-400 mt-1">@((Model.WarrantyExpiration - DateTime.Now).Days) days remaining</p>
                                    }
                                    else
                                    {
                                        <p class="text-xs text-red-500 mt-1">Expired @((DateTime.Now - Model.WarrantyExpiration).Days) days ago</p>
                                    }
                                </div>
                            </div>
                            
                            <!-- Creation in System -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full bg-purple-100 border-2 border-purple-500 z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Created in System</h4>
                                    <p class="text-sm text-gray-500">@Model.CreatedAt.ToString("MMMM d, yyyy h:mm tt")</p>
                                    <p class="text-xs text-gray-400 mt-1">@((DateTime.Now - Model.CreatedAt).Days) days ago</p>
                                </div>
                            </div>
                            
                            <!-- Last Update -->
                            <div class="relative flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 rounded-full bg-gray-100 border-2 border-gray-500 z-10 mt-1"></div>
                                <div class="ml-4">
                                    <h4 class="text-sm font-medium text-gray-800">Last Updated</h4>
                                    <p class="text-sm text-gray-500">@Model.UpdatedAt.ToString("MMMM d, yyyy h:mm tt")</p>
                                    @if ((DateTime.Now - Model.UpdatedAt).TotalDays < 1)
                                    {
                                        <p class="text-xs text-gray-400 mt-1">@Math.Round((DateTime.Now - Model.UpdatedAt).TotalHours) hours ago</p>
                                    }
                                    else
                                    {
                                        <p class="text-xs text-gray-400 mt-1">@((DateTime.Now - Model.UpdatedAt).Days) days ago</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Visual Customization -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-100">
                    <h3 class="font-bold text-gray-700 flex items-center">
                        <i class="fas fa-palette text-primary-500 mr-2"></i> Visual Design
                    </h3>
                </div>
                
                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                            <span class="text-xs text-gray-500 uppercase font-medium mb-2 block">Background Color</span>
                            <div class="flex items-center">
                                <div class="w-10 h-10 rounded-md border border-gray-200 shadow-inner cursor-pointer hover:scale-105 transition-transform" id="bg-color-preview" style="background-color: @Model.BackgroundColor"></div>
                                <span class="font-mono text-sm ml-3">@Model.BackgroundColor</span>
                            </div>
                        </div>
                        
                        <div>
                            <span class="text-xs text-gray-500 uppercase font-medium mb-2 block">Text Color</span>
                            <div class="flex items-center">
                                <div class="w-10 h-10 rounded-md border border-gray-200 shadow-inner cursor-pointer hover:scale-105 transition-transform" style="background-color: @Model.TextColor"></div>
                                <span class="font-mono text-sm ml-3">@Model.TextColor</span>
                            </div>
                        </div>
                        
                        <div>
                            <span class="text-xs text-gray-500 uppercase font-medium mb-2 block">Accent Color</span>
                            <div class="flex items-center">
                                <div class="w-10 h-10 rounded-md border border-gray-200 shadow-inner cursor-pointer hover:scale-105 transition-transform" style="background-color: @Model.AccentColor"></div>
                                <span class="font-mono text-sm ml-3">@Model.AccentColor</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6">
                        <span class="text-xs text-gray-500 uppercase font-medium mb-2 block">QR Code Colors</span>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <span class="text-xs text-gray-500 mb-2 block">Foreground Color</span>
                                <div class="flex items-center">
                                    <div class="w-10 h-10 rounded-md border border-gray-200 shadow-inner cursor-pointer hover:scale-105 transition-transform" style="background-color: @Model.QrFgColor"></div>
                                    <span class="font-mono text-sm ml-3">@Model.QrFgColor</span>
                                </div>
                            </div>
                            
                            <div>
                                <span class="text-xs text-gray-500 mb-2 block">Background Color</span>
                                <div class="flex items-center">
                                    <div class="w-10 h-10 rounded-md border border-gray-200 shadow-inner cursor-pointer hover:scale-105 transition-transform" style="background-color: @Model.QrBgColor"></div>
                                    <span class="font-mono text-sm ml-3">@Model.QrBgColor</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                        <div class="flex items-center justify-between">
                            <h4 class="text-sm font-medium text-gray-700">Color Palette Preview</h4>
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="text-xs text-primary-600 hover:text-primary-700">Change Colors</a>
                        </div>
                        <div class="mt-3 flex items-center space-x-2">
                            <div class="h-8 flex-grow rounded" style="background-color: @Model.BackgroundColor"></div>
                            <div class="h-8 flex-grow rounded" style="background-color: @Model.TextColor"></div>
                            <div class="h-8 flex-grow rounded" style="background-color: @Model.AccentColor"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- History Tab -->
        <div id="tab-history" class="tab-content hidden space-y-6">
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                
                <div id="history-container" class="space-y-4">
                    <!-- Loading indicator -->
                    <div id="history-loading" class="py-10 text-center">
                        <div class="inline-block animate-spin w-8 h-8 border-4 border-gray-300 border-t-primary-600 rounded-full"></div>
                        <p class="mt-2 text-sm text-gray-500">Loading history...</p>
                    </div>
                    
                    <!-- History items will be loaded here -->
                    <div id="history-items" class="hidden">
                        <!-- Will be populated by JavaScript -->
                    </div>
                    
                    <!-- No history message -->
                    <div id="no-history" class="py-10 text-center hidden">
                        <i class="fas fa-history text-gray-300 text-4xl mb-2"></i>
                        <p class="text-gray-500">No history records found for this product.</p>
                    </div>
                </div>
                
                <div class="mt-6 text-center">
                    <button id="load-more-history" type="button" class="text-primary-600 hover:text-primary-800 text-sm font-medium hidden">
                        <i class="fas fa-chevron-down mr-1"></i> Load More History
                    </button>
                </div>
            </div>
            
            <!-- User Activity Timeline -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <h3 class="text-lg font-bold text-gray-800 mb-4">User Activity</h3>
                
                <div id="user-activity-timeline" class="relative">
                    <!-- Timeline line -->
                    <div class="absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200"></div>
                    
                    <!-- Timeline entries will be loaded here -->
                    <div id="activity-items">
                        <div class="mb-4 pl-12 relative">
                            <div class="absolute left-0 w-8 h-8 rounded-full bg-primary-100 flex items-center justify-center">
                                <i class="fas fa-plus text-primary-600"></i>
                            </div>
                            <div class="p-3 bg-gray-50 rounded-lg">
                                <p class="text-sm font-medium text-gray-800">Created by @Model.CreatedBy</p>
                                <p class="text-xs text-gray-500">@Model.CreatedAt.ToString("MMM d, yyyy h:mm tt")</p>
                            </div>
                        </div>
                        
                        <div class="mb-4 pl-12 relative">
                            <div class="absolute left-0 w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center">
                                <i class="fas fa-edit text-blue-600"></i>
                            </div>
                            <div class="p-3 bg-gray-50 rounded-lg">
                                <p class="text-sm font-medium text-gray-800">Last updated by @Model.CreatedBy</p>
                                <p class="text-xs text-gray-500">@Model.UpdatedAt.ToString("MMM d, yyyy h:mm tt")</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Documents Tab -->
        <div id="tab-documents" class="tab-content hidden space-y-6">
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-lg font-bold text-gray-800">Related Documents</h3>
                    <button type="button" id="add-document-btn" class="text-primary-600 hover:text-primary-800 text-sm font-medium flex items-center">
                        <i class="fas fa-plus mr-1"></i> Add Document
                    </button>
                </div>
                
                <div id="documents-container">
                    <!-- Loading indicator -->
                    <div id="documents-loading" class="py-10 text-center">
                        <div class="inline-block animate-spin w-8 h-8 border-4 border-gray-300 border-t-primary-600 rounded-full"></div>
                        <p class="mt-2 text-sm text-gray-500">Loading documents...</p>
                    </div>
                    
                    <!-- Document items will be loaded here -->
                    <div id="document-items" class="space-y-4 hidden">
                        <!-- Will be populated by JavaScript -->
                    </div>
                    
                    <!-- No documents message -->
                    <div id="no-documents" class="py-10 text-center hidden">
                        <i class="fas fa-file-alt text-gray-300 text-4xl mb-2"></i>
                        <p class="text-gray-500">No documents attached to this product.</p>
                        <button type="button" id="add-first-document" class="mt-4 px-4 py-2 bg-primary-50 text-primary-600 rounded-md font-medium hover:bg-primary-100 transition-colors">
                            <i class="fas fa-plus mr-1"></i> Add First Document
                        </button>
                    </div>
                </div>
                
                <!-- Document Upload Section -->
                <div class="mt-8 border-t border-gray-100 pt-6 hidden" id="document-upload-section">
                    <h4 class="text-sm font-medium text-gray-700 mb-4">Upload New Documents</h4>
                    
                    <form id="document-upload-form" method="post" enctype="multipart/form-data" class="space-y-4">
                    <input type="hidden" name="cardId" value="@Model.Id" />
                    
                    <div>
                        <label for="document-title" class="block text-sm font-medium text-gray-700 mb-1">Document Title</label>
                        <input type="text" id="document-title" name="title" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" placeholder="e.g. Product Manual" required />
                    </div>
                    
                    <div>
                        <label for="document-type" class="block text-sm font-medium text-gray-700 mb-1">Document Type</label>
                        <select id="document-type" name="documentType" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
                            <option value="Manual">Manual</option>
                            <option value="Datasheet">Datasheet</option>
                            <option value="Certificate">Certificate</option>
                            <option value="Invoice">Invoice</option>
                            <option value="Maintenance">Maintenance Record</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    
                    <div>
                        <label for="document-description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                       <textarea id="document-description" name="description" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" placeholder="Brief description of these documents">No additional information</textarea>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Document Files</label>
                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center" id="document-drop-area">
                            <div class="flex flex-col items-center justify-center">
                                <i class="fas fa-cloud-upload-alt text-3xl text-gray-400 mb-3"></i>
                                <p class="text-sm text-gray-500 mb-2">Drag and drop files here or click to browse</p>
                                <p class="text-xs text-gray-400 mb-4">PDF, Excel, Word, or Image files up to 10MB</p>
                                <input type="file" id="document-file" name="documentFiles" class="hidden" accept=".pdf,.doc,.docx,.xls,.xlsx,.png,.jpg,.jpeg" multiple required />
                                <button type="button" id="browse-document" class="px-4 py-2 bg-primary-50 text-primary-600 rounded-md text-sm font-medium hover:bg-primary-100 transition-colors">
                                    Browse Files
                                </button>
                            </div>
                        </div>
                        <div id="files-preview" class="mt-2 space-y-2"></div>
                    </div>
                        
                    <div class="flex justify-end space-x-3 mt-6">
                        <button type="button" id="cancel-upload" class="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors">
                            Cancel
                        </button>
                        <button type="submit" id="upload-document" class="px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700 transition-colors flex items-center">
                            <span id="upload-text">Upload Documents</span>
                            <span id="upload-spinner" class="ml-2 hidden">
                                <i class="fas fa-spinner fa-spin"></i>
                            </span>
                        </button>
                    </div>
                    </form>
                </div>
            </div>
        </div>
        
<!-- Scan Settings Tab -->
<div id="tab-scan-settings" class="tab-content hidden space-y-6">
    <div class="bg-white rounded-xl shadow-md overflow-hidden border border-gray-100">
        <div class="flex items-center justify-between px-6 py-4 bg-gradient-to-r from-primary-600 to-primary-500">
            <h3 class="text-lg font-bold text-white flex items-center">
                <i class="fas fa-qrcode mr-2"></i> QR Scan View Settings
            </h3>
            <button type="button" id="save-scan-settings" class="px-4 py-2 bg-white text-primary-600 rounded-md hover:bg-gray-100 transition-all duration-200 flex items-center font-medium">
                <i class="fas fa-save mr-2"></i> Save Settings
            </button>
        </div>
        
        <div class="p-6">
            <p class="text-sm text-gray-600 mb-4 flex items-center">
                <i class="fas fa-info-circle text-primary-500 mr-2"></i>
                Control what information is visible when someone scans the QR code for this product.
            </p>
            
 <!-- Access Control Card -->
<div class="mb-6 p-5 rounded-lg border transition-all duration-300" id="access-control-container">
    <div class="flex flex-col md:flex-row md:items-center md:justify-between">
        <div>
            <h4 class="text-lg font-medium text-gray-800 mb-1 flex items-center">
                <i class="fas fa-lock text-primary-500 mr-2" id="access-control-icon"></i> Access Control
            </h4>
            <p class="text-sm text-gray-600">Set whether this QR scan view requires authentication</p>
        </div>
        <div class="mt-4 md:mt-0">
            <div class="flex items-center space-x-3">
                <div class="text-right hidden md:block">
                    <p class="text-sm font-medium" id="access-mode-label">Public Mode</p>
                    <p class="text-xs text-gray-500" id="access-mode-description">Anyone can view without login</p>
                </div>
                <label class="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" id="private-mode-toggle" class="sr-only peer" name="scan_settings_private">
                    <div class="w-14 h-7 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[4px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-primary-600"></div>
                    <span class="ml-3 text-sm font-medium text-gray-900" id="toggle-label">Public</span>
                </label>
            </div>
            <p class="text-xs text-gray-500 mt-1 ml-16 md:hidden" id="mobile-access-description">Anyone can view without login</p>
        </div>
    </div>
</div>
            
            <!-- Settings Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Basic Information Section -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                        <h4 class="font-medium text-gray-700 flex items-center">
                            <i class="fas fa-info-circle text-primary-500 mr-2"></i> Basic Information
                        </h4>
                    </div>
                    <div class="p-4 space-y-3">
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-tag text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Product Name</span>
                                <span class="ml-2 text-xs text-gray-500">(Always visible)</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="product_name" class="toggle-checkbox" checked disabled>
                        </label>
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-folder text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Category</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="category" class="toggle-checkbox" checked>
                        </label>
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-map-marker-alt text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Location</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="location" class="toggle-checkbox" checked>
                        </label>
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-image text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Product Image</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="image" class="toggle-checkbox" checked>
                        </label>
                    </div>
                </div>
                
                <!-- Dates & Warranty Section -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                        <h4 class="font-medium text-gray-700 flex items-center">
                            <i class="fas fa-calendar-alt text-primary-500 mr-2"></i> Dates & Warranty
                        </h4>
                    </div>
                    <div class="p-4 space-y-3">
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-industry text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Manufacture Date</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="manufacture_date" class="toggle-checkbox" checked>
                        </label>
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-shopping-cart text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Purchase Date</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="purchase_date" class="toggle-checkbox" checked>
                        </label>
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-shield-alt text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Warranty Information</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="warranty" class="toggle-checkbox" checked>
                        </label>
                    </div>
                </div>
                
                <!-- Custom Fields Section -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                        <h4 class="font-medium text-gray-700 flex items-center">
                            <i class="fas fa-puzzle-piece text-primary-500 mr-2"></i> Custom Fields
                        </h4>
                    </div>
                    <div class="p-4 space-y-3" id="custom-fields-container">
                        @if (!string.IsNullOrEmpty(Model.CustomFieldsData) && Model.CustomFieldsData != "{}")
                        {
                            try
                            {
                                var customFields = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(Model.CustomFieldsData);
                                if (customFields != null && customFields.Count > 0)
                                {
                                    foreach (var field in customFields)
                                    {
                                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                                            <span class="flex items-center">
                                                <i class="fas fa-list-alt text-gray-400 mr-2 w-5"></i>
                                                <span class="text-gray-800">@field.Key</span>
                                            </span>
                                            <input type="checkbox" name="scan_fields" value="custom_@field.Key" class="toggle-checkbox" checked>
                                        </label>
                                    }
                                }
                                else
                                {
                                    <div class="text-center py-4 text-sm text-gray-500">
                                        <i class="fas fa-info-circle mb-2 text-lg"></i>
                                        <p>No custom fields available</p>
                                    </div>
                                }
                            }
                            catch
                            {
                                <div class="text-center py-4 text-sm text-gray-500">
                                    <i class="fas fa-exclamation-triangle mb-2 text-lg text-yellow-500"></i>
                                    <p>Invalid custom fields data</p>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4 text-sm text-gray-500">
                                <i class="fas fa-info-circle mb-2 text-lg"></i>
                                <p>No custom fields available</p>
                            </div>
                        }
                    </div>
                </div>
                
                <!-- Additional Sections -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                        <h4 class="font-medium text-gray-700 flex items-center">
                            <i class="fas fa-th-large text-primary-500 mr-2"></i> Additional Sections
                        </h4>
                    </div>
                    <div class="p-4 space-y-3">
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-tools text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Maintenance Information</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="maintenance" class="toggle-checkbox" checked>
                        </label>
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-file-alt text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Documents Section</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="documents" class="toggle-checkbox" checked>
                        </label>
                        <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                            <span class="flex items-center">
                                <i class="fas fa-exclamation-circle text-gray-400 mr-2 w-5"></i>
                                <span class="text-gray-800">Issues Section</span>
                            </span>
                            <input type="checkbox" name="scan_fields" value="issues" class="toggle-checkbox" checked>
                        </label>
                    </div>
                </div>
            </div>
            
            <!-- UI Elements Visibility Section -->
<div class="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
        <h4 class="font-medium text-gray-700 flex items-center">
            <i class="fas fa-eye text-primary-500 mr-2"></i> UI Elements Visibility
        </h4>
    </div>
    <div class="p-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                <span class="flex items-center">
                    <i class="fas fa-exclamation-triangle text-gray-400 mr-2 w-5"></i>
                    <span class="text-gray-800">Hide "Report Issue" Button</span>
                </span>
                <input type="checkbox" name="scan_ui_elements" value="hide_report_issue" class="toggle-checkbox">
            </label>
            
            <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                <span class="flex items-center">
                    <i class="fas fa-headset text-gray-400 mr-2 w-5"></i>
                    <span class="text-gray-800">Hide "Contact Support" Section</span>
                </span>
                <input type="checkbox" name="scan_ui_elements" value="hide_contact_support" class="toggle-checkbox">
            </label>
            
            <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                <span class="flex items-center">
                    <i class="fas fa-info-circle text-gray-400 mr-2 w-5"></i>
                    <span class="text-gray-800">Hide Product Details Section</span>
                </span>
                <input type="checkbox" name="scan_ui_elements" value="hide_product_details" class="toggle-checkbox">
            </label>
            
            <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                <span class="flex items-center">
                    <i class="fas fa-phone-alt text-gray-400 mr-2 w-5"></i>
                    <span class="text-gray-800">Hide Contact Support Button</span>
                </span>
                <input type="checkbox" name="scan_ui_elements" value="hide_contact" class="toggle-checkbox">
            </label>
            
            <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                <span class="flex items-center">
                    <i class="fas fa-history text-gray-400 mr-2 w-5"></i>
                    <span class="text-gray-800">Hide Maintenance History</span>
                </span>
                <input type="checkbox" name="scan_ui_elements" value="hide_maintenance_history" class="toggle-checkbox">
            </label>
            
            <label class="flex items-center justify-between p-2 hover:bg-gray-50 rounded-md transition-colors">
                <span class="flex items-center">
                    <i class="fas fa-tools text-gray-400 mr-2 w-5"></i>
                    <span class="text-gray-800">Hide Maintenance Information</span>
                </span>
                <input type="checkbox" name="scan_ui_elements" value="hide_maintenance_info" class="toggle-checkbox">
            </label>
        </div>
    </div>
</div>
            
 <!-- Preview Section -->
<div class="mt-8 bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden">
    <div class="px-4 py-3 bg-gray-50 border-b border-gray-200 flex items-center justify-between">
        <h4 class="font-medium text-gray-700 flex items-center">
            <i class="fas fa-mobile-alt text-primary-500 mr-2"></i> QR Scan View Preview
        </h4>
        <div class="flex space-x-2">
            <button type="button" id="refresh-preview" class="px-3 py-1.5 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors text-sm">
                <i class="fas fa-sync-alt mr-1"></i> Refresh
            </button>
            <button type="button" id="fullscreen-preview" class="px-3 py-1.5 bg-primary-50 text-primary-700 rounded hover:bg-primary-100 transition-colors text-sm">
                <i class="fas fa-expand-alt mr-1"></i> Fullscreen
            </button>
        </div>
    </div>
    
    <!-- The key fix is here - proper sizing and scaling -->
    <div id="preview-container" class="relative border-t border-gray-100">
        <div id="scan-preview" class="w-full h-[800px] flex items-center justify-center bg-gray-50">
            <div class="text-center">
                <div class="mb-4 text-primary-500"><i class="fas fa-qrcode text-6xl"></i></div>
                <p class="text-gray-600 mb-4">Click to load the QR scan preview</p>
                <button id="load-preview-btn" class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors">
                    <i class="fas fa-eye mr-2"></i> Load Preview
                </button>
            </div>
        </div>
        <div class="absolute top-4 right-4 z-10 hidden" id="preview-controls">
            <button type="button" id="close-fullscreen" class="p-2 bg-white rounded-full shadow-lg text-gray-600 hover:text-gray-800">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
</div>

        </div>
    </div>
</div>

<!-- Add Reminder Modal -->
<div id="reminder-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-xl shadow-xl max-w-md w-full mx-4 overflow-hidden transform transition-all">
        <div class="px-6 py-4 border-b border-gray-100 flex justify-between items-center">
            <h3 class="font-bold text-gray-800" id="reminder-modal-title">Add Maintenance Reminder</h3>
            <button type="button" id="close-reminder-modal" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="p-6">
            <form id="reminder-form" class="space-y-4">
                <input type="hidden" id="reminder-id" value="0" />
                <input type="hidden" id="card-id" value="@Model.Id" />
                
                <div>
                    <label for="reminder-title" class="block text-sm font-medium text-gray-700 mb-2">Reminder Title</label>
                    <input type="text" id="reminder-title" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" placeholder="e.g. Filter Replacement" required />
                </div>
                
                <div>
                    <label for="reminder-date" class="block text-sm font-medium text-gray-700 mb-2">Due Date</label>
                    <input type="date" id="reminder-date" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" required />
                </div>
                
                <div>
                    <label for="reminder-notes" class="block text-sm font-medium text-gray-700 mb-2">Notes</label>
                    <textarea id="reminder-notes" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" rows="3" placeholder="Additional information about this maintenance task"></textarea>
                </div>
                
                <div>
                    <label for="reminder-repeat" class="block text-sm font-medium text-gray-700 mb-2">Repeat</label>
                    <select id="reminder-repeat" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500">
                        <option value="never">Never</option>
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="quarterly">Quarterly</option>
                        <option value="yearly">Yearly</option>
                    </select>
                </div>
                
                <div class="flex justify-end space-x-3 mt-6">
                    <button type="button" id="cancel-reminder" class="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" id="save-reminder" class="px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700 transition-colors">
                        Save Reminder
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-xl shadow-xl max-w-md w-full mx-4 overflow-hidden transform transition-all">
        <div class="px-6 py-4 border-b border-gray-100">
            <h3 class="font-bold text-gray-800">Confirm Delete</h3>
        </div>
        
        <div class="p-6">
            <div class="mb-4">
                <div class="flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full mb-4">
                    <i class="fas fa-exclamation-triangle text-red-600 text-xl"></i>
                </div>
                <h4 class="text-center text-lg font-medium text-gray-800 mb-2">Are you sure?</h4>
                <p class="text-center text-gray-500 text-sm" id="delete-message">
                    Are you sure you want to delete this item? This action cannot be undone.
                </p>
            </div>
            
            <div class="flex justify-center space-x-4">
                <button type="button" id="cancel-delete" class="px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors">
                    Cancel
                </button>
                <button type="button" id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Share Modal -->
<div id="share-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-xl shadow-xl max-w-md w-full mx-4 overflow-hidden transform transition-all">
        <div class="px-6 py-4 border-b border-gray-100 flex justify-between items-center">
            <h3 class="font-bold text-gray-800">Share Product Tag</h3>
            <button type="button" id="close-share-modal" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="p-6">
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">QR Code</label>
                <div class="flex justify-center mb-4">
                    <img src="@ViewBag.QrCodeImage" alt="QR Code" class="w-40 h-40 border border-gray-200 p-1 rounded" />
                </div>
                <div class="flex justify-center">
                    <a asp-action="DownloadQrCode" asp-route-id="@Model.Id" class="text-sm bg-primary-50 text-primary-600 px-3 py-1.5 rounded hover:bg-primary-100 transition-colors">
                        <i class="fas fa-download mr-1"></i> Download QR Code
                    </a>
                </div>
            </div>
            
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">Share Link</label>
                <div class="flex">
                    <input type="text" id="share-link" value="@($"{Context.Request.Scheme}://{Context.Request.Host}/Card/Details/{Model.Id}")" class="w-full px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-1 focus:ring-primary-500 focus:border-primary-500" readonly />
                    <button type="button" id="copy-link-btn" class="px-3 py-2 bg-primary-600 text-white rounded-r-md hover:bg-primary-700 transition-colors">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Share via</label>
                <div class="flex space-x-2">
                    <button type="button" class="flex-1 px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors text-sm share-btn" data-type="facebook">
                        <i class="fab fa-facebook mr-1"></i> Facebook
                    </button>
                    <button type="button" class="flex-1 px-3 py-2 bg-blue-400 text-white rounded hover:bg-blue-500 transition-colors text-sm share-btn" data-type="twitter">
                        <i class="fab fa-twitter mr-1"></i> Twitter
                    </button>
                    <button type="button" class="flex-1 px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors text-sm share-btn" data-type="whatsapp">
                        <i class="fab fa-whatsapp mr-1"></i> WhatsApp
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Document Preview Modal -->
<div id="document-preview-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 transform transition-all flex flex-col h-3/4">
        <div class="flex justify-between items-center p-5 border-b">
            <h3 class="text-lg font-semibold" id="document-preview-title">Document Preview</h3>
            <button id="close-doc-preview-modal" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="p-5 flex-grow overflow-auto" id="document-preview-content">
            <div class="flex justify-center items-center h-full">
                <i class="fas fa-spinner fa-spin text-2xl text-primary-500"></i>
            </div>
        </div>
        <div class="p-5 border-t flex justify-between">
            <button id="download-document-btn" class="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700">
                <i class="fas fa-download mr-2"></i> Download
            </button>
            <button id="close-preview-btn" class="bg-gray-100 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-200">
                Close
            </button>
        </div>
    </div>
</div>

<!-- Toast Notification -->
<div id="toast-notification" class="fixed bottom-4 right-4 bg-white rounded-lg shadow-lg border border-gray-100 p-4 max-w-sm transform translate-y-20 opacity-0 transition-all duration-300 z-50 hidden">
    <div class="flex items-center">
        <div id="toast-icon" class="flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-green-100">
            <i id="toast-icon-symbol" class="fas fa-check text-green-500"></i>
        </div>
        <div class="ml-3 flex-1">
            <p id="toast-message" class="text-sm font-medium text-gray-900">Information copied to clipboard</p>
            <p id="toast-description" class="text-sm text-gray-500">You can now paste it anywhere you need</p>
        </div>
        <button id="close-toast" class="ml-auto text-gray-400 hover:text-gray-500">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

@section Scripts {
    <script>
        // Wait for DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Card flip functionality
            initCardFlip();
            
            // Tab switching functionality
            initTabSwitching();
            
            // Share functionality
            initShareModal();
            
            // Reminder functionality
            initReminders();
            
            // Document functionality
            initDocuments();
            
            // History functionality
            initHistory();
            
            // Scan settings functionality
            initScanSettings();
            
            // Copy to clipboard functionality
            initCopyToClipboard();
            
            // Toast notifications
            initToastNotifications();
            
            // Initialize document preview modal
            initDocumentPreview();
        });

        function initCardFlip() {
            const flipCard = document.getElementById('flip-card');
            const flipCardBack = document.getElementById('flip-card-back');
            const cardContainer = document.querySelector('.card-flip-container');
            
            if (flipCard && cardContainer) {
                flipCard.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    cardContainer.style.transform = 'rotateY(180deg)';
                    document.querySelector('.card-front').style.opacity = '0';
                    document.querySelector('.card-back').style.opacity = '1';
                });
            }
            
            if (flipCardBack && cardContainer) {
                flipCardBack.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    cardContainer.style.transform = 'rotateY(0deg)';
                    document.querySelector('.card-front').style.opacity = '1';
                    document.querySelector('.card-back').style.opacity = '0';
                });
            }
            
            // Add CSS for card flipping if it doesn't exist
            if (!document.querySelector('style#card-flip-styles')) {
                const style = document.createElement('style');
                style.id = 'card-flip-styles';
                style.textContent = `
                    .card-flip-container {
                        position: relative;
                        width: 100%;
                        height: 100%;
                        transform-style: preserve-3d;
                        transition: transform 0.6s;
                    }
                    .card-side {
                        backface-visibility: hidden;
                        transition: opacity 0.3s;
                        position: absolute;
                        width: 100%;
                        height: 100%;
                    }
                    .card-front {
                        z-index: 2;
                    }
                    .card-back {
                        transform: rotateY(180deg);
                    }
                `;
                document.head.appendChild(style);
            }
        }
        
        function initTabSwitching() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const tabId = this.getAttribute('data-tab');
                    
                    // Remove active class from all buttons
                    tabButtons.forEach(btn => {
                        btn.classList.remove('text-primary-600', 'border-b-2', 'border-primary-500');
                        btn.classList.add('text-gray-500', 'hover:text-gray-700');
                    });
                    
                    // Add active class to clicked button
                    this.classList.add('text-primary-600', 'border-b-2', 'border-primary-500');
                    this.classList.remove('text-gray-500', 'hover:text-gray-700');
                    
                    // Hide all tab contents
                    tabContents.forEach(content => {
                        content.classList.add('hidden');
                    });
                    
                    // Show corresponding tab content
                    document.getElementById(`tab-${tabId}`).classList.remove('hidden');
                    
                    // Load tab-specific content if needed
                    if (tabId === 'history') {
                        loadHistoryData();
                    } else if (tabId === 'documents') {
                        loadDocumentsData();
                    }
                });
            });
        }
        
        function initShareModal() {
            const shareButton = document.getElementById('share-button');
            const shareModal = document.getElementById('share-modal');
            const closeShareModal = document.getElementById('close-share-modal');
            const copyLinkBtn = document.getElementById('copy-link-btn');
            const shareButtons = document.querySelectorAll('.share-btn');
            
            if (shareButton && shareModal) {
                shareButton.addEventListener('click', function() {
                    shareModal.classList.remove('hidden');
                });
            }
            
            if (closeShareModal && shareModal) {
                closeShareModal.addEventListener('click', function() {
                    shareModal.classList.add('hidden');
                });
                
                // Close modal when clicking outside
                shareModal.addEventListener('click', function(e) {
                    if (e.target === shareModal) {
                        shareModal.classList.add('hidden');
                    }
                });
            }
            
            if (copyLinkBtn) {
                copyLinkBtn.addEventListener('click', function() {
                    const shareLink = document.getElementById('share-link');
                    copyToClipboard(shareLink.value);
                    showToast('Link copied', 'Share link has been copied to clipboard', 'success');
                });
            }
            
            // Share buttons
            shareButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const shareType = this.getAttribute('data-type');
                    const shareUrl = document.getElementById('share-link').value;
                    const shareTitle = `${document.title} - Product Information`;
                    
                    let shareLink = '';
                    
                    switch (shareType) {
                        case 'facebook':
                            shareLink = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`;
                            break;
                        case 'twitter':
                            shareLink = `https://twitter.com/intent/tweet?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareTitle)}`;
                            break;
                        case 'whatsapp':
                            shareLink = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareTitle + ' ' + shareUrl)}`;
                            break;
                    }
                    
                    if (shareLink) {
                        window.open(shareLink, '_blank');
                    }
                });
            });
        }
        
        function initReminders() {
            const addReminderBtn = document.getElementById('add-reminder');
            const reminderModal = document.getElementById('reminder-modal');
            const closeReminderModal = document.getElementById('close-reminder-modal');
            const cancelReminderBtn = document.getElementById('cancel-reminder');
            const reminderForm = document.getElementById('reminder-form');
            
            // Setup default due date (tomorrow)
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const reminderDateInput = document.getElementById('reminder-date');
            if (reminderDateInput) {
                reminderDateInput.valueAsDate = tomorrow;
            }
            
            if (addReminderBtn && reminderModal) {
                addReminderBtn.addEventListener('click', function() {
                    // Reset form to add mode
                    document.getElementById('reminder-id').value = '0';
                    document.getElementById('reminder-title').value = '';
                    document.getElementById('reminder-notes').value = '';
                    document.getElementById('reminder-repeat').value = 'never';
                    document.getElementById('reminder-modal-title').textContent = 'Add Maintenance Reminder';
                    
                    // Set default date to tomorrow
                    document.getElementById('reminder-date').valueAsDate = tomorrow;
                    
                    reminderModal.classList.remove('hidden');
                });
            }
            
            if (closeReminderModal && reminderModal) {
                closeReminderModal.addEventListener('click', function() {
                    reminderModal.classList.add('hidden');
                });
                
                // Close modal when clicking outside
                reminderModal.addEventListener('click', function(e) {
                    if (e.target === reminderModal) {
                        reminderModal.classList.add('hidden');
                    }
                });
            }
            
            if (cancelReminderBtn && reminderModal) {
                cancelReminderBtn.addEventListener('click', function() {
                    reminderModal.classList.add('hidden');
                });
            }
            
            if (reminderForm) {
                reminderForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    const username = '@User.Identity?.Name' || 'System'; // Get username from Razor
                    
                    const data = {
                        Id: parseInt(document.getElementById('reminder-id').value) || 0,
                        CardId: parseInt(document.getElementById('card-id').value),
                        Title: document.getElementById('reminder-title').value,
                        DueDate: document.getElementById('reminder-date').value,
                        Notes: document.getElementById('reminder-notes').value || "",
                        RepeatFrequency: document.getElementById('reminder-repeat').value,
                        CreatedBy: username // Add CreatedBy field
                    };
                    
                    console.log('Sending reminder data:', data);
                    
                    fetch('/api/Reminder', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token || '' // Handle if token is undefined
                        },
                        body: JSON.stringify(data)
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(errorData => {
                                throw new Error(errorData.error || 'Server error');
                            }).catch(() => {
                                throw new Error(`HTTP error ${response.status}`);
                            });
                        }
                        return response.json();
                    })
                    .then(result => {
                        console.log('Response:', result);
                        reminderModal.classList.add('hidden');
                        loadReminders();
                        showToast('Reminder saved', 'Your maintenance reminder has been scheduled', 'success');
                    })
                    .catch(error => {
                        console.error('Error saving reminder:', error);
                        showToast('Error', error.message || 'Network error. Please try again.', 'error');
                    });
                });
            }
            
            // Initial load of reminders
            loadReminders();
            
            // Setup event delegation for reminder actions
            document.addEventListener('click', function(e) {
                // Edit reminder
                if (e.target.closest('.reminder-edit')) {
                    const button = e.target.closest('.reminder-edit');
                    const reminderId = button.getAttribute('data-id');
                    
                    fetch(`/api/Reminder/${reminderId}`)
                        .then(response => {
                            if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                            return response.json();
                        })
                        .then(data => {
                            // Fill form with reminder data
                            document.getElementById('reminder-id').value = data.id;
                            document.getElementById('reminder-title').value = data.title;
                            document.getElementById('reminder-date').value = data.dueDate.substring(0, 10); // YYYY-MM-DD format
                            document.getElementById('reminder-notes').value = data.notes || '';
                            document.getElementById('reminder-repeat').value = data.repeatFrequency || 'never';
                            document.getElementById('reminder-modal-title').textContent = 'Edit Maintenance Reminder';
                            
                            // Show modal
                            reminderModal.classList.remove('hidden');
                        })
                        .catch(error => {
                            console.error('Error fetching reminder:', error);
                            showToast('Error', 'Could not load reminder details', 'error');
                        });
                }
                
                // Delete reminder
                if (e.target.closest('.reminder-delete')) {
                    const button = e.target.closest('.reminder-delete');
                    const reminderId = button.getAttribute('data-id');
                    
                    // Show delete confirmation
                    showDeleteConfirmation('reminder', reminderId, 'Are you sure you want to delete this reminder?');
                }
            });
        }
        
        function loadReminders() {
            const cardId = document.getElementById('card-id').value;
            const remindersList = document.getElementById('reminders-list');
            
            if (!remindersList) return;
            
            // Show loading indicator
            remindersList.innerHTML = '<div class="p-3 text-center"><i class="fas fa-spinner fa-spin mr-2"></i> Loading reminders...</div>';
            
            fetch(`/api/Reminder/card/${cardId}`)
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                    return response.json();
                })
                .then(data => {
                    // Clear loading indicator
                    remindersList.innerHTML = '';
                    
                    if (data && data.length > 0) {
                        // Add reminders to the list
                        data.forEach(reminder => {
                            const dueDate = new Date(reminder.dueDate);
                            const isPastDue = dueDate < new Date();
                            
                            const reminderEl = document.createElement('div');
                            reminderEl.className = `p-2 ${isPastDue ? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200'} rounded-lg border flex justify-between items-center`;
                            reminderEl.innerHTML = `
                                <div>
                                    <span class="text-sm font-medium ${isPastDue ? 'text-red-800' : 'text-gray-800'}">${reminder.title}</span>
                                    <div class="text-xs ${isPastDue ? 'text-red-500' : 'text-gray-500'}">Due: ${formatDate(dueDate)}</div>
                                    ${reminder.notes ? `<div class="text-xs text-gray-500 mt-1">${reminder.notes}</div>` : ''}
                                </div>
                                <div class="flex space-x-1">
                                    <button class="p-1 text-gray-400 hover:text-blue-600 reminder-edit" data-id="${reminder.id}">
                                        <i class="fas fa-pen"></i>
                                    </button>
                                    <button class="p-1 text-gray-400 hover:text-red-600 reminder-delete" data-id="${reminder.id}">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            `;
                            
                            remindersList.appendChild(reminderEl);
                        });
                    } else {
                        // No reminders message
                        const noReminders = document.createElement('div');
                        noReminders.className = 'p-3 text-center text-gray-500 text-sm';
                        noReminders.textContent = 'No reminders scheduled yet';
                        remindersList.appendChild(noReminders);
                    }
                })
                .catch(error => {
                    console.error('Error loading reminders:', error);
                    remindersList.innerHTML = '<div class="p-3 text-center text-red-500">Failed to load reminders. Please try again.</div>';
                });
        }
        
        function initDocuments() {
            const addDocumentBtn = document.getElementById('add-document-btn');
            const addFirstDocumentBtn = document.getElementById('add-first-document');
            const documentUploadSection = document.getElementById('document-upload-section');
            const cancelUploadBtn = document.getElementById('cancel-upload');
            const documentForm = document.getElementById('document-upload-form');
            const browseDocumentBtn = document.getElementById('browse-document');
            const documentFileInput = document.getElementById('document-file');
            const documentDropArea = document.getElementById('document-drop-area');
            const filesPreview = document.getElementById('files-preview');
            
            // Show upload section on click
            if (addDocumentBtn && documentUploadSection) {
                addDocumentBtn.addEventListener('click', function() {
                    documentUploadSection.classList.remove('hidden');
                });
            }
            
            if (addFirstDocumentBtn && documentUploadSection) {
                addFirstDocumentBtn.addEventListener('click', function() {
                    documentUploadSection.classList.remove('hidden');
                });
            }
            
            // Hide upload section on cancel
            if (cancelUploadBtn && documentUploadSection) {
                cancelUploadBtn.addEventListener('click', function() {
                    documentUploadSection.classList.add('hidden');
                    documentForm.reset();
                    filesPreview.innerHTML = '';
                });
            }
            
            // Trigger file input on browse click
            if (browseDocumentBtn && documentFileInput) {
                browseDocumentBtn.addEventListener('click', function() {
                    documentFileInput.click();
                });
            }
            
            // Handle multiple file selection
            if (documentFileInput && filesPreview) {
                documentFileInput.addEventListener('change', function() {
                    handleFilesSelection(this.files);
                });
            }
            
            // Handle drag and drop
            if (documentDropArea) {
                documentDropArea.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    this.classList.add('border-primary-500');
                });
                
                documentDropArea.addEventListener('dragleave', function(e) {
                    e.preventDefault();
                    this.classList.remove('border-primary-500');
                });
                
                documentDropArea.addEventListener('drop', function(e) {
                    e.preventDefault();
                    this.classList.remove('border-primary-500');
                    
                    if (e.dataTransfer.files.length > 0) {
                        documentFileInput.files = e.dataTransfer.files;
                        handleFilesSelection(e.dataTransfer.files);
                    }
                });
            }
            
            // Handle form submission
            if (documentForm) {
                documentForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Validate form
    if (!this.checkValidity()) {
        this.reportValidity();
        return;
    }
    
    // Check if files are selected
    if (!documentFileInput.files || documentFileInput.files.length === 0) {
        showToast('Error', 'Please select at least one file to upload', 'error');
        return;
    }
    
    // Show loading spinner
    document.getElementById('upload-text').textContent = 'Uploading...';
    document.getElementById('upload-spinner').classList.add('hidden');
    
    // Create FormData explicitly to ensure fields are properly included
    const formData = new FormData();
    
    // Add each form field manually
    formData.append('cardId', document.querySelector('input[name="cardId"]').value);
    formData.append('title', document.getElementById('document-title').value);
    formData.append('documentType', document.getElementById('document-type').value);
    
    // Critical fix: Always append description with explicit empty string default
    // This ensures description is never undefined or null
    const description = document.getElementById('document-description').value || '';
    formData.append('description', description);
    
    // Add all files
    const files = documentFileInput.files;
    for (let i = 0; i < files.length; i++) {
        formData.append('documentFiles', files[i]);
    }
    
    fetch('/api/Document/UploadMultiple', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(errorData => {
                throw new Error(errorData.error || 'Server error');
            }).catch(() => {
                throw new Error(`HTTP error ${response.status}`);
            });
        }
        return response.json();
    })
    .then(data => {
        // Hide loading spinner
        document.getElementById('upload-text').textContent = 'Upload Documents';
        document.getElementById('upload-spinner').classList.add('hidden');
        
        if (data.success) {
            // Reset form
            documentForm.reset();
            filesPreview.innerHTML = '';
            
            // Hide upload section
            documentUploadSection.classList.add('hidden');
            
            // Refresh documents
            loadDocumentsData();
            
            // Show success toast
            showToast('Documents uploaded', `Successfully uploaded ${data.count} documents`, 'success');
        } else {
            showToast('Error', data.error || 'Failed to upload documents', 'error');
        }
    })
    .catch(error => {
        console.error('Error uploading documents:', error);
        
        // Hide loading spinner
        document.getElementById('upload-text').textContent = 'Upload Documents';
        document.getElementById('upload-spinner').classList.remove('hidden');
        
        showToast('Error', 'Failed to upload documents. Please try again.', 'error');
    });
});
            }
            
            // Load documents on init
            loadDocumentsData();
            
            // Event delegation for document actions
            document.addEventListener('click', function(e) {
                // Delete document
                if (e.target.closest('.document-delete')) {
                    const button = e.target.closest('.document-delete');
                    const documentId = button.getAttribute('data-id');
                    
                    // Show delete confirmation
                    showDeleteConfirmation('document', documentId, 'Are you sure you want to delete this document?');
                }
                
                // Remove file from preview
                if (e.target.closest('.remove-file')) {
                    const button = e.target.closest('.remove-file');
                    const fileIndex = button.getAttribute('data-index');
                    removeFileFromSelection(fileIndex);
                }
            });
        }
        
 function handleFilesSelection(files) {
    const filesPreview = document.getElementById('files-preview');
    const documentFileInput = document.getElementById('document-file');
    const documentTitleInput = document.getElementById('document-title');
    
    if (!files || files.length === 0) return;
    
    // Clear existing previews
    filesPreview.innerHTML = '';
    
    // Auto-fill the title field with the first file name if field is empty
    if (documentTitleInput && documentTitleInput.value.trim() === '' && files.length > 0) {
        // Extract filename without extension for the title
        const fileName = files[0].name;
        const fileNameWithoutExt = fileName.split('.').slice(0, -1).join('.');
        documentTitleInput.value = fileNameWithoutExt || fileName;
    }
    
    // Create a preview for each file
    Array.from(files).forEach((file, index) => {
        const previewEl = document.createElement('div');
        previewEl.className = 'flex items-center justify-between bg-gray-50 p-2 rounded-md';
        previewEl.setAttribute('data-index', index);
        
        // Set appropriate icon based on file type
        let iconClass = 'fa-file text-gray-500';
        
        if (file.type.startsWith('image/')) {
            iconClass = 'fa-file-image text-blue-500';
        } else if (file.type.includes('pdf')) {
            iconClass = 'fa-file-pdf text-red-500';
        } else if (file.type.includes('excel') || file.type.includes('spreadsheet') || file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
            iconClass = 'fa-file-excel text-green-500';
        } else if (file.type.includes('word') || file.type.includes('document') || file.name.endsWith('.docx') || file.name.endsWith('.doc')) {
            iconClass = 'fa-file-word text-blue-500';
        }
        
        previewEl.innerHTML = `
            <div class="flex items-center">
                <i class="fas ${iconClass} mr-2"></i>
                <span class="text-sm truncate">${file.name}</span>
                <span class="text-xs text-gray-500 ml-2">${formatFileSize(file.size)}</span>
            </div>
            <button type="button" class="text-red-500 hover:text-red-700 remove-file" data-index="${index}">
                <i class="fas fa-times"></i>
            </button>
        `;
        
        filesPreview.appendChild(previewEl);
    });
    
    // Update UI to show the number of selected files
    const fileCount = files.length;
    const browseBtn = document.getElementById('browse-document');
    if (browseBtn) {
        browseBtn.textContent = fileCount === 1 ? '1 File Selected' : `${fileCount} Files Selected`;
    }
}
        
        function removeFileFromSelection(index) {
            const documentFileInput = document.getElementById('document-file');
            const filesPreview = document.getElementById('files-preview');
            
            if (!documentFileInput.files || documentFileInput.files.length === 0) return;
            
            // Convert FileList to array and remove the file at the specified index
            const filesArray = Array.from(documentFileInput.files);
            filesArray.splice(index, 1);
            
            // Create a new FileList-like object
            const dataTransfer = new DataTransfer();
            filesArray.forEach(file => {
                dataTransfer.items.add(file);
            });
            
            // Update the file input with the new FileList
            documentFileInput.files = dataTransfer.files;
            
            // Update preview
            handleFilesSelection(documentFileInput.files);
            
            // If no files remaining, reset the browse button text
            if (documentFileInput.files.length === 0) {
                const browseBtn = document.getElementById('browse-document');
                if (browseBtn) {
                    browseBtn.textContent = 'Browse Files';
                }
            }
        }
        
        function loadDocumentsData() {
            const cardId = document.getElementById('card-id').value;
            const documentsLoading = document.getElementById('documents-loading');
            const documentItems = document.getElementById('document-items');
            const noDocuments = document.getElementById('no-documents');
            
            if (!documentsLoading || !documentItems || !noDocuments) return;
            
            // Show loading
            documentsLoading.classList.remove('hidden');
            documentItems.classList.add('hidden');
            noDocuments.classList.add('hidden');
            
            fetch(`/api/Document/card/${cardId}`)
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                    return response.json();
                })
                .then(data => {
                    // Hide loading
                    documentsLoading.classList.add('hidden');
                    
                    if (data && data.length > 0) {
                        // Show document items
                        documentItems.classList.remove('hidden');
                        documentItems.innerHTML = '';
                        
                        // Add documents to the list
                        data.forEach(doc => {
                            // Format file size
                            const fileSize = formatFileSize(doc.fileSize);
                            
                            // Format date
                            const uploadDate = new Date(doc.uploadedAt);
                            const daysAgo = Math.floor((new Date() - uploadDate) / (1000 * 60 * 60 * 24));
                            const dateText = daysAgo === 0 ? 'today' : daysAgo === 1 ? 'yesterday' : `${daysAgo} days ago`;
                            
                            // File icon
                            let fileIcon = 'fa-file';
                            let iconColor = 'text-gray-500';
                            
                            if (doc.fileType) {
                                if (doc.fileType.includes('pdf')) {
                                    fileIcon = 'fa-file-pdf';
                                    iconColor = 'text-red-600';
                                } else if (doc.fileType.includes('image')) {
                                    fileIcon = 'fa-file-image';
                                    iconColor = 'text-blue-600';
                                } else if (doc.fileType.includes('excel') || doc.fileType.includes('spreadsheet')) {
                                    fileIcon = 'fa-file-excel';
                                    iconColor = 'text-green-600';
                                } else if (doc.fileType.includes('word') || doc.fileType.includes('document')) {
                                    fileIcon = 'fa-file-word';
                                    iconColor = 'text-blue-600';
                                }
                            } else if (doc.fileName) {
                                // Fallback to extension
                                const ext = doc.fileName.split('.').pop().toLowerCase();
                                if (ext === 'pdf') {
                                    fileIcon = 'fa-file-pdf';
                                    iconColor = 'text-red-600';
                                } else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg'].includes(ext)) {
                                    fileIcon = 'fa-file-image';
                                    iconColor = 'text-blue-600';
                                } else if (['xls', 'xlsx', 'csv'].includes(ext)) {
                                    fileIcon = 'fa-file-excel';
                                    iconColor = 'text-green-600';
                                } else if (['doc', 'docx', 'rtf'].includes(ext)) {
                                    fileIcon = 'fa-file-word';
                                    iconColor = 'text-blue-600';
                                }
                            }
                            
                            const docEl = document.createElement('div');
                            docEl.className = 'document-item p-4 border border-gray-100 rounded-lg hover:bg-gray-50 transition-colors flex items-center justify-between';
                            docEl.innerHTML = `
                                <div class="flex items-center">
                                    <div class="flex-shrink-0">
                                        <div class="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center ${iconColor}">
                                            <i class="fas ${fileIcon}"></i>
                                        </div>
                                    </div>
                                    <div class="ml-4">
                                        <div class="font-medium text-gray-800">${doc.title}</div>
                                        <div class="text-xs text-gray-500">${doc.documentType} • ${fileSize} • Uploaded ${dateText}</div>
                                        ${doc.description ? `<div class="text-xs text-gray-500 mt-1">${doc.description}</div>` : ''}
                                    </div>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <button type="button" class="p-2 text-gray-400 hover:text-primary-600 document-preview-btn" 
                                            data-id="${doc.id}" data-title="${doc.title}" data-path="${doc.filePath}">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <a href="/api/Document/download/${doc.id}" class="p-2 text-gray-400 hover:text-primary-600" 
                                    download="${doc.fileName}">
                                        <i class="fas fa-download"></i>
                                    </a>
                                    <button type="button" class="p-2 text-gray-400 hover:text-red-600 document-delete" data-id="${doc.id}">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            `;
                            
                            documentItems.appendChild(docEl);
                        });
                    } else {
                        // Show no documents message
                        noDocuments.classList.remove('hidden');
                    }
                })
                .catch(error => {
                    console.error('Error loading documents:', error);
                    documentsLoading.classList.add('hidden');
                    documentItems.innerHTML = '<div class="p-3 text-center text-red-500">Failed to load documents. Please try again.</div>';
                    documentItems.classList.remove('hidden');
                });
        }
        
        function initHistory() {
            // History is loaded when tab is clicked
        }

        function initDocumentPreview() {
    const previewModal = document.getElementById('document-preview-modal');
    const closePreviewBtn = document.getElementById('close-doc-preview-modal');
    const closePreviewBtn2 = document.getElementById('close-preview-btn');
    const downloadBtn = document.getElementById('download-document-btn');
    const previewTitle = document.getElementById('document-preview-title');
    const previewContent = document.getElementById('document-preview-content');
    
    // Event delegation for document preview buttons
    document.addEventListener('click', function(e) {
        const previewBtn = e.target.closest('.document-preview-btn');
        
        if (previewBtn) {
            const docId = previewBtn.getAttribute('data-id');
            const docTitle = previewBtn.getAttribute('data-title');
            const docPath = previewBtn.getAttribute('data-path');
            
            // Set modal title
            previewTitle.textContent = docTitle;
            
            // Show loading state
            previewContent.innerHTML = `
                <div class="flex justify-center items-center h-full">
                    <i class="fas fa-spinner fa-spin text-2xl text-primary-500"></i>
                </div>
            `;
            
            // Set download button link
            downloadBtn.setAttribute('data-id', docId);
            
            // Show modal
            previewModal.classList.remove('hidden');
            
            // Attempt to display the file (this is simplified - would need proper implementation based on file type)
            if (docPath) {
                if (docPath.toLowerCase().endsWith('.pdf')) {
                    previewContent.innerHTML = `<iframe src="${docPath}" width="100%" height="100%" frameborder="0"></iframe>`;
                } else if (docPath.toLowerCase().match(/\.(jpe?g|png|gif|bmp|svg)$/)) {
                    previewContent.innerHTML = `<img src="${docPath}" alt="${docTitle}" class="max-w-full max-h-full mx-auto">`;
                } else {
                    previewContent.innerHTML = `
                        <div class="flex flex-col items-center justify-center h-full">
                            <div class="text-6xl text-gray-400 mb-4">
                                <i class="fas fa-file-alt"></i>
                            </div>
                            <p class="text-lg font-medium text-gray-700">Preview not available</p>
                            <p class="text-gray-500 mb-6">This document type cannot be previewed directly.</p>
                            <a href="/api/Document/download/${docId}" class="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-700" download>
                                <i class="fas fa-download mr-2"></i> Download to view
                            </a>
                        </div>
                    `;
                }
            } else {
                previewContent.innerHTML = `
                    <div class="flex flex-col items-center justify-center h-full">
                        <div class="text-6xl text-red-400 mb-4">
                            <i class="fas fa-exclamation-circle"></i>
                        </div>
                        <p class="text-lg font-medium text-gray-700">File not found</p>
                        <p class="text-gray-500">The document could not be loaded.</p>
                    </div>
                `;
            }
        }
    });
    
    // Close modal events
    if (closePreviewBtn) {
        closePreviewBtn.addEventListener('click', () => {
            previewModal.classList.add('hidden');
        });
    }
    
    if (closePreviewBtn2) {
        closePreviewBtn2.addEventListener('click', () => {
            previewModal.classList.add('hidden');
        });
    }
    
    // Close modal when clicking outside
    if (previewModal) {
        previewModal.addEventListener('click', function(e) {
            if (e.target === previewModal) {
                previewModal.classList.add('hidden');
            }
        });
    }
    
    // Download button action
    if (downloadBtn) {
        downloadBtn.addEventListener('click', function() {
            const docId = this.getAttribute('data-id');
            if (docId) {
                window.open(`/api/Document/download/${docId}`, '_blank');
            }
        });
    }
}
        
        function loadHistoryData() {
            const cardId = document.getElementById('card-id').value;
            const historyLoading = document.getElementById('history-loading');
            const historyItems = document.getElementById('history-items');
            const noHistory = document.getElementById('no-history');
            
            if (!historyLoading || !historyItems || !noHistory) return;
            
            // Show loading
            historyLoading.classList.remove('hidden');
            historyItems.classList.add('hidden');
            noHistory.classList.add('hidden');
            
            fetch(`/Card/GetCardHistory/${cardId}`)
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
                    return response.json();
                })
                .then(data => {
                    // Hide loading
                    historyLoading.classList.add('hidden');
                    
                    if (data && data.length > 0) {
                        // Show history items
                        historyItems.classList.remove('hidden');
                        historyItems.innerHTML = '';
                        
                        // Add history items to the list
                        data.forEach(item => {
                            const changedAt = new Date(item.changedAt);
                            
                            // Determine icon and color
                            let iconClass = 'fa-edit';
                            let bgClass = 'bg-blue-100';
                            let iconColor = 'text-blue-600';
                            
                            if (item.fieldName === 'Creation') {
                                iconClass = 'fa-plus';
                                bgClass = 'bg-green-100';
                                iconColor = 'text-green-600';
                            } else if (item.fieldName.toLowerCase().includes('delet')) {
                                iconClass = 'fa-trash';
                                bgClass = 'bg-red-100';
                                iconColor = 'text-red-600';
                            }
                            
                            const historyEl = document.createElement('div');
                            historyEl.className = 'p-4 border border-gray-100 rounded-lg';
                            historyEl.innerHTML = `
                                <div class="flex">
                                    <div class="flex-shrink-0">
                                        <div class="w-10 h-10 ${bgClass} rounded-full flex items-center justify-center ${iconColor}">
                                            <i class="fas ${iconClass}"></i>
                                        </div>
                                    </div>
                                    <div class="ml-4 flex-1">
                                        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center">
                                            <div class="font-medium text-gray-800">
                                                ${item.fieldName === 'Creation' ? 'Product Created' : `${item.fieldName} Updated`}
                                            </div>
                                            <div class="text-sm text-gray-500 mt-1 sm:mt-0">
                                                ${formatDateTime(changedAt)}
                                            </div>
                                        </div>
                                        ${item.fieldName !== 'Creation' ? `
                                        <div class="text-sm mt-2">
                                            <span class="text-gray-700">From:</span> 
                                            <span class="text-red-500">${item.oldValue || '(empty)'}</span>
                                        </div>
                                        <div class="text-sm mt-1">
                                            <span class="text-gray-700">To:</span> 
                                            <span class="text-green-500">${item.newValue || '(empty)'}</span>
                                        </div>` : `
                                        <div class="text-sm text-gray-600 mt-2">${item.newValue}</div>`}
                                        <div class="text-xs text-gray-500 mt-2">by ${item.changedBy}</div>
                                    </div>
                                    </div>
                            `;
                            
                            historyItems.appendChild(historyEl);
                        });
                        
                        // Show load more button if needed
                        if (data.length >= 10) {
                            document.getElementById('load-more-history').classList.remove('hidden');
                        }
                    } else {
                        // Show no history message
                        noHistory.classList.remove('hidden');
                    }
                })
                .catch(error => {
                    console.error('Error loading history:', error);
                    historyLoading.classList.add('hidden');
                    historyItems.innerHTML = '<div class="p-3 text-center text-red-500">Failed to load history. Please try again.</div>';
                    historyItems.classList.remove('hidden');
                });
        }
        
        function initCopyToClipboard() {
            const copyTextButtons = document.querySelectorAll('.copy-text-btn');
            const copySectionButtons = document.querySelectorAll('.copy-section');
            const copyQrBtn = document.getElementById('copy-qr-btn');
            
            copyTextButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const text = this.getAttribute('data-text');
                    copyToClipboard(text);
                    showToast('Copied to clipboard', text, 'success');
                });
            });
            
            copySectionButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const sectionId = this.getAttribute('data-section');
                    const section = document.getElementById(sectionId);
                    
                    if (section) {
                        const sectionText = section.innerText;
                        copyToClipboard(sectionText);
                        showToast('Section copied', 'Information has been copied to clipboard', 'success');
                    }
                });
            });
            
            if (copyQrBtn) {
                copyQrBtn.addEventListener('click', function() {
                    const qrCodeImage = document.querySelector('.card-back img').src;
                    
                    try {
                        // For modern browsers
                        if (navigator.clipboard && navigator.clipboard.write) {
                            fetch(qrCodeImage)
                                .then(res => res.blob())
                                .then(blob => {
                                    const item = new ClipboardItem({ [blob.type]: blob });
                                    return navigator.clipboard.write([item]);
                                })
                                .then(() => {
                                    showToast('QR code copied', 'QR code image has been copied to clipboard', 'success');
                                })
                                .catch(err => {
                                    console.error('Failed to copy QR code:', err);
                                    // Fallback to copying URL
                                    copyToClipboard(qrCodeImage);
                                    showToast('QR Code URL copied', 'Could not copy image directly', 'info');
                                });
                        } else {
                            // Fallback for unsupported browsers
                            copyToClipboard(qrCodeImage);
                            showToast('QR Code URL copied', 'Image copying not supported in your browser', 'info');
                        }
                    } catch (err) {
                        console.error('Error copying QR code:', err);
                        copyToClipboard(qrCodeImage);
                        showToast('QR Code URL copied', 'Image copying failed', 'info');
                    }
                });
            }
        }
        
        function copyToClipboard(text) {
            // Create temp element for copying
            const tempElement = document.createElement('textarea');
            tempElement.value = text;
            document.body.appendChild(tempElement);
            tempElement.select();
            document.execCommand('copy');
            document.body.removeChild(tempElement);
            
            // Modern clipboard API alternative
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text).catch(err => {
                    console.error('Clipboard API error:', err);
                });
            }
        }
        
        function initToastNotifications() {
            const toast = document.getElementById('toast-notification');
            const closeToast = document.getElementById('close-toast');
            
            if (closeToast && toast) {
                closeToast.addEventListener('click', function() {
                    toast.classList.add('translate-y-20', 'opacity-0');
                    setTimeout(() => {
                        toast.classList.add('hidden');
                    }, 300);
                });
            }
        }
        
        function showToast(message, description = '', type = 'success') {
            const toast = document.getElementById('toast-notification');
            const toastMessage = document.getElementById('toast-message');
            const toastDescription = document.getElementById('toast-description');
            const toastIcon = document.getElementById('toast-icon');
            const toastIconSymbol = document.getElementById('toast-icon-symbol');
            
            if (!toast || !toastMessage || !toastDescription || !toastIcon || !toastIconSymbol) return;
            
            toastMessage.textContent = message;
            toastDescription.textContent = description;
            
            // Set icon and colors based on type
            if (type === 'success') {
                toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-green-100';
                toastIconSymbol.className = 'fas fa-check text-green-500';
            } else if (type === 'error') {
                toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-red-100';
                toastIconSymbol.className = 'fas fa-times text-red-500';
            } else if (type === 'warning') {
                toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-yellow-100';
                toastIconSymbol.className = 'fas fa-exclamation text-yellow-500';
            } else if (type === 'info') {
                toastIcon.className = 'flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center bg-blue-100';
                toastIconSymbol.className = 'fas fa-info text-blue-500';
            }
            
            // Show toast
            toast.classList.remove('hidden', 'translate-y-20', 'opacity-0');
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                toast.classList.add('translate-y-20', 'opacity-0');
                setTimeout(() => {
                    toast.classList.add('hidden');
                }, 300);
            }, 5000);
        }
        
        function showDeleteConfirmation(type, id, message) {
            const deleteModal = document.getElementById('delete-modal');
            const deleteMessage = document.getElementById('delete-message');
            const cancelDeleteBtn = document.getElementById('cancel-delete');
            const confirmDeleteBtn = document.getElementById('confirm-delete');
            
            if (!deleteModal || !deleteMessage || !cancelDeleteBtn || !confirmDeleteBtn) return;
            
            // Set message
            deleteMessage.textContent = message;
            
            // Set delete action and show modal
            deleteModal.classList.remove('hidden');
            
            // Configure confirm button
            const handleConfirm = function() {
                deleteModal.classList.add('hidden');
                
                if (type === 'reminder') {
                    deleteReminder(id);
                } else if (type === 'document') {
                    deleteDocument(id);
                }
                
                // Remove event listeners
                confirmDeleteBtn.removeEventListener('click', handleConfirm);
                cancelDeleteBtn.removeEventListener('click', handleCancel);
                deleteModal.removeEventListener('click', handleOutsideClick);
            };
            
            // Configure cancel button
            const handleCancel = function() {
                deleteModal.classList.add('hidden');
                
                // Remove event listeners
                confirmDeleteBtn.removeEventListener('click', handleConfirm);
                cancelDeleteBtn.removeEventListener('click', handleCancel);
                deleteModal.removeEventListener('click', handleOutsideClick);
            };
            
            // Handle outside click
            const handleOutsideClick = function(e) {
                if (e.target === deleteModal) {
                    handleCancel();
                }
            };
            
            // Add event listeners
            confirmDeleteBtn.addEventListener('click', handleConfirm);
            cancelDeleteBtn.addEventListener('click', handleCancel);
            deleteModal.addEventListener('click', handleOutsideClick);
        }
        
        function deleteReminder(id) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            
            fetch(`/api/Reminder/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token || ''
                }
            })
            .then(response => {
                if (!response.ok) {
                    if (response.status !== 204) { // No Content success status
                        return response.json().then(errorData => {
                            throw new Error(errorData.error || 'Server error');
                        }).catch(() => {
                            throw new Error(`HTTP error ${response.status}`);
                        });
                    }
                }
                return response.status === 204 ? {} : response.json();
            })
            .then(() => {
                // Refresh reminders list
                loadReminders();
                showToast('Reminder deleted', 'The reminder has been removed', 'success');
            })
            .catch(error => {
                console.error('Error deleting reminder:', error);
                showToast('Error', 'Failed to delete reminder. Please try again.', 'error');
            });
        }
        
        function deleteDocument(id) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            
            fetch(`/api/Document/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token || ''
                }
            })
            .then(response => {
                if (!response.ok && response.status !== 204) {
                    return response.json().then(errorData => {
                        throw new Error(errorData.error || 'Server error');
                    }).catch(() => {
                        throw new Error(`HTTP error ${response.status}`);
                    });
                }
                return response.status === 204 ? {} : response.json();
            })
            .then(() => {
                // Refresh documents list
                loadDocumentsData();
                showToast('Document deleted', 'The document has been removed', 'success');
            })
            .catch(error => {
                console.error('Error deleting document:', error);
                showToast('Error', 'Failed to delete document. Please try again.', 'error');
            });
        }
        
        // Helper functions
        function formatDate(date) {
            if (!(date instanceof Date) || isNaN(date)) {
                return 'Invalid date';
            }
            
            const options = { year: 'numeric', month: 'short', day: 'numeric' };
            return date.toLocaleDateString('en-US', options);
        }
        
        function formatDateTime(date) {
            if (!(date instanceof Date) || isNaN(date)) {
                return 'Invalid date';
            }
            
            const options = { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };
            return date.toLocaleDateString('en-US', options);
        }
        
        function formatFileSize(bytes) {
            if (!bytes || bytes === 0) return '0 Bytes';
            
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(1024));
            
            return parseFloat((bytes / Math.pow(1024, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Initialize scan settings functionality
// Initialize scan settings functionality
function initScanSettings() {
    const saveScanSettingsBtn = document.getElementById('save-scan-settings');
    const refreshPreviewBtn = document.getElementById('refresh-preview');
    const fullscreenPreviewBtn = document.getElementById('fullscreen-preview');
    const closeFullscreenBtn = document.getElementById('close-fullscreen');
    const previewContainer = document.getElementById('preview-container');
    const privateModeToggle = document.getElementById('private-mode-toggle');
    const loadPreviewBtn = document.getElementById('load-preview-btn');
    
    // Load current settings on init
    loadScanSettings();
    
    // Handle load preview button click
    if (loadPreviewBtn) {
        loadPreviewBtn.addEventListener('click', function() {
            loadScanPreview();
        });
    }
    
    if (saveScanSettingsBtn) {
        saveScanSettingsBtn.addEventListener('click', function() {
            saveScanSettings();
        });
    }
    
    if (refreshPreviewBtn) {
        refreshPreviewBtn.addEventListener('click', function() {
            loadScanPreview();
        });
    }
    
    // Handle fullscreen preview
    if (fullscreenPreviewBtn && previewContainer) {
        fullscreenPreviewBtn.addEventListener('click', function() {
            previewContainer.classList.add('fixed', 'inset-0', 'z-50', 'p-4', 'm-0', 'rounded-none');
            document.getElementById('preview-controls').classList.remove('hidden');
            document.body.classList.add('overflow-hidden');
            loadScanPreview(); // Reload preview in fullscreen
        });
    }
    
    // Handle closing fullscreen preview
    if (closeFullscreenBtn && previewContainer) {
        closeFullscreenBtn.addEventListener('click', function() {
            previewContainer.classList.remove('fixed', 'inset-0', 'z-50', 'p-4', 'm-0', 'rounded-none');
            document.getElementById('preview-controls').classList.add('hidden');
            document.body.classList.remove('overflow-hidden');
        });
    }
    
    // Toggle Private Mode visual feedback
    if (privateModeToggle) {
        privateModeToggle.addEventListener('change', function() {
            updatePrivateModeUI(this.checked);
        });
    }
}

// New function to update UI based on private mode state
function updatePrivateModeUI(isPrivate) {
    const accessContainer = document.getElementById('access-control-container');
    const accessIcon = document.getElementById('access-control-icon');
    const toggleLabel = document.getElementById('toggle-label');
    const modeLabel = document.getElementById('access-mode-label');
    const modeDescription = document.getElementById('access-mode-description');
    const mobileDescription = document.getElementById('mobile-access-description');
    
    if (isPrivate) {
        // Private mode UI
        accessContainer.classList.add('bg-gradient-to-r', 'from-blue-50', 'to-blue-100', 'border-blue-200');
        accessContainer.classList.remove('border-green-200', 'bg-gradient-to-r', 'from-green-50', 'to-primary-50');
        
        accessIcon.classList.remove('fa-lock-open', 'text-green-500');
        accessIcon.classList.add('fa-lock', 'text-blue-600');
        
        toggleLabel.textContent = 'Private';
        modeLabel.textContent = 'Private Mode';
        modeDescription.textContent = 'Login required to view details';
        mobileDescription.textContent = 'Login required to view details';
    } else {
        // Public mode UI
        accessContainer.classList.remove('bg-gradient-to-r', 'from-blue-50', 'to-blue-100', 'border-blue-200');
        accessContainer.classList.add('border-green-200', 'bg-gradient-to-r', 'from-green-50', 'to-primary-50');
        
        accessIcon.classList.add('fa-lock-open', 'text-green-500');
        accessIcon.classList.remove('fa-lock', 'text-blue-600');
        
        toggleLabel.textContent = 'Public';
        modeLabel.textContent = 'Public Mode';
        modeDescription.textContent = 'Anyone can view without login';
        mobileDescription.textContent = 'Anyone can view without login';
    }
}

function loadScanSettings() {
    const cardId = document.getElementById('card-id').value;
    
    // Get settings from localStorage or use default
    const savedSettings = localStorage.getItem(`scan_settings_${cardId}`);
    
    if (savedSettings) {
        const settings = JSON.parse(savedSettings);
        
        // Apply the saved settings to field checkboxes
        document.querySelectorAll('input[name="scan_fields"]').forEach(checkbox => {
            if (!checkbox.disabled) {
                checkbox.checked = settings.fields.includes(checkbox.value);
            }
        });
        
        // Apply UI element visibility settings
        document.querySelectorAll('input[name="scan_ui_elements"]').forEach(checkbox => {
            checkbox.checked = settings.uiElements.includes(checkbox.value);
        });
        
        // Apply private mode setting
        const privateModeToggle = document.getElementById('private-mode-toggle');
        if (privateModeToggle) {
            privateModeToggle.checked = settings.privateMode || false;
            
            // Update UI based on private mode state
            updatePrivateModeUI(privateModeToggle.checked);
        }
    } else {
        // Default to public mode UI if no settings exist
        updatePrivateModeUI(false);
    }
}

function saveScanSettings() {
    // Get selected values
    const selectedFields = [];
    document.querySelectorAll('input[name="scan_fields"]:checked').forEach(checkbox => {
        selectedFields.push(checkbox.value);
    });
    
    const selectedUIElements = [];
    document.querySelectorAll('input[name="scan_ui_elements"]:checked').forEach(checkbox => {
        selectedUIElements.push(checkbox.value);
    });
    
    const privateMode = document.getElementById('private-mode-toggle').checked;
    const cardId = parseInt(document.getElementById('card-id').value);
    
    // Create payload explicitly matching what server expects
    const payload = {
        cardId: cardId,
        fieldsJson: JSON.stringify(selectedFields),
        uiElementsJson: JSON.stringify(selectedUIElements),
        privateMode: privateMode
    };
    
    console.log('Sending payload:', payload);
    
    // Get CSRF token
    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
    
    // Send request
    fetch('/api/ScanSettings', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': token || ''
        },
        body: JSON.stringify(payload)
    })
    .then(response => {
        console.log('Response status:', response.status);
        if (!response.ok) {
            return response.text().then(text => {
                console.error('Error response:', text);
                throw new Error(`HTTP error ${response.status}: ${text}`);
            });
        }
        return response.json();
    })
    .then(data => {
        console.log('Success:', data);
        showToast('Settings saved', 'Scan settings saved successfully', 'success');
        
        // Save to localStorage as backup
        localStorage.setItem(`scan_settings_${cardId}`, JSON.stringify({
            fields: selectedFields,
            uiElements: selectedUIElements,
            privateMode: privateMode
        }));
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error', `Failed to save settings: ${error.message}`, 'error');
        
        // Save to localStorage as fallback
        localStorage.setItem(`scan_settings_${cardId}`, JSON.stringify({
            fields: selectedFields,
            uiElements: selectedUIElements,
            privateMode: privateMode
        }));
    });
}

function debugLogSettings() {
    const cardId = document.getElementById('card-id').value;
    const selectedFields = [];
    document.querySelectorAll('input[name="scan_fields"]:checked').forEach(checkbox => {
        selectedFields.push(checkbox.value);
    });
    
    const uiElements = [];
    document.querySelectorAll('input[name="scan_ui_elements"]:checked').forEach(checkbox => {
        uiElements.push(checkbox.value);
    });
    
    const privateMode = document.getElementById('private-mode-toggle')?.checked || false;
    
    const settings = {
        cardId: parseInt(cardId),
        fieldsJson: JSON.stringify(selectedFields),
        uiElementsJson: JSON.stringify(uiElements),
        privateMode: privateMode
    };
    
    console.log('Debug - Settings object:', settings);
    console.log('Debug - JSON string:', JSON.stringify(settings));
}

// Add debug button
const saveScanSettingsBtn = document.getElementById('save-scan-settings');
if (saveScanSettingsBtn) {
    saveScanSettingsBtn.addEventListener('click', function() {
        debugLogSettings();
        saveScanSettings();
    });
}

function loadScanSettings() {
    const cardId = document.getElementById('card-id').value;
    
    // Try to load settings from database first
    fetch(`/api/ScanSettings/card/${cardId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Settings not found in database');
            }
            return response.json();
        })
        .then(dbSettings => {
            // Parse JSON arrays from the database
            const fields = JSON.parse(dbSettings.fieldsJson || '[]');
            const uiElements = JSON.parse(dbSettings.uiElementsJson || '[]');
            const privateMode = dbSettings.privateMode || false;
            
            // Apply the settings to field checkboxes
            document.querySelectorAll('input[name="scan_fields"]').forEach(checkbox => {
                if (!checkbox.disabled) {
                    checkbox.checked = fields.includes(checkbox.value);
                }
            });
            
            // Apply UI element visibility settings
            document.querySelectorAll('input[name="scan_ui_elements"]').forEach(checkbox => {
                checkbox.checked = uiElements.includes(checkbox.value);
            });
            
            // Apply private mode setting
            const privateModeToggle = document.getElementById('private-mode-toggle');
            if (privateModeToggle) {
                privateModeToggle.checked = privateMode;
                updatePrivateModeUI(privateModeToggle.checked);
            }
            
            // Update localStorage as a cache
            localStorage.setItem(`scan_settings_${cardId}`, JSON.stringify({
                fields: fields,
                uiElements: uiElements,
                privateMode: privateMode
            }));
        })
        .catch(error => {
            console.log('Error loading settings from database, falling back to localStorage:', error);
            
            // Fall back to localStorage
            const savedSettings = localStorage.getItem(`scan_settings_${cardId}`);
            
            if (savedSettings) {
                const settings = JSON.parse(savedSettings);
                
                // Apply settings to checkboxes
                document.querySelectorAll('input[name="scan_fields"]').forEach(checkbox => {
                    if (!checkbox.disabled) {
                        checkbox.checked = settings.fields.includes(checkbox.value);
                    }
                });
                
                document.querySelectorAll('input[name="scan_ui_elements"]').forEach(checkbox => {
                    checkbox.checked = settings.uiElements.includes(checkbox.value);
                });
                
                const privateModeToggle = document.getElementById('private-mode-toggle');
                if (privateModeToggle) {
                    privateModeToggle.checked = settings.privateMode || false;
                    updatePrivateModeUI(privateModeToggle.checked);
                }
            } else {
                // Default to public mode if no settings exist
                updatePrivateModeUI(false);
            }
        });
}

function initFullscreenPreview() {
    const fullscreenBtn = document.getElementById('fullscreen-preview');
    const closeBtn = document.getElementById('close-fullscreen');
    const container = document.getElementById('preview-container');
    const controls = document.getElementById('preview-controls');
    
    fullscreenBtn?.addEventListener('click', () => {
        container.classList.add('fixed', 'inset-0', 'z-50', 'bg-white');
        controls.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
        
        // Reload with fullscreen dimensions
        const scanPreview = document.getElementById('scan-preview');
        scanPreview.classList.remove('h-[800px]');
        scanPreview.classList.add('h-screen');
        loadScanPreview();
    });
    
    closeBtn?.addEventListener('click', () => {
        container.classList.remove('fixed', 'inset-0', 'z-50', 'bg-white');
        controls.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
        
        // Reset dimensions
        const scanPreview = document.getElementById('scan-preview');
        scanPreview.classList.remove('h-screen');
        scanPreview.classList.add('h-[800px]');
        loadScanPreview();
    });
}

function loadScanPreview() {
    const scanPreview = document.getElementById('scan-preview');
    if (!scanPreview) return;
    
    scanPreview.innerHTML = '<div class="flex justify-center items-center h-full"><i class="fas fa-spinner fa-spin text-2xl text-primary-500"></i></div>';
    
    // Get current settings
    const cardId = document.getElementById('card-id').value;
    const selectedFields = [];
    document.querySelectorAll('input[name="scan_fields"]:checked').forEach(checkbox => {
        selectedFields.push(checkbox.value);
    });
    
    const uiElements = [];
    document.querySelectorAll('input[name="scan_ui_elements"]:checked').forEach(checkbox => {
        uiElements.push(checkbox.value);
    });
    
    const privateMode = document.getElementById('private-mode-toggle')?.checked || false;
    
    // Create preview URL with settings encoded
    const previewUrl = `/Card/ScanShow/${cardId}?preview=true`;
    
    // Create iframe to load preview
    scanPreview.innerHTML = `<iframe src="${previewUrl}" class="w-full h-full border-0"></iframe>`;
}


// Update initScanSettings to include fullscreen initialization
function initScanSettings() {
    const saveScanSettingsBtn = document.getElementById('save-scan-settings');
    const refreshPreviewBtn = document.getElementById('refresh-preview');
    const privateModeToggle = document.getElementById('private-mode-toggle');
    const loadPreviewBtn = document.getElementById('load-preview-btn');
    
    // Load current settings on init
    loadScanSettings();
    
    // Handle load preview button click
    if (loadPreviewBtn) {
        loadPreviewBtn.addEventListener('click', function() {
            loadScanPreview();
        });
    }
    
    if (saveScanSettingsBtn) {
        saveScanSettingsBtn.addEventListener('click', function() {
            saveScanSettings();
            showToast('Settings saved', 'Scan settings have been saved successfully', 'success');
        });
    }
    
    if (refreshPreviewBtn) {
        refreshPreviewBtn.addEventListener('click', function() {
            loadScanPreview();
        });
    }
    
    // Handle fullscreen preview
    initFullscreenPreview();
    
    // Toggle Private Mode visual feedback
    if (privateModeToggle) {
        privateModeToggle.addEventListener('change', function() {
            updatePrivateModeUI(this.checked);
        });
    }
}

// Make sure initFullscreenPreview is correctly defined
function initFullscreenPreview() {
    const fullscreenBtn = document.getElementById('fullscreen-preview');
    const closeBtn = document.getElementById('close-fullscreen');
    const container = document.getElementById('preview-container');
    const controls = document.getElementById('preview-controls');
    
    if (fullscreenBtn && container) {
        fullscreenBtn.addEventListener('click', () => {
            container.classList.add('fixed', 'inset-0', 'z-50', 'bg-white');
            controls.classList.remove('hidden');
            document.body.classList.add('overflow-hidden');
            
            // Reload with fullscreen dimensions
            const scanPreview = document.getElementById('scan-preview');
            scanPreview.classList.remove('h-[800px]');
            scanPreview.classList.add('h-screen');
            loadScanPreview();
        });
    }
    
    if (closeBtn && container) {
        closeBtn.addEventListener('click', () => {
            container.classList.remove('fixed', 'inset-0', 'z-50', 'bg-white');
            controls.classList.add('hidden');
            document.body.classList.remove('overflow-hidden');
            
            // Reset dimensions
            const scanPreview = document.getElementById('scan-preview');
            scanPreview.classList.remove('h-screen');
            scanPreview.classList.add('h-[800px]');
            loadScanPreview();
        });
    }
}
    </script>
}