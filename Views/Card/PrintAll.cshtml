@model IEnumerable<CardTagManager.Models.Card>

@{
    ViewData["Title"] = "Print Product Tags";
    Layout = "_PrintLayout";
}

<div class="no-print sticky top-0 z-10 bg-white shadow-sm border-b border-gray-100 mb-6 py-3">
    <div class="container mx-auto px-4">
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
                <a asp-action="Index" class="inline-flex items-center text-primary-600 hover:text-primary-700 transition-colors group">
                    <i class="fas fa-arrow-left mr-2 group-hover:-translate-x-1 transition-transform"></i> 
                    <span>Back to Product Library</span>
                </a>
                <h1 class="text-xl font-bold text-gray-800 mt-1">Print Product Tags</h1>
            </div>
            <div class="flex flex-wrap gap-3">
                <button onclick="window.print()" class="btn-primary px-5 py-2 rounded-lg shadow-md hover:shadow-lg transition-all flex items-center gap-2">
                    <i class="fas fa-print"></i> Print Selected Tags
                    <span class="bg-white bg-opacity-20 text-xs px-2 py-0.5 rounded-full" id="selected-count">@Model.Count()</span>
                </button>
                <div class="dropdown relative">
                    <button class="btn-secondary px-4 py-2 flex items-center gap-2">
                        <i class="fas fa-cog"></i> Print Settings
                        <i class="fas fa-chevron-down text-xs opacity-70"></i>
                    </button>
                    <div class="dropdown-menu hidden absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-xl z-10 border border-gray-100">
                        <div class="p-4 space-y-3">
                            <h3 class="font-medium text-gray-700 border-b pb-2">Layout Options</h3>
                            
                            <div>
                                <label class="text-sm text-gray-600 block mb-1">Paper Size</label>
                                <select class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" id="paper-size">
                                    <option value="a4" selected>A4 (210 × 297 mm)</option>
                                    <option value="letter">US Letter (8.5 × 11 in)</option>
                                    <option value="legal">Legal (8.5 × 14 in)</option>
                                </select>
                            </div>
                            
                            <div>
                                <label class="text-sm text-gray-600 block mb-1">Orientation</label>
                                <div class="grid grid-cols-2 gap-2">
                                    <label class="flex items-center p-2 border rounded cursor-pointer hover:bg-gray-50 transition-colors">
                                        <input type="radio" name="orientation" value="portrait" class="mr-2">
                                        <span class="text-sm">Portrait</span>
                                    </label>
                                    <label class="flex items-center p-2 border rounded cursor-pointer hover:bg-gray-50 transition-colors bg-blue-50 border-blue-200">
                                        <input type="radio" name="orientation" value="landscape" checked class="mr-2">
                                        <span class="text-sm">Landscape</span>
                                    </label>
                                </div>
                            </div>
                            
                            <div>
                                <label class="text-sm text-gray-600 block mb-1">Cards Per Page</label>
                                <select class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" id="cards-per-page">
                                    <option value="2">2 cards per row (8 per page)</option>
                                    <option value="3">3 cards per row (12 per page)</option>
                                </select>
                            </div>
                            
                            <div>
                                <label class="flex items-center cursor-pointer">
                                    <input type="checkbox" class="form-checkbox h-4 w-4 text-primary-600 rounded border-gray-300" checked>
                                    <span class="ml-2 text-sm text-gray-700">Show cut guidelines</span>
                                </label>
                            </div>
                            
                            <button class="w-full mt-2 px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors text-sm">
                                Apply Settings
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container mx-auto px-4 mb-12">
    <!-- Control Panel -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 mb-6 overflow-hidden">
        <div class="p-5 border-b border-gray-100">
            <h2 class="font-bold text-gray-800 flex items-center">
                <i class="fas fa-tags text-primary-500 mr-2"></i> Product Tags to Print
            </h2>
        </div>
        
        <!-- Filters and Search -->
        <div class="p-4 bg-gray-50 border-b border-gray-100 flex flex-wrap gap-4">
            <div class="relative flex-grow">
                <input type="text" id="search-tags" placeholder="Search tags by name, model, or location..." 
                       class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
                <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                    <i class="fas fa-search"></i>
                </div>
            </div>
            
            <div class="flex flex-wrap gap-2">
                <select class="px-3 py-2 border border-gray-300 rounded-lg text-sm" id="filter-category">
                    <option value="">All Categories</option>
                    <option value="Equipment">Equipment</option>
                    <option value="Chemical">Chemical Products</option>
                    <option value="Safety">Safety Equipment</option>
                </select>
                
                <select class="px-3 py-2 border border-gray-300 rounded-lg text-sm" id="filter-location">
                    <option value="">All Locations</option>
                    <option value="Lab">Laboratory</option>
                    <option value="Storage">Storage Room</option>
                    <option value="Office">Office</option>
                </select>
                
                <button class="px-3 py-2 border border-gray-300 bg-white rounded-lg text-sm hover:bg-gray-50 transition-colors flex items-center gap-2">
                    <i class="fas fa-filter text-gray-500"></i> More Filters
                </button>
            </div>
            
            <div class="flex-shrink-0">
                <button id="select-all" class="px-3 py-2 border border-gray-300 bg-white rounded-lg text-sm hover:bg-gray-50 transition-colors">
                    Select All
                </button>
                <button id="select-none" class="px-3 py-2 border border-gray-300 bg-white rounded-lg text-sm hover:bg-gray-50 transition-colors">
                    Deselect All
                </button>
            </div>
        </div>
        
        <!-- Selection Stats -->
        <div class="px-4 py-3 bg-blue-50 border-b border-blue-100 flex items-center justify-between">
            <div class="text-sm text-blue-700">
                <span class="font-medium">@Model.Count()</span> products selected for printing 
                <span class="text-blue-500">(approximately @Math.Ceiling((double)Model.Count() / 8) pages)</span>
            </div>
            <div>
                <button class="text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center">
                    <i class="fas fa-sync-alt mr-1"></i> Refresh Preview
                </button>
            </div>
        </div>
    </div>

    <!-- Preview Header -->
    <div class="flex items-center justify-between mb-4">
        <h2 class="text-lg font-bold text-gray-700 flex items-center">
            <i class="fas fa-eye mr-2 text-primary-500"></i> Print Preview
        </h2>
        <div class="space-x-2">
            <button class="px-3 py-1.5 rounded-md bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm transition-colors">
                <i class="fas fa-search-plus mr-1"></i> Zoom In
            </button>
            <button class="px-3 py-1.5 rounded-md bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm transition-colors">
                <i class="fas fa-search-minus mr-1"></i> Zoom Out
            </button>
        </div>
    </div>
    
    <!-- A4 Preview Container -->
    <div class="bg-gray-100 rounded-xl p-8 border border-gray-200 shadow-inner mb-6 overflow-x-auto">
        <div class="aspect-[1.4142] w-full max-w-3xl mx-auto bg-white shadow-lg p-4 transform scale-90 origin-top transition-transform duration-300 hover:scale-95">
            <!-- A4 print container -->
            <div class="a4-print-container">
                @{
                    int cardCount = 0;
                    int cardsPerPage = 8; // 2 columns × 4 rows
                    int currentPage = 1;
                }
                
                <!-- Page number indicator -->
                <div class="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-700 text-white px-3 py-1 rounded-full text-sm no-print">
                    Page <span id="current-page">1</span> of <span id="total-pages">@Math.Ceiling((double)Model.Count() / cardsPerPage)</span>
                </div>
                
                @foreach (var product in Model)
                {
                    <div class="print-card-wrapper relative group">
                        <!-- Selection overlay -->
                        <div class="absolute inset-0 bg-primary-500 bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-200 rounded-lg no-print z-10"></div>
                        
                        <!-- Selection checkbox -->
                        <div class="absolute top-2 right-2 no-print z-20">
                            <input type="checkbox" class="h-5 w-5 text-primary-600 rounded border-gray-300 focus:ring-primary-500" checked>
                        </div>
                        
                        <div class="print-card" style="background-color: @product.BackgroundColor; color: @product.TextColor;">
                            <div class="card-content">
                                <div class="card-info">
                                    <span class="category-badge" style="background-color: @product.AccentColor; color: @product.BackgroundColor">
                                        @product.Category
                                    </span>
                                    <h3 class="card-name mt-1" style="color: @product.AccentColor">@product.ProductName</h3>
                                    <p class="card-title">@product.Manufacturer</p>
                                    
                                    <div class="card-details">
                                        <p><i class="fas fa-tag" style="color: @product.AccentColor"></i><span>@product.ModelNumber</span></p>
                                        <p><i class="fas fa-fingerprint" style="color: @product.AccentColor"></i><span>SN: @product.SerialNumber</span></p>
                                        <p><i class="fas fa-map-marker-alt" style="color: @product.AccentColor"></i><span>@product.Location</span></p>
                                        <p><i class="fas fa-calendar-check" style="color: @product.AccentColor"></i><span>Warranty: @product.WarrantyExpiration.ToString("MM/dd/yyyy")</span></p>
                                    </div>
                                </div>
                                
                                <div class="card-qr">
                                    <img src="@ViewBag.QrCodes[product.Id]" alt="QR Code" class="qr-code" />
                                    <p class="scan-text">Scan for Details</p>
                                </div>
                            </div>
                            
                            <!-- Subtle corner decorations -->
                            <div class="absolute w-6 h-6 border-t-2 border-l-2 top-2 left-2 border-opacity-20" 
                                 style="border-color: @product.AccentColor"></div>
                            <div class="absolute w-6 h-6 border-t-2 border-r-2 top-2 right-2 border-opacity-20" 
                                 style="border-color: @product.AccentColor"></div>
                            <div class="absolute w-6 h-6 border-b-2 border-l-2 bottom-2 left-2 border-opacity-20" 
                                 style="border-color: @product.AccentColor"></div>
                            <div class="absolute w-6 h-6 border-b-2 border-r-2 bottom-2 right-2 border-opacity-20" 
                                 style="border-color: @product.AccentColor"></div>
                        </div>
                        
                        <!-- Cut lines (visible in preview only) -->
                        <div class="absolute top-0 left-0 right-0 border-t border-dashed border-gray-300 no-print"></div>
                        <div class="absolute bottom-0 left-0 right-0 border-b border-dashed border-gray-300 no-print"></div>
                        <div class="absolute top-0 bottom-0 left-0 border-l border-dashed border-gray-300 no-print"></div>
                        <div class="absolute top-0 bottom-0 right-0 border-r border-dashed border-gray-300 no-print"></div>
                    </div>
                    
                    cardCount++;
                    
                    // Add visual page breaks in the preview (these don't affect actual printing)
                    if (cardCount % cardsPerPage == 0 && cardCount < Model.Count())
                    {
                        currentPage++;
                        
                        <div class="no-print col-span-2 my-8 flex items-center">
                            <div class="flex-grow border-b-2 border-dashed border-gray-300"></div>
                            <span class="flex-shrink-0 bg-gray-200 px-4 py-1 text-sm text-gray-500 rounded-full mx-4">
                                Page Break
                            </span>
                            <div class="flex-grow border-b-2 border-dashed border-gray-300"></div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    
    <!-- Pages Navigation -->
    <div class="no-print flex items-center justify-center gap-2 mb-6">
        <button class="px-3 py-2 border border-gray-300 rounded-md text-gray-500 hover:bg-gray-50 disabled:opacity-50">
            <i class="fas fa-chevron-left"></i>
        </button>
        
        <div class="flex gap-1">
            @for (int i = 1; i <= Math.Ceiling((double)Model.Count() / cardsPerPage); i++)
            {
                <button class="w-10 h-10 flex items-center justify-center rounded-md border @(i == 1 ? "border-primary-500 bg-primary-50 text-primary-600" : "border-gray-300 hover:bg-gray-50")">
                    @i
                </button>
            }
        </div>
        
        <button class="px-3 py-2 border border-gray-300 rounded-md text-gray-500 hover:bg-gray-50">
            <i class="fas fa-chevron-right"></i>
        </button>
    </div>
    
    <!-- Print Tips -->
    <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-md no-print mb-8">
        <div class="flex">
            <div class="flex-shrink-0">
                <i class="fas fa-lightbulb text-xl text-blue-400"></i>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium text-blue-800">Printing Tips</h3>
                <div class="mt-2 text-sm text-blue-700 space-y-1">
                    <p>• Make sure to select <strong>"Actual Size"</strong> in your printer settings</p>
                    <p>• Disable headers and footers in browser print settings</p>
                    <p>• For best results, use cardstock paper (250gsm or higher)</p>
                    <p>• After printing, cut along the dashed lines using a paper trimmer for straight edges</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Fixed Bottom Action Bar -->
<div class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 py-3 px-4 no-print shadow-lg flex justify-between items-center z-20">
    <div class="text-sm text-gray-600">
        <span class="font-medium">@Model.Count()</span> products selected for printing
    </div>
    <div class="flex gap-3">
        <button class="btn-secondary px-4 py-2">
            <i class="fas fa-save mr-1"></i> Save Selection
        </button>
        <button onclick="window.print()" class="btn-primary px-5 py-2 rounded-lg shadow-md hover:shadow-lg transition-all flex items-center gap-2 group">
            <i class="fas fa-print group-hover:animate-bounce"></i> Print Selected Tags
            <span class="bg-white bg-opacity-20 text-xs px-2 py-0.5 rounded-full">@Model.Count()</span>
        </button>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Dropdown toggle
        const dropdownToggle = document.querySelector('.dropdown button');
        const dropdownMenu = document.querySelector('.dropdown-menu');
        
        if (dropdownToggle && dropdownMenu) {
            dropdownToggle.addEventListener('click', function() {
                dropdownMenu.classList.toggle('hidden');
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(event) {
                if (!dropdownToggle.contains(event.target) && !dropdownMenu.contains(event.target)) {
                    dropdownMenu.classList.add('hidden');
                }
            });
        }
        
        // Select/Deselect All functionality
        const selectAllBtn = document.getElementById('select-all');
        const selectNoneBtn = document.getElementById('select-none');
        const checkboxes = document.querySelectorAll('.print-card-wrapper input[type="checkbox"]');
        const selectedCountElement = document.getElementById('selected-count');
        
        if (selectAllBtn) {
            selectAllBtn.addEventListener('click', function() {
                checkboxes.forEach(checkbox => {
                    checkbox.checked = true;
                });
                updateSelectedCount();
            });
        }
        
        if (selectNoneBtn) {
            selectNoneBtn.addEventListener('click', function() {
                checkboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
                updateSelectedCount();
            });
        }
        
        // Update selected count when checkboxes change
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updateSelectedCount);
        });
        
        function updateSelectedCount() {
            const checkedCount = document.querySelectorAll('.print-card-wrapper input[type="checkbox"]:checked').length;
            const countElements = document.querySelectorAll('#selected-count');
            
            countElements.forEach(element => {
                element.textContent = checkedCount;
            });
        }
        
        // Search functionality
        const searchInput = document.getElementById('search-tags');
        
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const cardWrappers = document.querySelectorAll('.print-card-wrapper');
                
                cardWrappers.forEach(wrapper => {
                    const card = wrapper.querySelector('.print-card');
                    const text = card.textContent.toLowerCase();
                    
                    if (searchTerm === '' || text.includes(searchTerm)) {
                        wrapper.style.display = '';
                    } else {
                        wrapper.style.display = 'none';
                    }
                });
            });
        }
        
        // Category filter
        const categoryFilter = document.getElementById('filter-category');
        const locationFilter = document.getElementById('filter-location');
        
        if (categoryFilter) {
            categoryFilter.addEventListener('change', applyFilters);
        }
        
        if (locationFilter) {
            locationFilter.addEventListener('change', applyFilters);
        }
        
        function applyFilters() {
            const category = categoryFilter.value.toLowerCase();
            const location = locationFilter.value.toLowerCase();
            const cardWrappers = document.querySelectorAll('.print-card-wrapper');
            
            cardWrappers.forEach(wrapper => {
                const card = wrapper.querySelector('.print-card');
                const cardText = card.textContent.toLowerCase();
                const categoryMatch = category === '' || cardText.includes(category);
                const locationMatch = location === '' || cardText.includes(location);
                
                if (categoryMatch && locationMatch) {
                    wrapper.style.display = '';
                } else {
                    wrapper.style.display = 'none';
                }
            });
        }
        
        // Page navigation
        const pageButtons = document.querySelectorAll('.flex.gap-1 button');
        const currentPageDisplay = document.getElementById('current-page');
        
        pageButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                pageButtons.forEach(btn => {
                    btn.classList.remove('border-primary-500', 'bg-primary-50', 'text-primary-600');
                    btn.classList.add('border-gray-300', 'hover:bg-gray-50');
                });
                
                // Add active class to clicked button
                this.classList.add('border-primary-500', 'bg-primary-50', 'text-primary-600');
                this.classList.remove('border-gray-300', 'hover:bg-gray-50');
                
                // Update current page display
                if (currentPageDisplay) {
                    currentPageDisplay.textContent = this.textContent.trim();
                }
                
                // Scroll to the corresponding page break
                const pageNumber = parseInt(this.textContent.trim());
                const pageBreaks = document.querySelectorAll('.no-print.col-span-2.my-8');
                
                if (pageNumber === 1) {
                    window.scrollTo({
                        top: document.querySelector('.a4-print-container').offsetTop,
                        behavior: 'smooth'
                    });
                } else if (pageBreaks.length >= pageNumber - 1) {
                    window.scrollTo({
                        top: pageBreaks[pageNumber - 2].offsetTop,
                        behavior: 'smooth'
                    });
                }
            });
        });
        
        // Zoom functionality
        const zoomInButton = document.querySelector('button:has(.fa-search-plus)');
        const zoomOutButton = document.querySelector('button:has(.fa-search-minus)');
        const previewContainer = document.querySelector('.aspect-\\[1\\.4142\\]');
        let currentScale = 90;
        
        if (zoomInButton && previewContainer) {
            zoomInButton.addEventListener('click', function() {
                if (currentScale < 150) {
                    currentScale += 10;
                    previewContainer.style.transform = `scale(${currentScale/100})`;
                }
            });
        }
        
        if (zoomOutButton && previewContainer) {
            zoomOutButton.addEventListener('click', function() {
                if (currentScale > 50) {
                    currentScale -= 10;
                    previewContainer.style.transform = `scale(${currentScale/100})`;
                }
            });
        }
    });
</script>
}