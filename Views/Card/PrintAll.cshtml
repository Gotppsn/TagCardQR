@model IEnumerable<CardTagManager.Models.Card>

@{
    ViewData["Title"] = "Export Product Tags";
    Layout = "_Layout";
}

<div class="container mx-auto px-4 py-6">
    <div class="sticky top-0 z-10 bg-white shadow-sm border-b border-gray-100 mb-6 py-3">
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
                <a asp-action="Index" class="inline-flex items-center text-primary-600 hover:text-primary-700 transition-colors group">
                    <i class="fas fa-arrow-left mr-2 group-hover:-translate-x-1 transition-transform"></i> 
                    <span>Back to Product Library</span>
                </a>
                <h1 class="text-xl font-bold text-gray-800 mt-1">Export Product Tags</h1>
                <p class="text-sm text-gray-500 mt-1">Export multiple product tags as images, PDFs, or for printing</p>
            </div>
            <div class="flex flex-wrap gap-3">
                <button id="export-selected" class="btn-primary px-5 py-2 rounded-lg shadow-md hover:shadow-lg transition-all flex items-center gap-2">
                    <i class="fas fa-download"></i> Export Selected
                    <span class="bg-white bg-opacity-20 text-xs px-2 py-0.5 rounded-full" id="selected-count">@Model.Count()</span>
                </button>
                <div class="dropdown relative">
                    <button class="btn-secondary px-4 py-2 flex items-center gap-2">
                        <i class="fas fa-cog"></i> Export Settings
                        <i class="fas fa-chevron-down text-xs opacity-70"></i>
                    </button>
                    <div class="dropdown-menu hidden absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-xl z-10 border border-gray-100">
                        <div class="p-4 space-y-3">
                            <h3 class="font-medium text-gray-700 border-b pb-2">Export Options</h3>
                            
                            <div>
                                <label class="text-sm text-gray-600 block mb-1">Format</label>
                                <select class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" id="export-format">
                                    <option value="png" selected>PNG Image</option>
                                    <option value="pdf">PDF Document</option>
                                    <option value="zip">ZIP Archive</option>
                                    <option value="print">Direct Print</option>
                                </select>
                            </div>
                            
                            <div>
                                <label class="text-sm text-gray-600 block mb-1">Card Size</label>
                                <select class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" id="card-size">
                                    <option value="standard" selected>Standard (3.5 × 2 in)</option>
                                    <option value="large">Large (4 × 2.5 in)</option>
                                    <option value="square">Square (3 × 3 in)</option>
                                </select>
                            </div>
                            
                            <div>
                                <label class="text-sm text-gray-600 block mb-1">QR Code Options</label>
                                <div class="space-y-2 mt-1">
                                    <label class="flex items-center cursor-pointer">
                                        <input type="checkbox" id="qr-only" class="form-checkbox h-4 w-4 text-primary-600 rounded border-gray-300 focus:ring-primary-500">
                                        <span class="ml-2 text-sm text-gray-700">QR Code Only</span>
                                    </label>
                                    
                                    <div class="pl-6">
                                        <label class="text-xs text-gray-600 block mb-1">QR Size (pixels)</label>
                                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm" id="qr-size">
                                            <option value="150">Small (150px)</option>
                                            <option value="200" selected>Medium (200px)</option>
                                            <option value="300">Large (300px)</option>
                                            <option value="400">X-Large (400px)</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <button id="apply-settings" class="w-full mt-2 px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors text-sm">
                                Apply Settings
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Control Panel -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 mb-6 overflow-hidden">
        <div class="p-5 border-b border-gray-100">
            <h2 class="font-bold text-gray-800 flex items-center">
                <i class="fas fa-tags text-primary-500 mr-2"></i> Product Tags to Export
            </h2>
        </div>
        
        <!-- Filters and Search -->
        <div class="p-4 bg-gray-50 border-b border-gray-100 flex flex-wrap gap-4">
            <div class="relative flex-grow">
                <input type="text" id="search-tags" placeholder="Search tags by name, model, or location..." 
                       class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
                <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                    <i class="fas fa-search"></i>
                </div>
            </div>
            
            <div class="flex flex-wrap gap-2">
                <select class="px-3 py-2 border border-gray-300 rounded-lg text-sm" id="filter-category">
                    <option value="">All Categories</option>
                    @foreach(var category in Model.Select(c => c.Category).Distinct().Where(c => !string.IsNullOrEmpty(c)))
                    {
                        <option value="@category">@category</option>
                    }
                </select>
                
                <select class="px-3 py-2 border border-gray-300 rounded-lg text-sm" id="filter-location">
                    <option value="">All Locations</option>
                    @foreach(var location in Model.Select(c => c.Location).Distinct().Where(l => !string.IsNullOrEmpty(l)))
                    {
                        <option value="@location">@location</option>
                    }
                </select>
            </div>
            
            <div class="flex-shrink-0">
                <button id="select-all" class="px-3 py-2 border border-gray-300 bg-white rounded-lg text-sm hover:bg-gray-50 transition-colors">
                    Select All
                </button>
                <button id="select-none" class="px-3 py-2 border border-gray-300 bg-white rounded-lg text-sm hover:bg-gray-50 transition-colors">
                    Deselect All
                </button>
            </div>
        </div>
        
        <!-- Selection Stats -->
        <div class="px-4 py-3 bg-blue-50 border-b border-blue-100 flex items-center justify-between">
            <div class="text-sm text-blue-700">
                <span class="font-medium" id="selected-total">@Model.Count()</span> products selected for export 
            </div>
            <div>
                <span id="export-info" class="text-blue-600 text-sm"></span>
            </div>
        </div>
    </div>

    <!-- Product Cards Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-8">
        @foreach (var card in Model)
        {
            <div class="card-item bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden hover:shadow-md transition-all group/card">
                <div class="relative">
                    <!-- Selection overlay -->
                    <div class="absolute inset-0 bg-primary-500 bg-opacity-0 group-hover/card:bg-opacity-10 transition-all duration-200 z-10"></div>
                    
                    <!-- Selection checkbox -->
                    <div class="absolute top-2 right-2 z-20">
                        <input type="checkbox" class="h-5 w-5 text-primary-600 rounded border-gray-300 focus:ring-primary-500 card-checkbox" value="@card.Id" checked>
                    </div>
                    
                    <!-- Tag Preview -->
                    <div class="p-4">
                        <div class="card-preview" data-id="@card.Id" style="background-color: @card.BackgroundColor; color: @card.TextColor; border-radius: 8px; padding: 16px; min-height: 180px;">
                            <div style="display: flex; flex-direction: column; height: 100%;">
                                <div style="margin-bottom: 10px;">
                                    @if (!string.IsNullOrEmpty(card.Category))
                                    {
                                        <span style="background-color: @card.AccentColor; color: @card.BackgroundColor; padding: 4px 8px; border-radius: 4px; font-size: 0.7rem; font-weight: bold; text-transform: uppercase;">
                                            @card.Category
                                        </span>
                                    }
                                    <h3 style="color: @card.AccentColor; font-weight: bold; margin-top: 8px; font-size: 1rem;">@card.ProductName</h3>
                                </div>
                                
                                <div style="display: flex; justify-content: space-between; align-items: center; flex-grow: 1;">
                                    <div style="font-size: 0.75rem; flex: 1;">
                                        <p><i class="fas fa-map-marker-alt" style="color: @card.AccentColor; width: 16px;"></i> @card.Location</p>
                                        <p><i class="fas fa-calendar-check" style="color: @card.AccentColor; width: 16px;"></i> @card.WarrantyExpiration.ToString("MM/dd/yyyy")</p>
                                    </div>
                                    
                                    <div style="width: 60px; text-align: center;">
                                        @if (ViewBag.QrCodeImages != null && ViewBag.QrCodeImages.ContainsKey(card.Id))
                                        {
                                            <img src="@ViewBag.QrCodeImages[card.Id]" alt="QR Code" style="width: 60px; height: 60px;" class="qr-code" data-card-id="@card.Id">
                                        }
                                        else
                                        {
                                            <div class="bg-red-50 text-red-500 p-1 rounded text-xs">
                                                <i class="fas fa-exclamation-circle"></i> No QR
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Card Footer -->
                <div class="p-3 bg-gray-50 border-t border-gray-100 flex justify-between items-center">
                    <div class="text-xs text-gray-500">
                        ID: @card.Id
                    </div>
                    <div class="flex space-x-2">
                        <a href="#" class="view-qr text-xs text-blue-600 hover:text-blue-800" data-id="@card.Id">
                            <i class="fas fa-qrcode"></i>
                        </a>
                        <a asp-action="Print" asp-route-id="@card.Id" class="text-xs text-gray-600 hover:text-primary-600">
                            <i class="fas fa-external-link-alt"></i>
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <!-- Export Tips -->
    <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-md mb-8">
        <div class="flex">
            <div class="flex-shrink-0">
                <i class="fas fa-lightbulb text-xl text-blue-400"></i>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium text-blue-800">Export Tips</h3>
                <div class="mt-2 text-sm text-blue-700 space-y-1">
                    <p>• For multiple cards, ZIP archive is recommended</p>
                    <p>• QR Code Only option is best for quick digital sharing</p>
                    <p>• For physical printing, use the PDF option or Direct Print for best results</p>
                    <p>• PNG files can be easily imported into other applications</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- QR Code Preview Modal -->
<div id="qr-preview-modal" class="fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-lg max-w-md w-full p-6">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-gray-900" id="modal-title">QR Code Preview</h3>
            <button type="button" id="close-modal" class="text-gray-400 hover:text-gray-500">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
        
        <div class="flex justify-center py-4">
            <div class="bg-white p-4 rounded-lg shadow-sm" id="modal-qr-container">
                <img src="" alt="QR Code" class="w-64 h-64" id="modal-qr-image">
            </div>
        </div>
        
        <div class="flex justify-center border-t border-gray-200 pt-4">
            <button id="download-qr" class="btn-primary px-4 py-2 rounded flex items-center">
                <i class="fas fa-download mr-2"></i> Download QR Code
            </button>
        </div>
    </div>
</div>

<!-- Fixed Bottom Action Bar -->
<div class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 py-3 px-4 shadow-lg flex justify-between items-center z-20">
    <div class="text-sm text-gray-600">
        <span class="font-medium" id="bottom-selected-count">@Model.Count()</span> products selected for export
    </div>
    <div class="flex gap-3">
        <button id="save-selection" class="btn-secondary px-4 py-2">
            <i class="fas fa-save mr-1"></i> Save Selection
        </button>
        <button id="bottom-export-selected" class="btn-primary px-5 py-2 rounded-lg shadow-md hover:shadow-lg transition-all flex items-center gap-2 group">
            <i class="fas fa-download group-hover:animate-bounce"></i> Export Selected
            <span class="bg-white bg-opacity-20 text-xs px-2 py-0.5 rounded-full" id="bottom-selected-count-badge">@Model.Count()</span>
        </button>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center hidden">
    <div class="bg-white p-5 rounded-lg shadow-lg text-center">
        <div class="animate-spin mb-3 mx-auto">
            <i class="fas fa-circle-notch text-primary-600 text-3xl"></i>
        </div>
        <p class="text-lg font-medium text-gray-700">Processing Export...</p>
        <p class="text-sm text-gray-500 mt-1" id="loading-progress">Preparing files...</p>
    </div>
</div>

<!-- Error notification -->
<div id="error-toast" class="fixed bottom-4 right-4 bg-red-50 border-l-4 border-red-500 text-red-700 p-4 rounded shadow-lg hidden transform transition-all duration-500 z-50">
    <div class="flex">
        <div class="flex-shrink-0">
            <i class="fas fa-exclamation-circle text-red-500"></i>
        </div>
        <div class="ml-3">
            <p class="text-sm font-medium" id="error-message">Error message here</p>
        </div>
        <div class="ml-auto pl-3">
            <button type="button" class="inline-flex text-red-500 focus:outline-none focus:text-red-600" onclick="closeErrorToast()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
</div>

<!-- Print iframe container -->
<div id="print-container" class="hidden">
    <iframe id="print-frame" style="position: absolute; width: 0; height: 0; border: 0;"></iframe>
</div>

@section Scripts {
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Element references
        const selectAllBtn = document.getElementById('select-all');
        const selectNoneBtn = document.getElementById('select-none');
        const exportSelectedBtn = document.getElementById('export-selected');
        const bottomExportSelectedBtn = document.getElementById('bottom-export-selected');
        const searchInput = document.getElementById('search-tags');
        const categoryFilter = document.getElementById('filter-category');
        const locationFilter = document.getElementById('filter-location');
        const exportFormatSelect = document.getElementById('export-format');
        const cardSizeSelect = document.getElementById('card-size');
        const qrOnlyCheckbox = document.getElementById('qr-only');
        const qrSizeSelect = document.getElementById('qr-size');
        const applySettingsBtn = document.getElementById('apply-settings');
        const loadingOverlay = document.getElementById('loading-overlay');
        const loadingProgress = document.getElementById('loading-progress');
        const selectedCountElements = document.querySelectorAll('#selected-count, #bottom-selected-count, #bottom-selected-count-badge');
        const checkboxes = document.querySelectorAll('.card-checkbox');
        const exportInfo = document.getElementById('export-info');
        const selectedTotal = document.getElementById('selected-total');
        const saveSelectionBtn = document.getElementById('save-selection');
        const errorToast = document.getElementById('error-toast');
        const errorMessage = document.getElementById('error-message');
        const printFrame = document.getElementById('print-frame');
        
        // Modal elements
        const qrPreviewModal = document.getElementById('qr-preview-modal');
        const modalTitle = document.getElementById('modal-title');
        const modalQrImage = document.getElementById('modal-qr-image');
        const closeModalBtn = document.getElementById('close-modal');
        const downloadQrBtn = document.getElementById('download-qr');
        
        // Check required libraries
        const requiredLibraries = {
            'jszip': typeof JSZip !== 'undefined',
            'html2canvas': typeof html2canvas === 'function',
            'jspdf': typeof window.jspdf !== 'undefined'
        };
        
        const missingLibraries = Object.entries(requiredLibraries)
            .filter(([_, loaded]) => !loaded)
            .map(([name]) => name);
            
        if (missingLibraries.length > 0) {
            console.error(`Missing required libraries: ${missingLibraries.join(', ')}`);
            showError(`Missing required libraries: ${missingLibraries.join(', ')}. Please refresh the page and try again.`);
        }
        
        // Error handling function
        function showError(message) {
            if (errorToast && errorMessage) {
                errorMessage.textContent = message;
                errorToast.classList.remove('hidden');
                setTimeout(() => {
                    closeErrorToast();
                }, 5000);
            } else {
                console.error(message);
                alert(message);
            }
        }
        
        function closeErrorToast() {
            if (errorToast) {
                errorToast.classList.add('hidden');
            }
        }
        
        // Dropdown toggle
        const dropdownToggle = document.querySelector('.dropdown button');
        const dropdownMenu = document.querySelector('.dropdown-menu');
        
        if (dropdownToggle && dropdownMenu) {
            dropdownToggle.addEventListener('click', function() {
                dropdownMenu.classList.toggle('hidden');
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(event) {
                if (!dropdownToggle.contains(event.target) && !dropdownMenu.contains(event.target)) {
                    dropdownMenu.classList.add('hidden');
                }
            });
        }
        
        // Check all QR codes loaded properly
        const qrCodes = document.querySelectorAll('.qr-code');
        let missingQrCodes = 0;
        
        qrCodes.forEach(qrImg => {
            qrImg.addEventListener('error', function() {
                missingQrCodes++;
                const cardId = this.getAttribute('data-card-id');
                this.parentNode.innerHTML = `<div class="bg-red-50 text-red-500 p-1 rounded text-xs">
                    <i class="fas fa-exclamation-circle"></i> QR Error
                </div>`;
                console.error(`Failed to load QR code for card ID: ${cardId}`);
            });
        });
        
        if (missingQrCodes > 0) {
            showError(`Failed to load ${missingQrCodes} QR code${missingQrCodes > 1 ? 's' : ''}`);
        }
        
        // Select/Deselect All functionality
        if (selectAllBtn) {
            selectAllBtn.addEventListener('click', function() {
                checkboxes.forEach(checkbox => {
                    const cardItem = checkbox.closest('.card-item');
                    if (cardItem.style.display !== 'none') {
                        checkbox.checked = true;
                    }
                });
                updateSelectedCount();
            });
        }
        
        if (selectNoneBtn) {
            selectNoneBtn.addEventListener('click', function() {
                checkboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
                updateSelectedCount();
            });
        }
        
        // Update selected count when checkboxes change
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updateSelectedCount);
        });
        
        function updateSelectedCount() {
            const checkedCount = document.querySelectorAll('.card-checkbox:checked').length;
            
            selectedCountElements.forEach(element => {
                if (element) element.textContent = checkedCount;
            });
            
            if (selectedTotal) selectedTotal.textContent = checkedCount;
            
            // Update export info based on current settings
            updateExportInfo();
        }
        
        // Search functionality
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                applyFilters();
            });
        }
        
        // Category and location filters
        if (categoryFilter) {
            categoryFilter.addEventListener('change', applyFilters);
        }
        
        if (locationFilter) {
            locationFilter.addEventListener('change', applyFilters);
        }
        
        function applyFilters() {
            const searchTerm = searchInput?.value.toLowerCase() || '';
            const category = categoryFilter?.value.toLowerCase() || '';
            const location = locationFilter?.value.toLowerCase() || '';
            
            document.querySelectorAll('.card-item').forEach(item => {
                const cardText = item.textContent.toLowerCase();
                const categoryMatch = category === '' || cardText.includes(category);
                const locationMatch = location === '' || cardText.includes(location);
                const searchMatch = searchTerm === '' || cardText.includes(searchTerm);
                
                if (categoryMatch && locationMatch && searchMatch) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
            
            // Update the count after filtering
            updateSelectedCount();
        }
        
        // Apply settings button
        if (applySettingsBtn) {
            applySettingsBtn.addEventListener('click', function() {
                if (dropdownMenu) dropdownMenu.classList.add('hidden');
                updateExportInfo();
                
                // Show success feedback
                this.textContent = 'Settings Applied';
                this.classList.add('bg-green-600');
                
                setTimeout(() => {
                    this.textContent = 'Apply Settings';
                    this.classList.remove('bg-green-600');
                }, 1500);
            });
        }
        
        // Update export info based on current settings
        function updateExportInfo() {
            if (!exportInfo) return;
            
            const format = exportFormatSelect?.value.toUpperCase() || 'PNG';
            const size = cardSizeSelect?.options[cardSizeSelect.selectedIndex]?.text || 'Standard Size';
            const qrOnly = qrOnlyCheckbox?.checked || false;
            const qrSize = qrSizeSelect?.value || '200';
            const count = document.querySelectorAll('.card-checkbox:checked').length;
            
            let info = `${format} export • `;
            
            if (qrOnly) {
                info += `QR Only (${qrSize}px)`;
            } else {
                info += size;
            }
            
            exportInfo.textContent = info;
        }
        
        // Export functionality
        if (exportSelectedBtn) {
            exportSelectedBtn.addEventListener('click', startExport);
        }
        
        if (bottomExportSelectedBtn) {
            bottomExportSelectedBtn.addEventListener('click', startExport);
        }
        
        function startExport() {
            const selectedCards = getSelectedCardIds();
            
            if (selectedCards.length === 0) {
                showError('Please select at least one product to export.');
                return;
            }
            
            // Show loading overlay
            if (loadingOverlay) loadingOverlay.classList.remove('hidden');
            if (loadingProgress) loadingProgress.textContent = 'Preparing files...';
            
            // Get export settings
            const format = exportFormatSelect?.value || 'png';
            const cardSize = cardSizeSelect?.value || 'standard';
            const qrOnly = qrOnlyCheckbox?.checked || false;
            const qrSize = parseInt(qrSizeSelect?.value || '200');
            
            try {
                // Different export process based on format
                if (format === 'print') {
                    // Direct print
                    exportForPrinting(selectedCards, cardSize, qrOnly);
                } else if (selectedCards.length === 1) {
                    // Single card export
                    exportSingleCard(selectedCards[0], format, cardSize, qrOnly, qrSize);
                } else {
                    // Multiple cards export - use ZIP for multiple files
                    exportMultipleCards(selectedCards, format, cardSize, qrOnly, qrSize);
                }
            } catch (error) {
                console.error('Export error:', error);
                if (loadingOverlay) loadingOverlay.classList.add('hidden');
                showError(`Export failed: ${error.message || 'Unknown error'}`);
            }
        }
        
        function getSelectedCardIds() {
            return Array.from(document.querySelectorAll('.card-checkbox:checked')).map(cb => cb.value);
        }
        
        async function exportSingleCard(cardId, format, cardSize, qrOnly, qrSize) {
            const cardItem = document.querySelector(`.card-preview[data-id="${cardId}"]`);
            if (!cardItem) {
                if (loadingOverlay) loadingOverlay.classList.add('hidden');
                showError(`Card with ID ${cardId} not found`);
                return;
            }
            
            const cardName = getCardName(cardItem) || `card_${cardId}`;
            
            try {
                if (qrOnly) {
                    // Export just the QR code
                    const qrImage = cardItem.querySelector('img');
                    if (qrImage) {
                        await exportQrCode(qrImage.src, cardName, format, qrSize);
                    } else {
                        throw new Error("QR code image not found");
                    }
                } else {
                    // Export full card
                    await exportCardAsImage(cardItem, cardName, format, cardSize);
                }
                
                // Hide loading overlay
                if (loadingOverlay) loadingOverlay.classList.add('hidden');
            } catch (error) {
                console.error('Export error:', error);
                if (loadingOverlay) loadingOverlay.classList.add('hidden');
                showError(`Export failed: ${error.message || 'Unknown error'}`);
            }
        }
        
        async function exportMultipleCards(cardIds, format, cardSize, qrOnly, qrSize) {
            try {
                // Check if JSZip is available
                if (typeof JSZip !== 'function' && typeof JSZip !== 'object') {
                    throw new Error("JSZip library not loaded");
                }
                
                // Create a new JSZip instance
                const zip = new JSZip();
                const totalCards = cardIds.length;
                let successCount = 0;
                let errorCount = 0;
                
                for (let i = 0; i < cardIds.length; i++) {
                    const cardId = cardIds[i];
                    
                    // Update loading progress
                    if (loadingProgress) {
                        loadingProgress.textContent = `Processing card ${i + 1} of ${totalCards}...`;
                    }
                    
                    try {
                        const cardItem = document.querySelector(`.card-preview[data-id="${cardId}"]`);
                        if (!cardItem) {
                            console.error(`Card item not found for ID: ${cardId}`);
                            errorCount++;
                            continue;
                        }
                        
                        const cardName = getCardName(cardItem) || `card_${cardId}`;
                        
                        if (qrOnly) {
                            // Get QR code as blob
                            const qrImage = cardItem.querySelector('img');
                            if (qrImage) {
                                const qrBlob = await getQrCodeBlob(qrImage.src, qrSize);
                                zip.file(`${cardName}_qr.png`, qrBlob);
                                successCount++;
                            } else {
                                console.error(`QR code not found for card ID: ${cardId}`);
                                errorCount++;
                            }
                        } else {
                            // Get card as blob
                            const cardBlob = await getCardBlob(cardItem, cardSize, format);
                            
                            if (cardBlob) {
                                const fileExtension = format === 'pdf' ? 'pdf' : 'png';
                                zip.file(`${cardName}.${fileExtension}`, cardBlob);
                                successCount++;
                            } else {
                                console.error(`Failed to create blob for card ID: ${cardId}`);
                                errorCount++;
                            }
                        }
                    } catch (cardError) {
                        console.error(`Error processing card ${cardId}:`, cardError);
                        errorCount++;
                    }
                }
                
                // Update loading message
                if (loadingProgress) {
                    loadingProgress.textContent = 'Creating ZIP archive...';
                }
                
                // Generate the ZIP file
                const content = await zip.generateAsync({ 
                    type: 'blob',
                    compression: 'DEFLATE',
                    compressionOptions: { level: 6 }
                });
                
                // Download the ZIP file
                const link = document.createElement('a');
                link.href = URL.createObjectURL(content);
                link.download = 'product_tags.zip';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                // Hide loading overlay
                if (loadingOverlay) loadingOverlay.classList.add('hidden');
                
                // Show result message
                if (errorCount > 0) {
                    showError(`Export completed with errors. ${successCount} cards exported successfully, ${errorCount} failed.`);
                }
            } catch (error) {
                console.error('Export error:', error);
                if (loadingOverlay) loadingOverlay.classList.add('hidden');
                showError(`Export failed: ${error.message || 'Unknown error'}`);
            }
        }
        
        function exportForPrinting(cardIds, cardSize, qrOnly) {
            try {
                if (!printFrame) {
                    throw new Error("Print frame not found");
                }
                
                // Create print content
                let printContent = `
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Card Tag Printing</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 0; padding: 0; }
                        .print-page { page-break-after: always; }
                        .card-container { margin: 0.5cm; padding: 0; break-inside: avoid; }
                        
                        @@media print {
                            @@page {
                                size: ${cardSize === 'standard' ? '3.5in 2in' : 
                                       cardSize === 'large' ? '4in 2.5in' : '3in 3in'};
                                margin: 0;
                            }
                            body { margin: 0; }
                            .card-container { margin: 0; }
                        }
                        
                        .qr-only-container {
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            height: 100%;
                            padding: 10px;
                        }
                        
                        .qr-only-container img {
                            max-width: 90%;
                            max-height: 90%;
                        }
                    </style>
                </head>
                <body>`;
                
                // Add each selected card
                for (const cardId of cardIds) {
                    const cardPreview = document.querySelector(`.card-preview[data-id="${cardId}"]`);
                    if (!cardPreview) continue;
                    
                    printContent += '<div class="print-page">';
                    printContent += '<div class="card-container">';
                    
                    if (qrOnly) {
                        // QR code only
                        const qrImage = cardPreview.querySelector('img');
                        if (qrImage) {
                            printContent += `
                                <div class="qr-only-container">
                                    <img src="${qrImage.src}" alt="QR Code">
                                </div>`;
                        }
                    } else {
                        // Clone card HTML for printing
                        printContent += cardPreview.outerHTML;
                    }
                    
                    printContent += '</div></div>';
                }
                
                printContent += '</body></html>';
                
                // Set content and print
                const frameDoc = printFrame.contentWindow.document;
                frameDoc.open();
                frameDoc.write(printContent);
                frameDoc.close();
                
                // Wait for images to load
                setTimeout(() => {
                    if (loadingOverlay) loadingOverlay.classList.add('hidden');
                    printFrame.contentWindow.focus();
                    printFrame.contentWindow.print();
                }, 500);
            } catch (error) {
                console.error('Print error:', error);
                if (loadingOverlay) loadingOverlay.classList.add('hidden');
                showError(`Print failed: ${error.message || 'Unknown error'}`);
            }
        }
        
        function getCardName(cardItem) {
            if (!cardItem) return '';
            const nameEl = cardItem.querySelector('h3');
            if (nameEl) {
                return nameEl.textContent.trim().replace(/[^a-z0-9]/gi, '_').toLowerCase();
            }
            return '';
        }
        
        async function exportQrCode(qrSrc, cardName, format, size) {
            try {
                if (!qrSrc) throw new Error("QR code source not found");
                
                if (format === 'png') {
                    // For PNG, just download the image directly
                    const link = document.createElement('a');
                    link.href = qrSrc;
                    link.download = `${cardName}_qr.png`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                } else if (format === 'pdf') {
                    // For PDF, create a PDF with the QR code
                    if (!window.jspdf || !window.jspdf.jsPDF) {
                        throw new Error("PDF library not loaded");
                    }
                    
                    const { jsPDF } = window.jspdf;
                    const pdf = new jsPDF({
                        orientation: 'portrait',
                        unit: 'mm',
                        format: [100, 100]
                    });
                    
                    // Create a temporary image to get the proper dimensions
                    const img = new Image();
                    img.crossOrigin = 'Anonymous';
                    img.src = qrSrc;
                    
                    await new Promise((resolve, reject) => {
                        img.onload = resolve;
                        img.onerror = () => reject(new Error("Failed to load QR code image"));
                        // Set a timeout in case the image never loads
                        setTimeout(() => reject(new Error("QR code image load timeout")), 5000);
                    });
                    
                    // Add the QR code to the PDF
                    pdf.addImage(qrSrc, 'PNG', 10, 10, 80, 80);
                    pdf.save(`${cardName}_qr.pdf`);
                }
            } catch (error) {
                console.error("Error exporting QR code:", error);
                throw error;
            }
        }
        
        async function exportCardAsImage(cardItem, cardName, format, cardSize) {
            try {
                if (!cardItem) throw new Error("Card item not found");
                
                // Check if HTML2Canvas is available
                if (typeof html2canvas !== 'function') {
                    throw new Error("HTML2Canvas library not loaded");
                }
                
                // Use html2canvas to capture the card
                const canvas = await html2canvas(cardItem, {
                    scale: 2, // Higher quality
                    allowTaint: true,
                    useCORS: true,
                    logging: false
                });
                
                if (format === 'png') {
                    // PNG export
                    const pngUrl = canvas.toDataURL('image/png');
                    const link = document.createElement('a');
                    link.href = pngUrl;
                    link.download = `${cardName}.png`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                } else if (format === 'pdf') {
                    // PDF export
                    if (!window.jspdf || !window.jspdf.jsPDF) {
                        throw new Error("PDF library not loaded");
                    }
                    
                    const { jsPDF } = window.jspdf;
                    
                    let width, height;
                    if (cardSize === 'standard') {
                        width = 88.9; // 3.5 inches in mm
                        height = 50.8; // 2 inches in mm
                    } else if (cardSize === 'large') {
                        width = 101.6; // 4 inches in mm
                        height = 63.5; // 2.5 inches in mm
                    } else if (cardSize === 'square') {
                        width = 76.2; // 3 inches in mm
                        height = 76.2; // 3 inches in mm
                    }
                    
                    const pdf = new jsPDF({
                        orientation: width > height ? 'landscape' : 'portrait',
                        unit: 'mm',
                        format: [width + 20, height + 20]
                    });
                    
                    const imgData = canvas.toDataURL('image/png');
                    pdf.addImage(imgData, 'PNG', 10, 10, width, height);
                    pdf.save(`${cardName}.pdf`);
                }
            } catch (error) {
                console.error('Error exporting card:', error);
                throw error;
            }
        }
        
        async function getQrCodeBlob(qrSrc, size) {
            if (!qrSrc) return null;
            
            try {
                // Create a canvas element
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // Set canvas dimensions
                canvas.width = size;
                canvas.height = size;
                
                // Create a new Image object
                const img = new Image();
                img.crossOrigin = 'Anonymous';
                img.src = qrSrc;
                
                // Wait for the image to load
                await new Promise((resolve, reject) => {
                    img.onload = resolve;
                    img.onerror = () => reject(new Error("Failed to load QR code image"));
                    // Set a timeout in case the image never loads
                    setTimeout(() => reject(new Error("QR code image load timeout")), 5000);
                });
                
                // Draw the image on the canvas
                ctx.drawImage(img, 0, 0, size, size);
                
                // Convert canvas to blob
                return new Promise((resolve, reject) => {
                    canvas.toBlob(blob => {
                        if (blob) resolve(blob);
                        else reject(new Error("Failed to create QR code blob"));
                    }, 'image/png');
                });
            } catch (error) {
                console.error("Error creating QR code blob:", error);
                return null;
            }
        }
        
        async function getCardBlob(cardItem, cardSize, format) {
            if (!cardItem) return null;
            
            try {
                // Check if HTML2Canvas is available
                if (typeof html2canvas !== 'function') {
                    throw new Error("HTML2Canvas library not loaded");
                }
                
                // Use html2canvas to capture the card
                const canvas = await html2canvas(cardItem, {
                    scale: 2,
                    allowTaint: true,
                    useCORS: true,
                    logging: false
                });
                
                if (format === 'pdf') {
                    // For PDF, create a PDF and return as blob
                    if (!window.jspdf || !window.jspdf.jsPDF) {
                        throw new Error("PDF library not loaded");
                    }
                    
                    const { jsPDF } = window.jspdf;
                    
                    let width, height;
                    if (cardSize === 'standard') {
                        width = 88.9; // 3.5 inches in mm
                        height = 50.8; // 2 inches in mm
                    } else if (cardSize === 'large') {
                        width = 101.6; // 4 inches in mm
                        height = 63.5; // 2.5 inches in mm
                    } else if (cardSize === 'square') {
                        width = 76.2; // 3 inches in mm
                        height = 76.2; // 3 inches in mm
                    }
                    
                    const pdf = new jsPDF({
                        orientation: width > height ? 'landscape' : 'portrait',
                        unit: 'mm',
                        format: [width + 20, height + 20]
                    });
                    
                    const imgData = canvas.toDataURL('image/png');
                    pdf.addImage(imgData, 'PNG', 10, 10, width, height);
                    
                    return pdf.output('blob');
                } else {
                    // For PNG, convert canvas to blob
                    return new Promise((resolve, reject) => {
                        canvas.toBlob(blob => {
                            if (blob) resolve(blob);
                            else reject(new Error("Failed to create card blob"));
                        }, 'image/png');
                    });
                }
            } catch (error) {
                console.error('Error getting card blob:', error);
                return null;
            }
        }
        
        // QR Code preview modal
// QR Code preview modal
        document.querySelectorAll('.view-qr').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                
                const cardId = this.getAttribute('data-id');
                const cardItem = document.querySelector(`.card-preview[data-id="${cardId}"]`);
                const qrImage = cardItem.querySelector('img');
                
                if (!qrImage) {
                    showError("QR code image not found for this card");
                    return;
                }
                
                const cardName = getCardName(cardItem) || `card_${cardId}`;
                
                if (modalTitle) modalTitle.textContent = `QR Code for ${cardName}`;
                if (modalQrImage) modalQrImage.src = qrImage.src;
                if (qrPreviewModal) qrPreviewModal.classList.remove('hidden');
                
                // Set up download button
                if (downloadQrBtn) {
                    downloadQrBtn.onclick = function() {
                        const link = document.createElement('a');
                        link.href = qrImage.src;
                        link.download = `${cardName}_qr.png`;
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    };
                }
            });
        });
        
        // Close modal
        if (closeModalBtn && qrPreviewModal) {
            closeModalBtn.addEventListener('click', function() {
                qrPreviewModal.classList.add('hidden');
            });
            
            // Close modal when clicking outside
            qrPreviewModal.addEventListener('click', function(e) {
                if (e.target === qrPreviewModal) {
                    qrPreviewModal.classList.add('hidden');
                }
            });
        }
        
        // Save selection button
        if (saveSelectionBtn) {
            saveSelectionBtn.addEventListener('click', function() {
                const selectedIds = getSelectedCardIds();
                
                if (selectedIds.length === 0) {
                    showError('Please select at least one product to save.');
                    return;
                }
                
                try {
                    // Save to localStorage
                    const selection = {
                        ids: selectedIds,
                        timestamp: new Date().toISOString(),
                        count: selectedIds.length
                    };
                    
                    localStorage.setItem('savedCardSelection', JSON.stringify(selection));
                    
                    // Show feedback
                    this.innerHTML = '<i class="fas fa-check-circle mr-1"></i> Selection Saved';
                    this.classList.add('bg-green-600', 'text-white');
                    
                    setTimeout(() => {
                        this.innerHTML = '<i class="fas fa-save mr-1"></i> Save Selection';
                        this.classList.remove('bg-green-600', 'text-white');
                    }, 1500);
                } catch (error) {
                    console.error("Error saving selection:", error);
                    showError(`Failed to save selection: ${error.message || "Storage error"}`);
                }
            });
        }
        
        // Load saved selection if exists
        try {
            const savedSelection = localStorage.getItem('savedCardSelection');
            if (savedSelection) {
                const selection = JSON.parse(savedSelection);
                if (selection && selection.ids && selection.ids.length > 0) {
                    // Add "Load Saved" button next to "Select All"
                    const loadSavedBtn = document.createElement('button');
                    loadSavedBtn.className = 'px-3 py-2 border border-primary-300 bg-primary-50 text-primary-700 rounded-lg text-sm hover:bg-primary-100 transition-colors';
                    loadSavedBtn.innerHTML = `<i class="fas fa-folder-open mr-1"></i> Load Saved (${selection.count})`;
                    
                    if (selectNoneBtn && selectNoneBtn.parentNode) {
                        selectNoneBtn.parentNode.appendChild(loadSavedBtn);
                    
                        loadSavedBtn.addEventListener('click', function() {
                            // Clear current selection
                            checkboxes.forEach(checkbox => {
                                checkbox.checked = false;
                            });
                            
                            // Check boxes for saved IDs
                            let loadedCount = 0;
                            selection.ids.forEach(id => {
                                const checkbox = document.querySelector(`.card-checkbox[value="${id}"]`);
                                if (checkbox) {
                                    checkbox.checked = true;
                                    loadedCount++;
                                }
                            });
                            
                            updateSelectedCount();
                            
                            // Show feedback if some cards couldn't be loaded
                            if (loadedCount < selection.ids.length) {
                                showError(`Loaded ${loadedCount} of ${selection.ids.length} saved cards. Some cards may no longer exist.`);
                            }
                        });
                    }
                }
            }
        } catch (error) {
            console.error('Error loading saved selection:', error);
        }
        
        // Check browser support for required features
        const browserSupportCheck = {
            localStorage: !!window.localStorage,
            canvas: !!document.createElement('canvas').getContext,
            download: 'download' in document.createElement('a'),
            blob: !!window.Blob
        };
        
        const missingFeatures = Object.entries(browserSupportCheck)
            .filter(([_, supported]) => !supported)
            .map(([name]) => name);
            
        if (missingFeatures.length > 0) {
            console.warn(`Browser missing required features: ${missingFeatures.join(', ')}`);
        }
        
        // Advanced filters button
        const advancedFiltersBtn = document.getElementById('advanced-filters');
        if (advancedFiltersBtn) {
            advancedFiltersBtn.addEventListener('click', function() {
                // For future implementation of advanced filtering
                alert('Advanced filtering will be available in a future update.');
            });
        }
        
        // Handle window beforeunload to warn about potential data loss
        window.addEventListener('beforeunload', function(e) {
            const selectedCount = document.querySelectorAll('.card-checkbox:checked').length;
            if (selectedCount > 0 && !document.getElementById('loading-overlay').classList.contains('hidden')) {
                // Show confirmation dialog if export is in progress
                e.preventDefault();
                e.returnValue = 'Export is in progress. Are you sure you want to leave?';
                return e.returnValue;
            }
        });
        
        // Initialize
        updateExportInfo();
    });
</script>
}